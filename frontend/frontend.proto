package Frontend_ir;

message Un_op {
  message _NotOp {}
  message _NegOp {}

  oneof value {
    _NotOp not = 1;
    _NegOp neg = 2;
  }
}

message Bin_op {
  message _PlusOp {}
  message _EqualsOp {}
  message _LessThanOp {}
  oneof value {
    _PlusOp plus = 1;
    _EqualsOp equals = 2;
    _LessThanOp lessthan = 3;
  }
}

message Identifier {
  message _Var {
    required string var_name = 1;
  }
  oneof value {
    _Var var = 1;
  }
}

message Type_expr {
  
  message _RankedType {
    required int32 rank = 1;
  }
  
  oneof value {
    _RankedType Int32Ty = 1;
  }
}

message Expr {

  message _FunctionApp {
    required string name = 1;
    repeated Expr args = 2;
  }

  message _Printf {
    required string format = 1;
    repeated Expr f_args = 2;
  }

  message _Unop {
    required Un_op op = 1;
    required Expr uexpr = 2;
  }

  message _Binop {
    required Bin_op bin_op = 1;
    required Expr lexpr = 2;
    required Expr rexpr = 3;
  }

  message _VarDecl {
    required string var_id = 1;
    required Type_expr texpr = 2;
  }

  message _Assign {
    required Identifier lhs = 1;
    required Expr rhs = 2;
  }

  message _If_expr {
    required Expr eval = 1;
    required Expr if_expr = 2;
    required Expr else_expr = 3;
  }

  message _Block {
    repeated Expr expr_list = 1;
  }

  message _While_expr {
    required Expr while_cond = 1;
    required Expr while_block = 2;
  }

  message _Break {}

  message _Continue{}
  
  oneof value {
    int32 Integer = 1;
    _FunctionApp FunctionApp = 2;
    _Printf Printf = 3;
    _Unop Unop = 4;
    _Binop Binop = 5;
    _VarDecl VarDecl = 6;
    _Assign Assign = 7;
    Identifier ExprId = 8;
    _If_expr IfExpr = 9;
    _Block BlockExpr = 10;
    _While_expr WhileExpr = 11;
    _Break Break = 12;
    _Continue Continue = 13;
  }
}

message Program {
  repeated Expr main = 1;
}
