; ModuleID = 'Module'
source_filename = "Module"
target triple = "x86_64-pc-linux-gnu"

%Object_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arr_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arrarr_Vtable_type = type { %Object_Vtable_type*, i8* }
%Objectarr_Vtable_type = type { %Object_Vtable_type*, i8* }
%Object = type { %Object_Vtable_type* }
%i32arr = type { %i32arr_Vtable_type*, i32*, i32 }
%i32arrarr = type { %i32arrarr_Vtable_type*, %i32arr*, i32 }
%Objectarr = type { %Objectarr_Vtable_type*, %Object**, i32 }

@printIntFormat = private constant [4 x i8] c"%d\0A\00", align 1
@castErrFormat = private constant [38 x i8] c"Narrow cast err: %s is not a type %s\0A\00", align 1
@outOfBoundsFormat = private constant [72 x i8] c"Line: %d | Array out of bounds exception at line. Index:%d | Length:%d\0A\00", align 1
@negativeLenFormat = private constant [62 x i8] c"Line: %d | Array len cannot be negative. Length attempted:%d\0A\00", align 1
@Object_class_name = private constant [7 x i8] c"Object\00", align 1
@Object_Vtable = global %Object_Vtable_type { %Object_Vtable_type* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @Object_class_name, i32 0, i32 0) }
@i32arr_class_name = private constant [7 x i8] c"i32arr\00", align 1
@i32arr_Vtable = global %i32arr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @i32arr_class_name, i32 0, i32 0) }
@i32arrarr_class_name = private constant [10 x i8] c"i32arrarr\00", align 1
@i32arrarr_Vtable = global %i32arrarr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @i32arrarr_class_name, i32 0, i32 0) }
@Objectarr_class_name = private constant [10 x i8] c"Objectarr\00", align 1
@Objectarr_Vtable = global %Objectarr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @Objectarr_class_name, i32 0, i32 0) }

declare i32 @printf(i8*, ...)

declare i8* @malloc(i32)

declare i8* @calloc(i32, i32)

declare void @free(i8*)

declare void @exit(i32)

define i1 @Object_IsA(%Object* %0, %Object_Vtable_type* %1, i8* %2) {
entry:
  %object = alloca %Object*, align 8
  store %Object* %0, %Object** %object, align 8
  %vtbl = alloca %Object_Vtable_type*, align 8
  store %Object_Vtable_type* %1, %Object_Vtable_type** %vtbl, align 8
  %name = alloca i8*, align 8
  store i8* %2, i8** %name, align 8
  %3 = load %Object*, %Object** %object, align 8
  %4 = ptrtoint %Object* %3 to i64
  %equal = icmp eq i64 %4, 0
  %not = xor i1 %equal, true
  br i1 %not, label %then, label %else7

then:                                             ; preds = %entry
  %5 = load %Object*, %Object** %object, align 8
  %6 = getelementptr inbounds %Object, %Object* %5, i32 0, i32 0
  %7 = load %Object_Vtable_type*, %Object_Vtable_type** %6, align 8
  store %Object_Vtable_type* %7, %Object_Vtable_type** %vtbl, align 8
  br label %loopcond

loopcond:                                         ; preds = %ifcont, %then
  %8 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %9 = ptrtoint %Object_Vtable_type* %8 to i64
  %equal1 = icmp eq i64 %9, 0
  %not2 = xor i1 %equal1, true
  br i1 %not2, label %loop, label %loopend

loop:                                             ; preds = %loopcond
  %10 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %11 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %10, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = load i8*, i8** %name, align 8
  %14 = ptrtoint i8* %12 to i64
  %15 = ptrtoint i8* %13 to i64
  %equal3 = icmp eq i64 %14, %15
  br i1 %equal3, label %then4, label %else

then4:                                            ; preds = %loop
  br label %loopend

else:                                             ; preds = %loop
  %16 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %17 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %16, i32 0, i32 0
  %18 = load %Object_Vtable_type*, %Object_Vtable_type** %17, align 8
  store %Object_Vtable_type* %18, %Object_Vtable_type** %vtbl, align 8
  br label %ifcont

ifcont:                                           ; preds = %else
  br label %loopcond

loopend:                                          ; preds = %then4, %loopcond
  %19 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %20 = ptrtoint %Object_Vtable_type* %19 to i64
  %equal5 = icmp eq i64 %20, 0
  %not6 = xor i1 %equal5, true
  br label %ifcont8

else7:                                            ; preds = %entry
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %loopend
  %iftmp = phi i1 [ %not6, %loopend ], [ false, %else7 ]
  ret i1 %iftmp
}

define void @i32arr_Constructor(%i32arr* %0, %i32arr_Vtable_type* %1, i32* %2, i32 %3) {
entry:
  %this = alloca %i32arr*, align 8
  store %i32arr* %0, %i32arr** %this, align 8
  %vtable = alloca %i32arr_Vtable_type*, align 8
  store %i32arr_Vtable_type* %1, %i32arr_Vtable_type** %vtable, align 8
  %data = alloca i32*, align 8
  store i32* %2, i32** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arr_Vtable_type*, %i32arr_Vtable_type** %vtable, align 8
  %5 = load %i32arr*, %i32arr** %this, align 8
  %6 = getelementptr inbounds %i32arr, %i32arr* %5, i32 0, i32 0
  store %i32arr_Vtable_type* %4, %i32arr_Vtable_type** %6, align 8
  %7 = load i32*, i32** %data, align 8
  %8 = load %i32arr*, %i32arr** %this, align 8
  %9 = getelementptr inbounds %i32arr, %i32arr* %8, i32 0, i32 1
  store i32* %7, i32** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arr*, %i32arr** %this, align 8
  %12 = getelementptr inbounds %i32arr, %i32arr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define void @i32arrarr_Constructor(%i32arrarr* %0, %i32arrarr_Vtable_type* %1, %i32arr* %2, i32 %3) {
entry:
  %this = alloca %i32arrarr*, align 8
  store %i32arrarr* %0, %i32arrarr** %this, align 8
  %vtable = alloca %i32arrarr_Vtable_type*, align 8
  store %i32arrarr_Vtable_type* %1, %i32arrarr_Vtable_type** %vtable, align 8
  %data = alloca %i32arr*, align 8
  store %i32arr* %2, %i32arr** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arrarr_Vtable_type*, %i32arrarr_Vtable_type** %vtable, align 8
  %5 = load %i32arrarr*, %i32arrarr** %this, align 8
  %6 = getelementptr inbounds %i32arrarr, %i32arrarr* %5, i32 0, i32 0
  store %i32arrarr_Vtable_type* %4, %i32arrarr_Vtable_type** %6, align 8
  %7 = load %i32arr*, %i32arr** %data, align 8
  %8 = load %i32arrarr*, %i32arrarr** %this, align 8
  %9 = getelementptr inbounds %i32arrarr, %i32arrarr* %8, i32 0, i32 1
  store %i32arr* %7, %i32arr** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arrarr*, %i32arrarr** %this, align 8
  %12 = getelementptr inbounds %i32arrarr, %i32arrarr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define void @Objectarr_Constructor(%Objectarr* %0, %Objectarr_Vtable_type* %1, %Object** %2, i32 %3) {
entry:
  %this = alloca %Objectarr*, align 8
  store %Objectarr* %0, %Objectarr** %this, align 8
  %vtable = alloca %Objectarr_Vtable_type*, align 8
  store %Objectarr_Vtable_type* %1, %Objectarr_Vtable_type** %vtable, align 8
  %data = alloca %Object**, align 8
  store %Object** %2, %Object*** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %Objectarr_Vtable_type*, %Objectarr_Vtable_type** %vtable, align 8
  %5 = load %Objectarr*, %Objectarr** %this, align 8
  %6 = getelementptr inbounds %Objectarr, %Objectarr* %5, i32 0, i32 0
  store %Objectarr_Vtable_type* %4, %Objectarr_Vtable_type** %6, align 8
  %7 = load %Object**, %Object*** %data, align 8
  %8 = load %Objectarr*, %Objectarr** %this, align 8
  %9 = getelementptr inbounds %Objectarr, %Objectarr* %8, i32 0, i32 1
  store %Object** %7, %Object*** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %Objectarr*, %Objectarr** %this, align 8
  %12 = getelementptr inbounds %Objectarr, %Objectarr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define i32 @main() {
entry:
  %a = alloca %i32arrarr*, align 8
  %b = alloca %Objectarr*, align 8
  store %Objectarr* null, %Objectarr** %b, align 8
  store %i32arrarr* null, %i32arrarr** %a, align 8
  br i1 false, label %negativeLenThen1, label %negativeLenCont

negativeLenThen1:                                 ; preds = %entry
  br label %negativeLenCont

negativeLenCont:                                  ; preds = %negativeLenThen1, %entry
  %newArrayResult = alloca %Objectarr, align 8
  %0 = call dereferenceable_or_null(40) i8* @calloc(i32 5, i32 8)
  %1 = bitcast i8* %0 to %Object**
  call void @Objectarr_Constructor(%Objectarr* nonnull %newArrayResult, %Objectarr_Vtable_type* nonnull @Objectarr_Vtable, %Object** %1, i32 5)
  store %Objectarr* %newArrayResult, %Objectarr** %b, align 8
  br i1 false, label %negativeLenThen2, label %negativeLenCont3

negativeLenThen2:                                 ; preds = %negativeLenCont
  br label %negativeLenCont3

negativeLenCont3:                                 ; preds = %negativeLenThen2, %negativeLenCont
  %newArrayResult4 = alloca %i32arrarr, align 8
  %2 = call dereferenceable_or_null(168) i8* @calloc(i32 7, i32 24)
  %3 = bitcast i8* %2 to %i32arr*
  call void @i32arrarr_Constructor(%i32arrarr* nonnull %newArrayResult4, %i32arrarr_Vtable_type* nonnull @i32arrarr_Vtable, %i32arr* %3, i32 7)
  store %i32arrarr* %newArrayResult4, %i32arrarr** %a, align 8
  br i1 false, label %negativeLenThen5, label %negativeLenCont6

negativeLenThen5:                                 ; preds = %negativeLenCont3
  br label %negativeLenCont6

negativeLenCont6:                                 ; preds = %negativeLenThen5, %negativeLenCont3
  %newArrayResult7 = alloca %i32arr, align 8
  %4 = call dereferenceable_or_null(8) i8* @calloc(i32 2, i32 4)
  %5 = bitcast i8* %4 to i32*
  call void @i32arr_Constructor(%i32arr* nonnull %newArrayResult7, %i32arr_Vtable_type* nonnull @i32arr_Vtable, i32* %5, i32 2)
  %6 = load %i32arrarr*, %i32arrarr** %a, align 8
  %7 = getelementptr inbounds %i32arrarr, %i32arrarr* %6, i64 0, i32 1
  %baseArrPtr = load %i32arr*, %i32arr** %7, align 8
  %8 = getelementptr inbounds %i32arrarr, %i32arrarr* %6, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, 1
  br i1 %10, label %boundsCheckThen8, label %boundsCheckElse

boundsCheckThen8:                                 ; preds = %negativeLenCont6
  %11 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 7, i32 0, i32 %9)
  call void @exit(i32 -1)
  br label %boundsCheckElse

boundsCheckElse:                                  ; preds = %boundsCheckThen8, %negativeLenCont6
  %loadRefTypeBeforeSave = load %i32arr, %i32arr* %newArrayResult7, align 8
  store %i32arr %loadRefTypeBeforeSave, %i32arr* %baseArrPtr, align 8
  %12 = load %i32arrarr*, %i32arrarr** %a, align 8
  %13 = getelementptr inbounds %i32arrarr, %i32arrarr* %12, i64 0, i32 1
  %14 = bitcast %i32arr** %13 to %Object**
  %baseArrPtr925 = load %Object*, %Object** %14, align 8
  %15 = getelementptr inbounds %i32arrarr, %i32arrarr* %12, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 1
  br i1 %17, label %boundsCheckThen10, label %boundsCheckElse11

boundsCheckThen10:                                ; preds = %boundsCheckElse
  %18 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 8, i32 0, i32 %16)
  call void @exit(i32 -1)
  br label %boundsCheckElse11

boundsCheckElse11:                                ; preds = %boundsCheckThen10, %boundsCheckElse
  %19 = load %Objectarr*, %Objectarr** %b, align 8
  %20 = getelementptr inbounds %Objectarr, %Objectarr* %19, i64 0, i32 1
  %baseArrPtr12 = load %Object**, %Object*** %20, align 8
  %21 = getelementptr inbounds %Objectarr, %Objectarr* %19, i64 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 1
  br i1 %23, label %boundsCheckThen13, label %boundsCheckElse14

boundsCheckThen13:                                ; preds = %boundsCheckElse11
  %24 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 8, i32 0, i32 %22)
  call void @exit(i32 -1)
  br label %boundsCheckElse14

boundsCheckElse14:                                ; preds = %boundsCheckThen13, %boundsCheckElse11
  store %Object* %baseArrPtr925, %Object** %baseArrPtr12, align 8
  %25 = load %Objectarr*, %Objectarr** %b, align 8
  %26 = getelementptr inbounds %Objectarr, %Objectarr* %25, i64 0, i32 1
  %baseArrPtr15 = load %Object**, %Object*** %26, align 8
  %27 = getelementptr inbounds %Objectarr, %Objectarr* %25, i64 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %28, 1
  br i1 %29, label %boundsCheckThen16, label %boundsCheckElse17

boundsCheckThen16:                                ; preds = %boundsCheckElse14
  %30 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 9, i32 0, i32 %28)
  call void @exit(i32 -1)
  br label %boundsCheckElse17

boundsCheckElse17:                                ; preds = %boundsCheckThen16, %boundsCheckElse14
  %31 = load %Object*, %Object** %baseArrPtr15, align 8
  %32 = call i1 @Object_IsA(%Object* %31, %Object_Vtable_type* nonnull @Object_Vtable, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @i32arr_class_name, i64 0, i64 0))
  br i1 %32, label %castThen, label %castElse

castThen:                                         ; preds = %boundsCheckElse17
  %33 = bitcast %Object* %31 to %i32arr*
  br label %castCont

castElse:                                         ; preds = %boundsCheckElse17
  %34 = alloca [7 x i8], align 1
  %.repack = getelementptr inbounds [7 x i8], [7 x i8]* %34, i64 0, i64 0
  store i8 79, i8* %.repack, align 1
  %.repack26 = getelementptr inbounds [7 x i8], [7 x i8]* %34, i64 0, i64 1
  store i8 98, i8* %.repack26, align 1
  %.repack27 = getelementptr inbounds [7 x i8], [7 x i8]* %34, i64 0, i64 2
  store i8 106, i8* %.repack27, align 1
  %.repack28 = getelementptr inbounds [7 x i8], [7 x i8]* %34, i64 0, i64 3
  store i8 101, i8* %.repack28, align 1
  %.repack29 = getelementptr inbounds [7 x i8], [7 x i8]* %34, i64 0, i64 4
  store i8 99, i8* %.repack29, align 1
  %.repack30 = getelementptr inbounds [7 x i8], [7 x i8]* %34, i64 0, i64 5
  store i8 116, i8* %.repack30, align 1
  %.repack31 = getelementptr inbounds [7 x i8], [7 x i8]* %34, i64 0, i64 6
  store i8 0, i8* %.repack31, align 1
  %35 = getelementptr inbounds [7 x i8], [7 x i8]* %34, i64 0, i64 0
  %36 = alloca [9 x i8], align 1
  %.repack32 = getelementptr inbounds [9 x i8], [9 x i8]* %36, i64 0, i64 0
  store i8 37, i8* %.repack32, align 1
  %.repack33 = getelementptr inbounds [9 x i8], [9 x i8]* %36, i64 0, i64 1
  store i8 105, i8* %.repack33, align 1
  %.repack34 = getelementptr inbounds [9 x i8], [9 x i8]* %36, i64 0, i64 2
  store i8 51, i8* %.repack34, align 1
  %.repack35 = getelementptr inbounds [9 x i8], [9 x i8]* %36, i64 0, i64 3
  store i8 50, i8* %.repack35, align 1
  %.repack36 = getelementptr inbounds [9 x i8], [9 x i8]* %36, i64 0, i64 4
  store i8 97, i8* %.repack36, align 1
  %.repack37 = getelementptr inbounds [9 x i8], [9 x i8]* %36, i64 0, i64 5
  store i8 114, i8* %.repack37, align 1
  %.repack38 = getelementptr inbounds [9 x i8], [9 x i8]* %36, i64 0, i64 6
  store i8 114, i8* %.repack38, align 1
  %.repack39 = getelementptr inbounds [9 x i8], [9 x i8]* %36, i64 0, i64 7
  store i8 42, i8* %.repack39, align 1
  %.repack40 = getelementptr inbounds [9 x i8], [9 x i8]* %36, i64 0, i64 8
  store i8 0, i8* %.repack40, align 1
  %37 = getelementptr inbounds [9 x i8], [9 x i8]* %36, i64 0, i64 0
  %38 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([38 x i8], [38 x i8]* @castErrFormat, i64 0, i64 0), i8* nonnull %35, i8* nonnull %37)
  call void @exit(i32 -1)
  br label %castCont

castCont:                                         ; preds = %castElse, %castThen
  %39 = load %i32arrarr*, %i32arrarr** %a, align 8
  %40 = getelementptr inbounds %i32arrarr, %i32arrarr* %39, i64 0, i32 1
  %baseArrPtr18 = load %i32arr*, %i32arr** %40, align 8
  %41 = getelementptr inbounds %i32arrarr, %i32arrarr* %39, i64 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 2
  br i1 %43, label %boundsCheckThen19, label %boundsCheckElse20

boundsCheckThen19:                                ; preds = %castCont
  %44 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 9, i32 1, i32 %42)
  call void @exit(i32 -1)
  br label %boundsCheckElse20

boundsCheckElse20:                                ; preds = %boundsCheckThen19, %castCont
  %45 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr18, i64 1
  %loadRefTypeBeforeSave21 = load %i32arr, %i32arr* %33, align 8
  store %i32arr %loadRefTypeBeforeSave21, %i32arr* %45, align 8
  %46 = load %i32arrarr*, %i32arrarr** %a, align 8
  %47 = getelementptr inbounds %i32arrarr, %i32arrarr* %46, i64 0, i32 1
  %baseArrPtr22 = load %i32arr*, %i32arr** %47, align 8
  %48 = getelementptr inbounds %i32arrarr, %i32arrarr* %46, i64 0, i32 2
  %49 = load i32, i32* %48, align 4
  %50 = icmp slt i32 %49, 2
  br i1 %50, label %boundsCheckThen23, label %boundsCheckElse24

boundsCheckThen23:                                ; preds = %boundsCheckElse20
  %51 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 10, i32 1, i32 %49)
  call void @exit(i32 -1)
  br label %boundsCheckElse24

boundsCheckElse24:                                ; preds = %boundsCheckThen23, %boundsCheckElse20
  %52 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr22, i64 1, i32 2
  %53 = load i32, i32* %52, align 4
  %54 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %53)
  %55 = bitcast %i32arrarr** %a to %Objectarr**
  %56 = load %Objectarr*, %Objectarr** %55, align 8
  store %Objectarr* %56, %Objectarr** %b, align 8
  %57 = getelementptr inbounds %Objectarr, %Objectarr* %56, i64 0, i32 2
  %58 = load i32, i32* %57, align 4
  %59 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %58)
  ret i32 0
}
