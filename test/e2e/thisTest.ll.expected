; ModuleID = 'Module'
source_filename = "Module"
target triple = "aarch64-unknown-linux-gnu"

%Object_Vtable_type = type { %Object_Vtable_type*, i8*, void (%Object*)*, void (%Object*)* }
%Object = type { %Object_Vtable_type* }
%B_Vtable_type = type { %Object_Vtable_type*, i8*, void (%Object*)*, void (%Object*)*, void (%B*)*, void (%B*)*, i32 (%B*, %A*)* }
%B = type { %B_Vtable_type*, i32 }
%A = type { %A_Vtable_type*, i32 }
%A_Vtable_type = type { %Object_Vtable_type*, i8*, void (%Object*)*, void (%Object*)*, void (%A*)*, void (%A*)*, i32 (%A*, %B*)*, i32 (%A*, i32)* }

@printIntFormat = private constant [4 x i8] c"%d\0A\00", align 1
@castErrFormat = private constant [52 x i8] c"Line no: %d | Narrow cast err: %s is not a type %s\0A\00", align 1
@outOfBoundsFormat = private constant [72 x i8] c"Line: %d | Array out of bounds exception at line. Index:%d | Length:%d\0A\00", align 1
@negativeLenFormat = private constant [62 x i8] c"Line: %d | Array len cannot be negative. Length attempted:%d\0A\00", align 1
@nullDerefFormat = private constant [29 x i8] c"Line: %d | Null dereference\0A\00", align 1
@divByZeroFormat = private constant [37 x i8] c"Line: %d | Divide by zero exception\0A\00", align 1
@Object_class_name = private constant [7 x i8] c"Object\00", align 1
@Object_Vtable = global %Object_Vtable_type { %Object_Vtable_type* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @Object_class_name, i32 0, i32 0), void (%Object*)* @"~Object_Object", void (%Object*)* @Object_Object }
@B_class_name = private constant [2 x i8] c"B\00", align 1
@B_Vtable = global %B_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @B_class_name, i32 0, i32 0), void (%Object*)* @"~Object_Object", void (%Object*)* @Object_Object, void (%B*)* @"~B_B", void (%B*)* @B_B, i32 (%B*, %A*)* @meth2_B_A }
@A_class_name = private constant [2 x i8] c"A\00", align 1
@A_Vtable = global %A_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @A_class_name, i32 0, i32 0), void (%Object*)* @"~Object_Object", void (%Object*)* @Object_Object, void (%A*)* @"~A_A", void (%A*)* @A_A, i32 (%A*, %B*)* @meth1_A_B, i32 (%A*, i32)* @meth2_A_i32 }

declare i32 @printf(i8*, ...)

declare i8* @malloc(i32)

declare i8* @calloc(i32, i32)

declare void @free(i8*)

declare void @exit(i32)

define i1 @Object_IsA(%Object* %0, %Object_Vtable_type* %1, i8* %2) {
entry:
  %object = alloca %Object*, align 8
  store %Object* %0, %Object** %object, align 8
  %vtbl = alloca %Object_Vtable_type*, align 8
  store %Object_Vtable_type* %1, %Object_Vtable_type** %vtbl, align 8
  %name = alloca i8*, align 8
  store i8* %2, i8** %name, align 8
  %3 = load %Object*, %Object** %object, align 8
  %4 = ptrtoint %Object* %3 to i64
  %equal = icmp eq i64 %4, 0
  %not = xor i1 %equal, true
  br i1 %not, label %then, label %else12

then:                                             ; preds = %entry
  %5 = load %Object*, %Object** %object, align 8
  %6 = icmp eq %Object* %5, null
  br i1 %6, label %nullDerefThen1, label %nullDerefElse

nullDerefThen1:                                   ; preds = %then
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 0)
  call void @exit(i32 -1)
  br label %nullDerefElse

nullDerefElse:                                    ; preds = %nullDerefThen1, %then
  %8 = getelementptr inbounds %Object, %Object* %5, i32 0, i32 0
  %9 = load %Object_Vtable_type*, %Object_Vtable_type** %8, align 8
  store %Object_Vtable_type* %9, %Object_Vtable_type** %vtbl, align 8
  br label %loopcond

loopcond:                                         ; preds = %ifcont, %nullDerefElse
  %10 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %11 = ptrtoint %Object_Vtable_type* %10 to i64
  %equal2 = icmp eq i64 %11, 0
  %not3 = xor i1 %equal2, true
  br i1 %not3, label %loop, label %loopend

loop:                                             ; preds = %loopcond
  %12 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %13 = icmp eq %Object_Vtable_type* %12, null
  br i1 %13, label %nullDerefThen4, label %nullDerefElse5

nullDerefThen4:                                   ; preds = %loop
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 0)
  call void @exit(i32 -1)
  br label %nullDerefElse5

nullDerefElse5:                                   ; preds = %nullDerefThen4, %loop
  %15 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %12, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = load i8*, i8** %name, align 8
  %18 = ptrtoint i8* %16 to i64
  %19 = ptrtoint i8* %17 to i64
  %equal6 = icmp eq i64 %18, %19
  br i1 %equal6, label %then7, label %else

then7:                                            ; preds = %nullDerefElse5
  br label %loopend

else:                                             ; preds = %nullDerefElse5
  %20 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %21 = icmp eq %Object_Vtable_type* %20, null
  br i1 %21, label %nullDerefThen8, label %nullDerefElse9

nullDerefThen8:                                   ; preds = %else
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 0)
  call void @exit(i32 -1)
  br label %nullDerefElse9

nullDerefElse9:                                   ; preds = %nullDerefThen8, %else
  %23 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %20, i32 0, i32 0
  %24 = load %Object_Vtable_type*, %Object_Vtable_type** %23, align 8
  store %Object_Vtable_type* %24, %Object_Vtable_type** %vtbl, align 8
  br label %ifcont

ifcont:                                           ; preds = %nullDerefElse9
  br label %loopcond

loopend:                                          ; preds = %then7, %loopcond
  %25 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %26 = ptrtoint %Object_Vtable_type* %25 to i64
  %equal10 = icmp eq i64 %26, 0
  %not11 = xor i1 %equal10, true
  br label %ifcont13

else12:                                           ; preds = %entry
  br label %ifcont13

ifcont13:                                         ; preds = %else12, %loopend
  %iftmp = phi i1 [ %not11, %loopend ], [ false, %else12 ]
  ret i1 %iftmp
}

define void @"~Object_Object"(%Object* %0) {
entry:
  %this = alloca %Object*, align 8
  %super = alloca %Object*, align 8
  store %Object* %0, %Object** %super, align 8
  store %Object* %0, %Object** %this, align 8
  ret void
}

define void @Object_Object(%Object* %0) {
entry:
  %this = alloca %Object*, align 8
  %super = alloca %Object*, align 8
  store %Object* %0, %Object** %super, align 8
  store %Object* %0, %Object** %this, align 8
  ret void
}

define void @"~B_B"(%B* %0) {
entry:
  %this = alloca %B*, align 8
  %super = alloca %B*, align 8
  store %B* %0, %B** %super, align 8
  store %B* %0, %B** %this, align 8
  %1 = load %B*, %B** %super, align 8
  %2 = getelementptr inbounds %B, %B* %1, i32 0, i32 0
  %vTableLoad = load %B_Vtable_type*, %B_Vtable_type** %2, align 8
  %3 = getelementptr inbounds %B_Vtable_type, %B_Vtable_type* %vTableLoad, i32 0, i32 2
  %methodLoad = load void (%Object*)*, void (%Object*)** %3, align 8
  %4 = bitcast %B* %1 to %Object*
  call void %methodLoad(%Object* %4)
  ret void
}

define void @B_B(%B* %0) {
entry:
  %this = alloca %B*, align 8
  %super = alloca %B*, align 8
  store %B* %0, %B** %super, align 8
  store %B* %0, %B** %this, align 8
  %1 = load %B*, %B** %super, align 8
  %2 = getelementptr inbounds %B, %B* %1, i32 0, i32 0
  %vTableLoad = load %B_Vtable_type*, %B_Vtable_type** %2, align 8
  %3 = getelementptr inbounds %B_Vtable_type, %B_Vtable_type* %vTableLoad, i32 0, i32 3
  %methodLoad = load void (%Object*)*, void (%Object*)** %3, align 8
  %4 = bitcast %B* %1 to %Object*
  call void %methodLoad(%Object* %4)
  %5 = load %B*, %B** %super, align 8
  %6 = getelementptr inbounds %B, %B* %5, i32 0, i32 0
  %vTableLoad1 = load %B_Vtable_type*, %B_Vtable_type** %6, align 8
  %7 = getelementptr inbounds %B_Vtable_type, %B_Vtable_type* %vTableLoad1, i32 0, i32 3
  %methodLoad2 = load void (%Object*)*, void (%Object*)** %7, align 8
  %8 = bitcast %B* %5 to %Object*
  call void %methodLoad2(%Object* %8)
  ret void
}

define i32 @meth2_B_A(%B* %0, %A* %1) {
entry:
  %this = alloca %B*, align 8
  %super = alloca %B*, align 8
  store %B* %0, %B** %super, align 8
  store %B* %0, %B** %this, align 8
  %a = alloca %A*, align 8
  store %A* %1, %A** %a, align 8
  %2 = load %A*, %A** %a, align 8
  %3 = icmp eq %A* %2, null
  br i1 %3, label %nullDerefThen1, label %nullDerefElse

nullDerefThen1:                                   ; preds = %entry
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 26)
  call void @exit(i32 -1)
  br label %nullDerefElse

nullDerefElse:                                    ; preds = %nullDerefThen1, %entry
  %5 = getelementptr inbounds %A, %A* %2, i32 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = load %B*, %B** %this, align 8
  %8 = icmp eq %B* %7, null
  br i1 %8, label %nullDerefThen2, label %nullDerefElse3

nullDerefThen2:                                   ; preds = %nullDerefElse
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 26)
  call void @exit(i32 -1)
  br label %nullDerefElse3

nullDerefElse3:                                   ; preds = %nullDerefThen2, %nullDerefElse
  %10 = getelementptr inbounds %B, %B* %7, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %add = add i32 %6, %11
  %add4 = add i32 %add, 6
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i32 0, i32 0), i32 %add4)
  ret i32 0
}

define void @"~A_A"(%A* %0) {
entry:
  %this = alloca %A*, align 8
  %super = alloca %A*, align 8
  store %A* %0, %A** %super, align 8
  store %A* %0, %A** %this, align 8
  %1 = load %A*, %A** %super, align 8
  %2 = getelementptr inbounds %A, %A* %1, i32 0, i32 0
  %vTableLoad = load %A_Vtable_type*, %A_Vtable_type** %2, align 8
  %3 = getelementptr inbounds %A_Vtable_type, %A_Vtable_type* %vTableLoad, i32 0, i32 2
  %methodLoad = load void (%Object*)*, void (%Object*)** %3, align 8
  %4 = bitcast %A* %1 to %Object*
  call void %methodLoad(%Object* %4)
  ret void
}

define void @A_A(%A* %0) {
entry:
  %this = alloca %A*, align 8
  %super = alloca %A*, align 8
  store %A* %0, %A** %super, align 8
  store %A* %0, %A** %this, align 8
  %1 = load %A*, %A** %super, align 8
  %2 = getelementptr inbounds %A, %A* %1, i32 0, i32 0
  %vTableLoad = load %A_Vtable_type*, %A_Vtable_type** %2, align 8
  %3 = getelementptr inbounds %A_Vtable_type, %A_Vtable_type* %vTableLoad, i32 0, i32 3
  %methodLoad = load void (%Object*)*, void (%Object*)** %3, align 8
  %4 = bitcast %A* %1 to %Object*
  call void %methodLoad(%Object* %4)
  %5 = load %A*, %A** %super, align 8
  %6 = getelementptr inbounds %A, %A* %5, i32 0, i32 0
  %vTableLoad1 = load %A_Vtable_type*, %A_Vtable_type** %6, align 8
  %7 = getelementptr inbounds %A_Vtable_type, %A_Vtable_type* %vTableLoad1, i32 0, i32 3
  %methodLoad2 = load void (%Object*)*, void (%Object*)** %7, align 8
  %8 = bitcast %A* %5 to %Object*
  call void %methodLoad2(%Object* %8)
  ret void
}

define i32 @meth1_A_B(%A* %0, %B* %1) {
entry:
  %this = alloca %A*, align 8
  %super = alloca %A*, align 8
  store %A* %0, %A** %super, align 8
  store %A* %0, %A** %this, align 8
  %b = alloca %B*, align 8
  store %B* %1, %B** %b, align 8
  %2 = load %A*, %A** %this, align 8
  %3 = icmp eq %A* %2, null
  br i1 %3, label %nullDerefThen1, label %nullDerefElse

nullDerefThen1:                                   ; preds = %entry
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 4)
  call void @exit(i32 -1)
  br label %nullDerefElse

nullDerefElse:                                    ; preds = %nullDerefThen1, %entry
  %5 = getelementptr inbounds %A, %A* %2, i32 0, i32 1
  store i32 17, i32* %5, align 4
  %6 = call i8* @calloc(i32 1, i32 ptrtoint (%B* getelementptr (%B, %B* null, i32 1) to i32))
  %7 = bitcast i8* %6 to %B*
  %8 = getelementptr inbounds %B, %B* %7, i32 0, i32 0
  store %B_Vtable_type* @B_Vtable, %B_Vtable_type** %8, align 8
  %constructorLoad = load void (%B*)*, void (%B*)** getelementptr inbounds (%B_Vtable_type, %B_Vtable_type* @B_Vtable, i32 0, i32 5), align 8
  call void %constructorLoad(%B* %7)
  store %B* %7, %B** %b, align 8
  %9 = load %B*, %B** %b, align 8
  %10 = icmp eq %B* %9, null
  br i1 %10, label %nullDerefThen2, label %nullDerefElse3

nullDerefThen2:                                   ; preds = %nullDerefElse
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 6)
  call void @exit(i32 -1)
  br label %nullDerefElse3

nullDerefElse3:                                   ; preds = %nullDerefThen2, %nullDerefElse
  %12 = getelementptr inbounds %B, %B* %9, i32 0, i32 1
  store i32 19, i32* %12, align 4
  %13 = load %B*, %B** %b, align 8
  %14 = getelementptr inbounds %B, %B* %13, i32 0, i32 0
  %vTableLoad = load %B_Vtable_type*, %B_Vtable_type** %14, align 8
  %15 = getelementptr inbounds %B_Vtable_type, %B_Vtable_type* %vTableLoad, i32 0, i32 6
  %methodLoad = load i32 (%B*, %A*)*, i32 (%B*, %A*)** %15, align 8
  %16 = load %A*, %A** %this, align 8
  %17 = call i32 %methodLoad(%B* %13, %A* %16)
  ret i32 0
}

define i32 @meth2_A_i32(%A* %0, i32 %1) {
entry:
  %this = alloca %A*, align 8
  %super = alloca %A*, align 8
  store %A* %0, %A** %super, align 8
  store %A* %0, %A** %this, align 8
  %i = alloca i32, align 4
  store i32 %1, i32* %i, align 4
  %2 = load i32, i32* %i, align 4
  %3 = load %A*, %A** %this, align 8
  %4 = icmp eq %A* %3, null
  br i1 %4, label %nullDerefThen1, label %nullDerefElse

nullDerefThen1:                                   ; preds = %entry
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 10)
  call void @exit(i32 -1)
  br label %nullDerefElse

nullDerefElse:                                    ; preds = %nullDerefThen1, %entry
  %6 = getelementptr inbounds %A, %A* %3, i32 0, i32 1
  store i32 %2, i32* %6, align 4
  ret i32 0
}

define i32 @main() {
entry:
  %b = alloca %B*, align 8
  %a = alloca %A*, align 8
  store %A* null, %A** %a, align 8
  store %B* null, %B** %b, align 8
  %0 = call dereferenceable_or_null(16) i8* @calloc(i32 1, i32 16)
  %1 = bitcast i8* %0 to %A*
  %2 = getelementptr inbounds %A, %A* %1, i64 0, i32 0
  store %A_Vtable_type* @A_Vtable, %A_Vtable_type** %2, align 8
  %constructorLoad = load void (%A*)*, void (%A*)** getelementptr inbounds (%A_Vtable_type, %A_Vtable_type* @A_Vtable, i64 0, i32 5), align 8
  call void %constructorLoad(%A* %1)
  %3 = bitcast %A** %a to i8**
  store i8* %0, i8** %3, align 8
  %.cast = bitcast i8* %0 to %A*
  %4 = getelementptr inbounds %A, %A* %.cast, i64 0, i32 0
  %vTableLoad = load %A_Vtable_type*, %A_Vtable_type** %4, align 8
  %5 = getelementptr inbounds %A_Vtable_type, %A_Vtable_type* %vTableLoad, i64 0, i32 6
  %methodLoad = load i32 (%A*, %B*)*, i32 (%A*, %B*)** %5, align 8
  %6 = load %B*, %B** %b, align 8
  %7 = call i32 %methodLoad(%A* %.cast, %B* %6)
  %8 = load %A*, %A** %a, align 8
  %9 = getelementptr inbounds %A, %A* %8, i64 0, i32 0
  %vTableLoad1 = load %A_Vtable_type*, %A_Vtable_type** %9, align 8
  %10 = getelementptr inbounds %A_Vtable_type, %A_Vtable_type* %vTableLoad1, i64 0, i32 7
  %methodLoad2 = load i32 (%A*, i32)*, i32 (%A*, i32)** %10, align 8
  %11 = call i32 %methodLoad2(%A* %8, i32 39)
  %12 = icmp eq %A* %8, null
  br i1 %12, label %nullDerefThen3, label %nullDerefElse

nullDerefThen3:                                   ; preds = %entry
  %13 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 20)
  call void @exit(i32 -1)
  br label %nullDerefElse

nullDerefElse:                                    ; preds = %nullDerefThen3, %entry
  %14 = getelementptr inbounds %A, %A* %8, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %add = add i32 %15, 3
  %16 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %add)
  ret i32 0
}
