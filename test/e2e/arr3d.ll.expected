; ModuleID = 'Module'
source_filename = "Module"
target triple = "x86_64-pc-linux-gnu"

%Object_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arr_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arrarr_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arrarrarr_Vtable_type = type { %Object_Vtable_type*, i8* }
%Object = type { %Object_Vtable_type* }
%i32arr = type { %i32arr_Vtable_type*, i32*, i32 }
%i32arrarr = type { %i32arrarr_Vtable_type*, %i32arr*, i32 }
%i32arrarrarr = type { %i32arrarrarr_Vtable_type*, %i32arrarr*, i32 }

@printIntFormat = private constant [4 x i8] c"%d\0A\00", align 1
@castErrFormat = private constant [38 x i8] c"Narrow cast err: %s is not a type %s\0A\00", align 1
@outOfBoundsFormat = private constant [64 x i8] c"Array out of bounds exception at line %d. Index:%d | Length:%d\0A\00", align 1
@negativeLenFormat = private constant [51 x i8] c"Array len cannot be negative. Length attempted:%d\0A\00", align 1
@Object_class_name = private constant [7 x i8] c"Object\00", align 1
@Object_Vtable = global %Object_Vtable_type { %Object_Vtable_type* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @Object_class_name, i32 0, i32 0) }
@i32arr_class_name = private constant [7 x i8] c"i32arr\00", align 1
@i32arr_Vtable = global %i32arr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @i32arr_class_name, i32 0, i32 0) }
@i32arrarr_class_name = private constant [10 x i8] c"i32arrarr\00", align 1
@i32arrarr_Vtable = global %i32arrarr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @i32arrarr_class_name, i32 0, i32 0) }
@i32arrarrarr_class_name = private constant [13 x i8] c"i32arrarrarr\00", align 1
@i32arrarrarr_Vtable = global %i32arrarrarr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @i32arrarrarr_class_name, i32 0, i32 0) }

declare i32 @printf(i8*, ...)

declare i8* @malloc(i32)

declare i8* @calloc(i32, i32)

declare void @free(i8*)

declare void @exit(i32)

define i1 @Object_IsA(%Object* %0, %Object_Vtable_type* %1, i8* %2) {
entry:
  %object = alloca %Object*, align 8
  store %Object* %0, %Object** %object, align 8
  %vtbl = alloca %Object_Vtable_type*, align 8
  store %Object_Vtable_type* %1, %Object_Vtable_type** %vtbl, align 8
  %name = alloca i8*, align 8
  store i8* %2, i8** %name, align 8
  %3 = load %Object*, %Object** %object, align 8
  %4 = ptrtoint %Object* %3 to i64
  %equal = icmp eq i64 %4, 0
  %not = xor i1 %equal, true
  br i1 %not, label %then, label %else7

then:                                             ; preds = %entry
  %5 = load %Object*, %Object** %object, align 8
  %6 = getelementptr inbounds %Object, %Object* %5, i32 0, i32 0
  %7 = load %Object_Vtable_type*, %Object_Vtable_type** %6, align 8
  store %Object_Vtable_type* %7, %Object_Vtable_type** %vtbl, align 8
  br label %loopcond

loopcond:                                         ; preds = %ifcont, %then
  %8 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %9 = ptrtoint %Object_Vtable_type* %8 to i64
  %equal1 = icmp eq i64 %9, 0
  %not2 = xor i1 %equal1, true
  br i1 %not2, label %loop, label %loopend

loop:                                             ; preds = %loopcond
  %10 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %11 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %10, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = load i8*, i8** %name, align 8
  %14 = ptrtoint i8* %12 to i64
  %15 = ptrtoint i8* %13 to i64
  %equal3 = icmp eq i64 %14, %15
  br i1 %equal3, label %then4, label %else

then4:                                            ; preds = %loop
  br label %loopend

else:                                             ; preds = %loop
  %16 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %17 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %16, i32 0, i32 0
  %18 = load %Object_Vtable_type*, %Object_Vtable_type** %17, align 8
  store %Object_Vtable_type* %18, %Object_Vtable_type** %vtbl, align 8
  br label %ifcont

ifcont:                                           ; preds = %else
  br label %loopcond

loopend:                                          ; preds = %then4, %loopcond
  %19 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %20 = ptrtoint %Object_Vtable_type* %19 to i64
  %equal5 = icmp eq i64 %20, 0
  %not6 = xor i1 %equal5, true
  br label %ifcont8

else7:                                            ; preds = %entry
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %loopend
  %iftmp = phi i1 [ %not6, %loopend ], [ false, %else7 ]
  ret i1 %iftmp
}

define void @i32arr_Constructor(%i32arr* %0, %i32arr_Vtable_type* %1, i32* %2, i32 %3) {
entry:
  %this = alloca %i32arr*, align 8
  store %i32arr* %0, %i32arr** %this, align 8
  %vtable = alloca %i32arr_Vtable_type*, align 8
  store %i32arr_Vtable_type* %1, %i32arr_Vtable_type** %vtable, align 8
  %data = alloca i32*, align 8
  store i32* %2, i32** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arr_Vtable_type*, %i32arr_Vtable_type** %vtable, align 8
  %5 = load %i32arr*, %i32arr** %this, align 8
  %6 = getelementptr inbounds %i32arr, %i32arr* %5, i32 0, i32 0
  store %i32arr_Vtable_type* %4, %i32arr_Vtable_type** %6, align 8
  %7 = load i32*, i32** %data, align 8
  %8 = load %i32arr*, %i32arr** %this, align 8
  %9 = getelementptr inbounds %i32arr, %i32arr* %8, i32 0, i32 1
  store i32* %7, i32** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arr*, %i32arr** %this, align 8
  %12 = getelementptr inbounds %i32arr, %i32arr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define void @i32arrarr_Constructor(%i32arrarr* %0, %i32arrarr_Vtable_type* %1, %i32arr* %2, i32 %3) {
entry:
  %this = alloca %i32arrarr*, align 8
  store %i32arrarr* %0, %i32arrarr** %this, align 8
  %vtable = alloca %i32arrarr_Vtable_type*, align 8
  store %i32arrarr_Vtable_type* %1, %i32arrarr_Vtable_type** %vtable, align 8
  %data = alloca %i32arr*, align 8
  store %i32arr* %2, %i32arr** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arrarr_Vtable_type*, %i32arrarr_Vtable_type** %vtable, align 8
  %5 = load %i32arrarr*, %i32arrarr** %this, align 8
  %6 = getelementptr inbounds %i32arrarr, %i32arrarr* %5, i32 0, i32 0
  store %i32arrarr_Vtable_type* %4, %i32arrarr_Vtable_type** %6, align 8
  %7 = load %i32arr*, %i32arr** %data, align 8
  %8 = load %i32arrarr*, %i32arrarr** %this, align 8
  %9 = getelementptr inbounds %i32arrarr, %i32arrarr* %8, i32 0, i32 1
  store %i32arr* %7, %i32arr** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arrarr*, %i32arrarr** %this, align 8
  %12 = getelementptr inbounds %i32arrarr, %i32arrarr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define void @i32arrarrarr_Constructor(%i32arrarrarr* %0, %i32arrarrarr_Vtable_type* %1, %i32arrarr* %2, i32 %3) {
entry:
  %this = alloca %i32arrarrarr*, align 8
  store %i32arrarrarr* %0, %i32arrarrarr** %this, align 8
  %vtable = alloca %i32arrarrarr_Vtable_type*, align 8
  store %i32arrarrarr_Vtable_type* %1, %i32arrarrarr_Vtable_type** %vtable, align 8
  %data = alloca %i32arrarr*, align 8
  store %i32arrarr* %2, %i32arrarr** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arrarrarr_Vtable_type*, %i32arrarrarr_Vtable_type** %vtable, align 8
  %5 = load %i32arrarrarr*, %i32arrarrarr** %this, align 8
  %6 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %5, i32 0, i32 0
  store %i32arrarrarr_Vtable_type* %4, %i32arrarrarr_Vtable_type** %6, align 8
  %7 = load %i32arrarr*, %i32arrarr** %data, align 8
  %8 = load %i32arrarrarr*, %i32arrarrarr** %this, align 8
  %9 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %8, i32 0, i32 1
  store %i32arrarr* %7, %i32arrarr** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arrarrarr*, %i32arrarrarr** %this, align 8
  %12 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define i32 @main() {
entry:
  %dep = alloca i32, align 4
  %col = alloca i32, align 4
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca %i32arrarrarr*, align 8
  store %i32arrarrarr* null, %i32arrarrarr** %a, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %col, align 4
  store i32 0, i32* %dep, align 4
  store i32 5, i32* %i, align 4
  store i32 4, i32* %col, align 4
  store i32 3, i32* %dep, align 4
  br i1 false, label %negativeLenThen1, label %negativeLenCont

negativeLenThen1:                                 ; preds = %entry
  br label %negativeLenCont

negativeLenCont:                                  ; preds = %negativeLenThen1, %entry
  %newArrayResult = alloca %i32arrarrarr, align 8
  %0 = call dereferenceable_or_null(120) i8* @calloc(i32 5, i32 24)
  %1 = bitcast i8* %0 to %i32arrarr*
  call void @i32arrarrarr_Constructor(%i32arrarrarr* nonnull %newArrayResult, %i32arrarrarr_Vtable_type* nonnull @i32arrarrarr_Vtable, %i32arrarr* %1, i32 5)
  store %i32arrarrarr* %newArrayResult, %i32arrarrarr** %a, align 8
  br label %loopcond

loopcond:                                         ; preds = %loopend89, %negativeLenCont
  %2 = load i32, i32* %i, align 4
  %sgt = icmp sgt i32 %2, 0
  br i1 %sgt, label %loop, label %loopend90

loop:                                             ; preds = %loopcond
  %3 = load i32, i32* %i, align 4
  %sub = add i32 %3, -1
  store i32 %sub, i32* %i, align 4
  %4 = load i32, i32* %col, align 4
  store i32 %4, i32* %j, align 4
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %negativeLenThen2, label %negativeLenCont3

negativeLenThen2:                                 ; preds = %loop
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([51 x i8], [51 x i8]* @negativeLenFormat, i64 0, i64 0), i32 %4)
  call void @exit(i32 -1)
  br label %negativeLenCont3

negativeLenCont3:                                 ; preds = %negativeLenThen2, %loop
  %newArrayResult4 = alloca %i32arrarr, align 8
  %7 = call i8* @calloc(i32 %4, i32 24)
  %8 = bitcast i8* %7 to %i32arr*
  call void @i32arrarr_Constructor(%i32arrarr* nonnull %newArrayResult4, %i32arrarr_Vtable_type* nonnull @i32arrarr_Vtable, %i32arr* %8, i32 %4)
  %9 = load i32, i32* %i, align 4
  %10 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %11 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %10, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %9, %12
  br i1 %13, label %boundsCheckThen5, label %boundsCheckElse

boundsCheckThen5:                                 ; preds = %negativeLenCont3
  %14 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %15 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %14, i64 0, i32 1
  %baseArrPtr = load %i32arrarr*, %i32arrarr** %15, align 8
  %16 = sext i32 %9 to i64
  %17 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr, i64 %16
  br label %boundsCheckIfcont

boundsCheckElse:                                  ; preds = %negativeLenCont3
  %18 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 13, i32 %9, i32 %12)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont

boundsCheckIfcont:                                ; preds = %boundsCheckElse, %boundsCheckThen5
  %loadRefTypeBeforeSave = load %i32arrarr, %i32arrarr* %newArrayResult4, align 8
  store %i32arrarr %loadRefTypeBeforeSave, %i32arrarr* %17, align 8
  br label %loopcond6

loopcond6:                                        ; preds = %loopend, %boundsCheckIfcont
  %19 = load i32, i32* %j, align 4
  %sgt7 = icmp sgt i32 %19, 0
  br i1 %sgt7, label %loop8, label %loopend89

loop8:                                            ; preds = %loopcond6
  %20 = load i32, i32* %j, align 4
  %sub9 = add i32 %20, -1
  store i32 %sub9, i32* %j, align 4
  %21 = load i32, i32* %dep, align 4
  store i32 %21, i32* %k, align 4
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %negativeLenThen10, label %negativeLenCont11

negativeLenThen10:                                ; preds = %loop8
  %23 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([51 x i8], [51 x i8]* @negativeLenFormat, i64 0, i64 0), i32 %21)
  call void @exit(i32 -1)
  br label %negativeLenCont11

negativeLenCont11:                                ; preds = %negativeLenThen10, %loop8
  %newArrayResult12 = alloca %i32arr, align 8
  %24 = call i8* @calloc(i32 %21, i32 4)
  %25 = bitcast i8* %24 to i32*
  call void @i32arr_Constructor(%i32arr* nonnull %newArrayResult12, %i32arr_Vtable_type* nonnull @i32arr_Vtable, i32* %25, i32 %21)
  %26 = load i32, i32* %j, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %29 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %28, i64 0, i32 2
  %30 = load i32, i32* %29, align 4
  %31 = icmp slt i32 %27, %30
  br i1 %31, label %boundsCheckThen14, label %boundsCheckElse15

boundsCheckThen14:                                ; preds = %negativeLenCont11
  %32 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %33 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %32, i64 0, i32 1
  %baseArrPtr13 = load %i32arrarr*, %i32arrarr** %33, align 8
  %34 = sext i32 %27 to i64
  br label %boundsCheckIfcont16

boundsCheckElse15:                                ; preds = %negativeLenCont11
  %35 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 17, i32 %27, i32 %30)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont16

boundsCheckIfcont16:                              ; preds = %boundsCheckElse15, %boundsCheckThen14
  %36 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr13, i64 %34, i32 1
  %baseArrPtr17 = load %i32arr*, %i32arr** %36, align 8
  %37 = load i32, i32* %i, align 4
  %38 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %39 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %38, i64 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = icmp slt i32 %37, %40
  br i1 %41, label %boundsCheckThen19, label %boundsCheckElse20

boundsCheckThen19:                                ; preds = %boundsCheckIfcont16
  %42 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %43 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %42, i64 0, i32 1
  %baseArrPtr18 = load %i32arrarr*, %i32arrarr** %43, align 8
  %44 = sext i32 %37 to i64
  br label %boundsCheckIfcont21

boundsCheckElse20:                                ; preds = %boundsCheckIfcont16
  %45 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 17, i32 %37, i32 %40)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont21

boundsCheckIfcont21:                              ; preds = %boundsCheckElse20, %boundsCheckThen19
  %46 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr18, i64 %44, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = icmp slt i32 %26, %47
  br i1 %48, label %boundsCheckThen22, label %boundsCheckElse23

boundsCheckThen22:                                ; preds = %boundsCheckIfcont21
  %49 = sext i32 %26 to i64
  %50 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr17, i64 %49
  br label %boundsCheckIfcont24

boundsCheckElse23:                                ; preds = %boundsCheckIfcont21
  %51 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 17, i32 %26, i32 %47)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont24

boundsCheckIfcont24:                              ; preds = %boundsCheckElse23, %boundsCheckThen22
  %loadRefTypeBeforeSave25 = load %i32arr, %i32arr* %newArrayResult12, align 8
  store %i32arr %loadRefTypeBeforeSave25, %i32arr* %50, align 8
  br label %loopcond26

loopcond26:                                       ; preds = %boundsCheckIfcont88, %boundsCheckIfcont24
  %52 = load i32, i32* %k, align 4
  %sgt27 = icmp sgt i32 %52, 0
  br i1 %sgt27, label %loop28, label %loopend

loop28:                                           ; preds = %loopcond26
  %53 = load i32, i32* %k, align 4
  %sub29 = add i32 %53, -1
  store i32 %sub29, i32* %k, align 4
  %54 = load i32, i32* %i, align 4
  %55 = load i32, i32* %col, align 4
  %mul = mul i32 %54, %55
  %56 = load i32, i32* %dep, align 4
  %57 = load i32, i32* %j, align 4
  %mul3091 = add i32 %mul, %57
  %add = mul i32 %mul3091, %56
  %58 = load i32, i32* %k, align 4
  %add32 = add i32 %add, %58
  %59 = load i32, i32* %i, align 4
  %60 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %61 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %60, i64 0, i32 2
  %62 = load i32, i32* %61, align 4
  %63 = icmp slt i32 %59, %62
  br i1 %63, label %boundsCheckThen34, label %boundsCheckElse35

boundsCheckThen34:                                ; preds = %loop28
  %64 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %65 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %64, i64 0, i32 1
  %baseArrPtr33 = load %i32arrarr*, %i32arrarr** %65, align 8
  %66 = sext i32 %59 to i64
  br label %boundsCheckIfcont36

boundsCheckElse35:                                ; preds = %loop28
  %67 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %59, i32 %62)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont36

boundsCheckIfcont36:                              ; preds = %boundsCheckElse35, %boundsCheckThen34
  %68 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr33, i64 %66, i32 1
  %baseArrPtr37 = load %i32arr*, %i32arr** %68, align 8
  %69 = load i32, i32* %i, align 4
  %70 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %71 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %70, i64 0, i32 2
  %72 = load i32, i32* %71, align 4
  %73 = icmp slt i32 %69, %72
  br i1 %73, label %boundsCheckThen39, label %boundsCheckElse40

boundsCheckThen39:                                ; preds = %boundsCheckIfcont36
  %74 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %75 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %74, i64 0, i32 1
  %baseArrPtr38 = load %i32arrarr*, %i32arrarr** %75, align 8
  %76 = sext i32 %69 to i64
  br label %boundsCheckIfcont41

boundsCheckElse40:                                ; preds = %boundsCheckIfcont36
  %77 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %69, i32 %72)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont41

boundsCheckIfcont41:                              ; preds = %boundsCheckElse40, %boundsCheckThen39
  %78 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr38, i64 %76, i32 2
  %79 = load i32, i32* %78, align 4
  %80 = icmp slt i32 %57, %79
  br i1 %80, label %boundsCheckThen42, label %boundsCheckElse43

boundsCheckThen42:                                ; preds = %boundsCheckIfcont41
  %81 = sext i32 %57 to i64
  br label %boundsCheckIfcont44

boundsCheckElse43:                                ; preds = %boundsCheckIfcont41
  %82 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %57, i32 %79)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont44

boundsCheckIfcont44:                              ; preds = %boundsCheckElse43, %boundsCheckThen42
  %83 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr37, i64 %81, i32 1
  %baseArrPtr45 = load i32*, i32** %83, align 8
  %84 = load i32, i32* %j, align 4
  %85 = load i32, i32* %i, align 4
  %86 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %87 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %86, i64 0, i32 2
  %88 = load i32, i32* %87, align 4
  %89 = icmp slt i32 %85, %88
  br i1 %89, label %boundsCheckThen47, label %boundsCheckElse48

boundsCheckThen47:                                ; preds = %boundsCheckIfcont44
  %90 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %91 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %90, i64 0, i32 1
  %baseArrPtr46 = load %i32arrarr*, %i32arrarr** %91, align 8
  %92 = sext i32 %85 to i64
  br label %boundsCheckIfcont49

boundsCheckElse48:                                ; preds = %boundsCheckIfcont44
  %93 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %85, i32 %88)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont49

boundsCheckIfcont49:                              ; preds = %boundsCheckElse48, %boundsCheckThen47
  %94 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr46, i64 %92, i32 1
  %baseArrPtr50 = load %i32arr*, %i32arr** %94, align 8
  %95 = load i32, i32* %i, align 4
  %96 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %97 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %96, i64 0, i32 2
  %98 = load i32, i32* %97, align 4
  %99 = icmp slt i32 %95, %98
  br i1 %99, label %boundsCheckThen52, label %boundsCheckElse53

boundsCheckThen52:                                ; preds = %boundsCheckIfcont49
  %100 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %101 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %100, i64 0, i32 1
  %baseArrPtr51 = load %i32arrarr*, %i32arrarr** %101, align 8
  %102 = sext i32 %95 to i64
  br label %boundsCheckIfcont54

boundsCheckElse53:                                ; preds = %boundsCheckIfcont49
  %103 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %95, i32 %98)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont54

boundsCheckIfcont54:                              ; preds = %boundsCheckElse53, %boundsCheckThen52
  %104 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr51, i64 %102, i32 2
  %105 = load i32, i32* %104, align 4
  %106 = icmp slt i32 %84, %105
  br i1 %106, label %boundsCheckThen55, label %boundsCheckElse56

boundsCheckThen55:                                ; preds = %boundsCheckIfcont54
  %107 = sext i32 %84 to i64
  br label %boundsCheckIfcont57

boundsCheckElse56:                                ; preds = %boundsCheckIfcont54
  %108 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %84, i32 %105)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont57

boundsCheckIfcont57:                              ; preds = %boundsCheckElse56, %boundsCheckThen55
  %109 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr50, i64 %107, i32 2
  %110 = load i32, i32* %109, align 4
  %111 = icmp slt i32 %58, %110
  br i1 %111, label %boundsCheckThen58, label %boundsCheckElse59

boundsCheckThen58:                                ; preds = %boundsCheckIfcont57
  %112 = sext i32 %58 to i64
  %113 = getelementptr inbounds i32, i32* %baseArrPtr45, i64 %112
  br label %boundsCheckIfcont60

boundsCheckElse59:                                ; preds = %boundsCheckIfcont57
  %114 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %58, i32 %110)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont60

boundsCheckIfcont60:                              ; preds = %boundsCheckElse59, %boundsCheckThen58
  store i32 %add32, i32* %113, align 4
  %115 = load i32, i32* %k, align 4
  %116 = load i32, i32* %j, align 4
  %117 = load i32, i32* %i, align 4
  %118 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %119 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %118, i64 0, i32 2
  %120 = load i32, i32* %119, align 4
  %121 = icmp slt i32 %117, %120
  br i1 %121, label %boundsCheckThen62, label %boundsCheckElse63

boundsCheckThen62:                                ; preds = %boundsCheckIfcont60
  %122 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %123 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %122, i64 0, i32 1
  %baseArrPtr61 = load %i32arrarr*, %i32arrarr** %123, align 8
  %124 = sext i32 %117 to i64
  br label %boundsCheckIfcont64

boundsCheckElse63:                                ; preds = %boundsCheckIfcont60
  %125 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %117, i32 %120)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont64

boundsCheckIfcont64:                              ; preds = %boundsCheckElse63, %boundsCheckThen62
  %126 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr61, i64 %124, i32 1
  %baseArrPtr65 = load %i32arr*, %i32arr** %126, align 8
  %127 = load i32, i32* %i, align 4
  %128 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %129 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %128, i64 0, i32 2
  %130 = load i32, i32* %129, align 4
  %131 = icmp slt i32 %127, %130
  br i1 %131, label %boundsCheckThen67, label %boundsCheckElse68

boundsCheckThen67:                                ; preds = %boundsCheckIfcont64
  %132 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %133 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %132, i64 0, i32 1
  %baseArrPtr66 = load %i32arrarr*, %i32arrarr** %133, align 8
  %134 = sext i32 %127 to i64
  br label %boundsCheckIfcont69

boundsCheckElse68:                                ; preds = %boundsCheckIfcont64
  %135 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %127, i32 %130)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont69

boundsCheckIfcont69:                              ; preds = %boundsCheckElse68, %boundsCheckThen67
  %136 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr66, i64 %134, i32 2
  %137 = load i32, i32* %136, align 4
  %138 = icmp slt i32 %116, %137
  br i1 %138, label %boundsCheckThen70, label %boundsCheckElse71

boundsCheckThen70:                                ; preds = %boundsCheckIfcont69
  %139 = sext i32 %116 to i64
  br label %boundsCheckIfcont72

boundsCheckElse71:                                ; preds = %boundsCheckIfcont69
  %140 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %116, i32 %137)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont72

boundsCheckIfcont72:                              ; preds = %boundsCheckElse71, %boundsCheckThen70
  %141 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr65, i64 %139, i32 1
  %baseArrPtr73 = load i32*, i32** %141, align 8
  %142 = load i32, i32* %j, align 4
  %143 = load i32, i32* %i, align 4
  %144 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %145 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %144, i64 0, i32 2
  %146 = load i32, i32* %145, align 4
  %147 = icmp slt i32 %143, %146
  br i1 %147, label %boundsCheckThen75, label %boundsCheckElse76

boundsCheckThen75:                                ; preds = %boundsCheckIfcont72
  %148 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %149 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %148, i64 0, i32 1
  %baseArrPtr74 = load %i32arrarr*, %i32arrarr** %149, align 8
  %150 = sext i32 %143 to i64
  br label %boundsCheckIfcont77

boundsCheckElse76:                                ; preds = %boundsCheckIfcont72
  %151 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %143, i32 %146)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont77

boundsCheckIfcont77:                              ; preds = %boundsCheckElse76, %boundsCheckThen75
  %152 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr74, i64 %150, i32 1
  %baseArrPtr78 = load %i32arr*, %i32arr** %152, align 8
  %153 = load i32, i32* %i, align 4
  %154 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %155 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %154, i64 0, i32 2
  %156 = load i32, i32* %155, align 4
  %157 = icmp slt i32 %153, %156
  br i1 %157, label %boundsCheckThen80, label %boundsCheckElse81

boundsCheckThen80:                                ; preds = %boundsCheckIfcont77
  %158 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %159 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %158, i64 0, i32 1
  %baseArrPtr79 = load %i32arrarr*, %i32arrarr** %159, align 8
  %160 = sext i32 %153 to i64
  br label %boundsCheckIfcont82

boundsCheckElse81:                                ; preds = %boundsCheckIfcont77
  %161 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %153, i32 %156)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont82

boundsCheckIfcont82:                              ; preds = %boundsCheckElse81, %boundsCheckThen80
  %162 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr79, i64 %160, i32 2
  %163 = load i32, i32* %162, align 4
  %164 = icmp slt i32 %142, %163
  br i1 %164, label %boundsCheckThen83, label %boundsCheckElse84

boundsCheckThen83:                                ; preds = %boundsCheckIfcont82
  %165 = sext i32 %142 to i64
  br label %boundsCheckIfcont85

boundsCheckElse84:                                ; preds = %boundsCheckIfcont82
  %166 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %142, i32 %163)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont85

boundsCheckIfcont85:                              ; preds = %boundsCheckElse84, %boundsCheckThen83
  %167 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr78, i64 %165, i32 2
  %168 = load i32, i32* %167, align 4
  %169 = icmp slt i32 %115, %168
  br i1 %169, label %boundsCheckThen86, label %boundsCheckElse87

boundsCheckThen86:                                ; preds = %boundsCheckIfcont85
  %170 = sext i32 %115 to i64
  %171 = getelementptr inbounds i32, i32* %baseArrPtr73, i64 %170
  br label %boundsCheckIfcont88

boundsCheckElse87:                                ; preds = %boundsCheckIfcont85
  %172 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %115, i32 %168)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont88

boundsCheckIfcont88:                              ; preds = %boundsCheckElse87, %boundsCheckThen86
  %173 = load i32, i32* %171, align 4
  %174 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %173)
  br label %loopcond26

loopend:                                          ; preds = %loopcond26
  br label %loopcond6

loopend89:                                        ; preds = %loopcond6
  br label %loopcond

loopend90:                                        ; preds = %loopcond
  ret i32 0
}
