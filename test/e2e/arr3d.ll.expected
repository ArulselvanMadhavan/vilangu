; ModuleID = 'Module'
source_filename = "Module"
target triple = "x86_64-pc-linux-gnu"

%Object_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arr_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arrarr_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arrarrarr_Vtable_type = type { %Object_Vtable_type*, i8* }
%Object = type { %Object_Vtable_type* }
%i32arr = type { %i32arr_Vtable_type*, i32*, i32 }
%i32arrarr = type { %i32arrarr_Vtable_type*, %i32arr*, i32 }
%i32arrarrarr = type { %i32arrarrarr_Vtable_type*, %i32arrarr*, i32 }

@printIntFormat = private constant [4 x i8] c"%d\0A\00", align 1
@castErrFormat = private constant [38 x i8] c"Narrow cast err: %s is not a type %s\0A\00", align 1
@outOfBoundsFormat = private constant [72 x i8] c"Line: %d | Array out of bounds exception at line. Index:%d | Length:%d\0A\00", align 1
@negativeLenFormat = private constant [62 x i8] c"Line: %d | Array len cannot be negative. Length attempted:%d\0A\00", align 1
@Object_class_name = private constant [7 x i8] c"Object\00", align 1
@Object_Vtable = global %Object_Vtable_type { %Object_Vtable_type* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @Object_class_name, i32 0, i32 0) }
@i32arr_class_name = private constant [7 x i8] c"i32arr\00", align 1
@i32arr_Vtable = global %i32arr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @i32arr_class_name, i32 0, i32 0) }
@i32arrarr_class_name = private constant [10 x i8] c"i32arrarr\00", align 1
@i32arrarr_Vtable = global %i32arrarr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @i32arrarr_class_name, i32 0, i32 0) }
@i32arrarrarr_class_name = private constant [13 x i8] c"i32arrarrarr\00", align 1
@i32arrarrarr_Vtable = global %i32arrarrarr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @i32arrarrarr_class_name, i32 0, i32 0) }

declare i32 @printf(i8*, ...)

declare i8* @malloc(i32)

declare i8* @calloc(i32, i32)

declare void @free(i8*)

declare void @exit(i32)

define i1 @Object_IsA(%Object* %0, %Object_Vtable_type* %1, i8* %2) {
entry:
  %object = alloca %Object*, align 8
  store %Object* %0, %Object** %object, align 8
  %vtbl = alloca %Object_Vtable_type*, align 8
  store %Object_Vtable_type* %1, %Object_Vtable_type** %vtbl, align 8
  %name = alloca i8*, align 8
  store i8* %2, i8** %name, align 8
  %3 = load %Object*, %Object** %object, align 8
  %4 = ptrtoint %Object* %3 to i64
  %equal = icmp eq i64 %4, 0
  %not = xor i1 %equal, true
  br i1 %not, label %then, label %else7

then:                                             ; preds = %entry
  %5 = load %Object*, %Object** %object, align 8
  %6 = getelementptr inbounds %Object, %Object* %5, i32 0, i32 0
  %7 = load %Object_Vtable_type*, %Object_Vtable_type** %6, align 8
  store %Object_Vtable_type* %7, %Object_Vtable_type** %vtbl, align 8
  br label %loopcond

loopcond:                                         ; preds = %ifcont, %then
  %8 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %9 = ptrtoint %Object_Vtable_type* %8 to i64
  %equal1 = icmp eq i64 %9, 0
  %not2 = xor i1 %equal1, true
  br i1 %not2, label %loop, label %loopend

loop:                                             ; preds = %loopcond
  %10 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %11 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %10, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = load i8*, i8** %name, align 8
  %14 = ptrtoint i8* %12 to i64
  %15 = ptrtoint i8* %13 to i64
  %equal3 = icmp eq i64 %14, %15
  br i1 %equal3, label %then4, label %else

then4:                                            ; preds = %loop
  br label %loopend

else:                                             ; preds = %loop
  %16 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %17 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %16, i32 0, i32 0
  %18 = load %Object_Vtable_type*, %Object_Vtable_type** %17, align 8
  store %Object_Vtable_type* %18, %Object_Vtable_type** %vtbl, align 8
  br label %ifcont

ifcont:                                           ; preds = %else
  br label %loopcond

loopend:                                          ; preds = %then4, %loopcond
  %19 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %20 = ptrtoint %Object_Vtable_type* %19 to i64
  %equal5 = icmp eq i64 %20, 0
  %not6 = xor i1 %equal5, true
  br label %ifcont8

else7:                                            ; preds = %entry
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %loopend
  %iftmp = phi i1 [ %not6, %loopend ], [ false, %else7 ]
  ret i1 %iftmp
}

define void @i32arr_Constructor(%i32arr* %0, %i32arr_Vtable_type* %1, i32* %2, i32 %3) {
entry:
  %this = alloca %i32arr*, align 8
  store %i32arr* %0, %i32arr** %this, align 8
  %vtable = alloca %i32arr_Vtable_type*, align 8
  store %i32arr_Vtable_type* %1, %i32arr_Vtable_type** %vtable, align 8
  %data = alloca i32*, align 8
  store i32* %2, i32** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arr_Vtable_type*, %i32arr_Vtable_type** %vtable, align 8
  %5 = load %i32arr*, %i32arr** %this, align 8
  %6 = getelementptr inbounds %i32arr, %i32arr* %5, i32 0, i32 0
  store %i32arr_Vtable_type* %4, %i32arr_Vtable_type** %6, align 8
  %7 = load i32*, i32** %data, align 8
  %8 = load %i32arr*, %i32arr** %this, align 8
  %9 = getelementptr inbounds %i32arr, %i32arr* %8, i32 0, i32 1
  store i32* %7, i32** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arr*, %i32arr** %this, align 8
  %12 = getelementptr inbounds %i32arr, %i32arr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define void @i32arrarr_Constructor(%i32arrarr* %0, %i32arrarr_Vtable_type* %1, %i32arr* %2, i32 %3) {
entry:
  %this = alloca %i32arrarr*, align 8
  store %i32arrarr* %0, %i32arrarr** %this, align 8
  %vtable = alloca %i32arrarr_Vtable_type*, align 8
  store %i32arrarr_Vtable_type* %1, %i32arrarr_Vtable_type** %vtable, align 8
  %data = alloca %i32arr*, align 8
  store %i32arr* %2, %i32arr** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arrarr_Vtable_type*, %i32arrarr_Vtable_type** %vtable, align 8
  %5 = load %i32arrarr*, %i32arrarr** %this, align 8
  %6 = getelementptr inbounds %i32arrarr, %i32arrarr* %5, i32 0, i32 0
  store %i32arrarr_Vtable_type* %4, %i32arrarr_Vtable_type** %6, align 8
  %7 = load %i32arr*, %i32arr** %data, align 8
  %8 = load %i32arrarr*, %i32arrarr** %this, align 8
  %9 = getelementptr inbounds %i32arrarr, %i32arrarr* %8, i32 0, i32 1
  store %i32arr* %7, %i32arr** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arrarr*, %i32arrarr** %this, align 8
  %12 = getelementptr inbounds %i32arrarr, %i32arrarr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define void @i32arrarrarr_Constructor(%i32arrarrarr* %0, %i32arrarrarr_Vtable_type* %1, %i32arrarr* %2, i32 %3) {
entry:
  %this = alloca %i32arrarrarr*, align 8
  store %i32arrarrarr* %0, %i32arrarrarr** %this, align 8
  %vtable = alloca %i32arrarrarr_Vtable_type*, align 8
  store %i32arrarrarr_Vtable_type* %1, %i32arrarrarr_Vtable_type** %vtable, align 8
  %data = alloca %i32arrarr*, align 8
  store %i32arrarr* %2, %i32arrarr** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arrarrarr_Vtable_type*, %i32arrarrarr_Vtable_type** %vtable, align 8
  %5 = load %i32arrarrarr*, %i32arrarrarr** %this, align 8
  %6 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %5, i32 0, i32 0
  store %i32arrarrarr_Vtable_type* %4, %i32arrarrarr_Vtable_type** %6, align 8
  %7 = load %i32arrarr*, %i32arrarr** %data, align 8
  %8 = load %i32arrarrarr*, %i32arrarrarr** %this, align 8
  %9 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %8, i32 0, i32 1
  store %i32arrarr* %7, %i32arrarr** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arrarrarr*, %i32arrarrarr** %this, align 8
  %12 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define i32 @main() {
entry:
  %dep = alloca i32, align 4
  %col = alloca i32, align 4
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca %i32arrarrarr*, align 8
  store %i32arrarrarr* null, %i32arrarrarr** %a, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %col, align 4
  store i32 0, i32* %dep, align 4
  store i32 5, i32* %i, align 4
  store i32 4, i32* %col, align 4
  store i32 3, i32* %dep, align 4
  br i1 false, label %negativeLenThen1, label %negativeLenCont

negativeLenThen1:                                 ; preds = %entry
  br label %negativeLenCont

negativeLenCont:                                  ; preds = %negativeLenThen1, %entry
  %newArrayResult = alloca %i32arrarrarr, align 8
  %0 = call dereferenceable_or_null(120) i8* @calloc(i32 5, i32 24)
  %1 = bitcast i8* %0 to %i32arrarr*
  call void @i32arrarrarr_Constructor(%i32arrarrarr* nonnull %newArrayResult, %i32arrarrarr_Vtable_type* nonnull @i32arrarrarr_Vtable, %i32arrarr* %1, i32 5)
  store %i32arrarrarr* %newArrayResult, %i32arrarrarr** %a, align 8
  br label %loopcond

loopcond:                                         ; preds = %loopend72, %negativeLenCont
  %2 = load i32, i32* %i, align 4
  %sgt = icmp sgt i32 %2, 0
  br i1 %sgt, label %loop, label %loopend73

loop:                                             ; preds = %loopcond
  %3 = load i32, i32* %i, align 4
  %sub = add i32 %3, -1
  store i32 %sub, i32* %i, align 4
  %4 = load i32, i32* %col, align 4
  store i32 %4, i32* %j, align 4
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %negativeLenThen2, label %negativeLenCont3

negativeLenThen2:                                 ; preds = %loop
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([62 x i8], [62 x i8]* @negativeLenFormat, i64 0, i64 0), i32 13, i32 %4)
  call void @exit(i32 -1)
  br label %negativeLenCont3

negativeLenCont3:                                 ; preds = %negativeLenThen2, %loop
  %newArrayResult4 = alloca %i32arrarr, align 8
  %7 = call i8* @calloc(i32 %4, i32 24)
  %8 = bitcast i8* %7 to %i32arr*
  call void @i32arrarr_Constructor(%i32arrarr* nonnull %newArrayResult4, %i32arrarr_Vtable_type* nonnull @i32arrarr_Vtable, %i32arr* %8, i32 %4)
  %9 = load i32, i32* %i, align 4
  %10 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %11 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %10, i64 0, i32 1
  %baseArrPtr = load %i32arrarr*, %i32arrarr** %11, align 8
  %12 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %10, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %.not = icmp slt i32 %9, %13
  br i1 %.not, label %boundsCheckElse, label %boundsCheckThen5

boundsCheckThen5:                                 ; preds = %negativeLenCont3
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 13, i32 %9, i32 %13)
  call void @exit(i32 -1)
  br label %boundsCheckElse

boundsCheckElse:                                  ; preds = %boundsCheckThen5, %negativeLenCont3
  %15 = sext i32 %9 to i64
  %16 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr, i64 %15
  %loadRefTypeBeforeSave = load %i32arrarr, %i32arrarr* %newArrayResult4, align 8
  store %i32arrarr %loadRefTypeBeforeSave, %i32arrarr* %16, align 8
  br label %loopcond6

loopcond6:                                        ; preds = %loopend, %boundsCheckElse
  %17 = load i32, i32* %j, align 4
  %sgt7 = icmp sgt i32 %17, 0
  br i1 %sgt7, label %loop8, label %loopend72

loop8:                                            ; preds = %loopcond6
  %18 = load i32, i32* %j, align 4
  %sub9 = add i32 %18, -1
  store i32 %sub9, i32* %j, align 4
  %19 = load i32, i32* %dep, align 4
  store i32 %19, i32* %k, align 4
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %negativeLenThen10, label %negativeLenCont11

negativeLenThen10:                                ; preds = %loop8
  %21 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([62 x i8], [62 x i8]* @negativeLenFormat, i64 0, i64 0), i32 17, i32 %19)
  call void @exit(i32 -1)
  br label %negativeLenCont11

negativeLenCont11:                                ; preds = %negativeLenThen10, %loop8
  %newArrayResult12 = alloca %i32arr, align 8
  %22 = call i8* @calloc(i32 %19, i32 4)
  %23 = bitcast i8* %22 to i32*
  call void @i32arr_Constructor(%i32arr* nonnull %newArrayResult12, %i32arr_Vtable_type* nonnull @i32arr_Vtable, i32* %23, i32 %19)
  %24 = load i32, i32* %j, align 4
  %25 = load i32, i32* %i, align 4
  %26 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %27 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %26, i64 0, i32 1
  %baseArrPtr13 = load %i32arrarr*, %i32arrarr** %27, align 8
  %28 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %26, i64 0, i32 2
  %29 = load i32, i32* %28, align 4
  %.not74 = icmp slt i32 %25, %29
  br i1 %.not74, label %boundsCheckElse15, label %boundsCheckThen14

boundsCheckThen14:                                ; preds = %negativeLenCont11
  %30 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 17, i32 %25, i32 %29)
  call void @exit(i32 -1)
  br label %boundsCheckElse15

boundsCheckElse15:                                ; preds = %boundsCheckThen14, %negativeLenCont11
  %31 = sext i32 %25 to i64
  %32 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr13, i64 %31, i32 1
  %baseArrPtr16 = load %i32arr*, %i32arr** %32, align 8
  %33 = load i32, i32* %i, align 4
  %34 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %35 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %34, i64 0, i32 1
  %baseArrPtr17 = load %i32arrarr*, %i32arrarr** %35, align 8
  %36 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %34, i64 0, i32 2
  %37 = load i32, i32* %36, align 4
  %.not75 = icmp slt i32 %33, %37
  br i1 %.not75, label %boundsCheckElse19, label %boundsCheckThen18

boundsCheckThen18:                                ; preds = %boundsCheckElse15
  %38 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 17, i32 %33, i32 %37)
  call void @exit(i32 -1)
  br label %boundsCheckElse19

boundsCheckElse19:                                ; preds = %boundsCheckThen18, %boundsCheckElse15
  %39 = sext i32 %33 to i64
  %40 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr17, i64 %39, i32 2
  %41 = load i32, i32* %40, align 4
  %.not76 = icmp slt i32 %24, %41
  br i1 %.not76, label %boundsCheckElse21, label %boundsCheckThen20

boundsCheckThen20:                                ; preds = %boundsCheckElse19
  %42 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 17, i32 %24, i32 %41)
  call void @exit(i32 -1)
  br label %boundsCheckElse21

boundsCheckElse21:                                ; preds = %boundsCheckThen20, %boundsCheckElse19
  %43 = sext i32 %24 to i64
  %44 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr16, i64 %43
  %loadRefTypeBeforeSave22 = load %i32arr, %i32arr* %newArrayResult12, align 8
  store %i32arr %loadRefTypeBeforeSave22, %i32arr* %44, align 8
  br label %loopcond23

loopcond23:                                       ; preds = %boundsCheckElse71, %boundsCheckElse21
  %45 = load i32, i32* %k, align 4
  %sgt24 = icmp sgt i32 %45, 0
  br i1 %sgt24, label %loop25, label %loopend

loop25:                                           ; preds = %loopcond23
  %46 = load i32, i32* %k, align 4
  %sub26 = add i32 %46, -1
  store i32 %sub26, i32* %k, align 4
  %47 = load i32, i32* %i, align 4
  %48 = load i32, i32* %col, align 4
  %mul = mul i32 %47, %48
  %49 = load i32, i32* %dep, align 4
  %50 = load i32, i32* %j, align 4
  %mul2777 = add i32 %mul, %50
  %add = mul i32 %mul2777, %49
  %51 = load i32, i32* %k, align 4
  %add29 = add i32 %add, %51
  %52 = load i32, i32* %i, align 4
  %53 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %54 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %53, i64 0, i32 1
  %baseArrPtr30 = load %i32arrarr*, %i32arrarr** %54, align 8
  %55 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %53, i64 0, i32 2
  %56 = load i32, i32* %55, align 4
  %.not78 = icmp slt i32 %52, %56
  br i1 %.not78, label %boundsCheckElse32, label %boundsCheckThen31

boundsCheckThen31:                                ; preds = %loop25
  %57 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %52, i32 %56)
  call void @exit(i32 -1)
  br label %boundsCheckElse32

boundsCheckElse32:                                ; preds = %boundsCheckThen31, %loop25
  %58 = sext i32 %52 to i64
  %59 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr30, i64 %58, i32 1
  %baseArrPtr33 = load %i32arr*, %i32arr** %59, align 8
  %60 = load i32, i32* %i, align 4
  %61 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %62 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %61, i64 0, i32 1
  %baseArrPtr34 = load %i32arrarr*, %i32arrarr** %62, align 8
  %63 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %61, i64 0, i32 2
  %64 = load i32, i32* %63, align 4
  %.not79 = icmp slt i32 %60, %64
  br i1 %.not79, label %boundsCheckElse36, label %boundsCheckThen35

boundsCheckThen35:                                ; preds = %boundsCheckElse32
  %65 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %60, i32 %64)
  call void @exit(i32 -1)
  br label %boundsCheckElse36

boundsCheckElse36:                                ; preds = %boundsCheckThen35, %boundsCheckElse32
  %66 = sext i32 %60 to i64
  %67 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr34, i64 %66, i32 2
  %68 = load i32, i32* %67, align 4
  %.not80 = icmp slt i32 %50, %68
  br i1 %.not80, label %boundsCheckElse38, label %boundsCheckThen37

boundsCheckThen37:                                ; preds = %boundsCheckElse36
  %69 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %50, i32 %68)
  call void @exit(i32 -1)
  br label %boundsCheckElse38

boundsCheckElse38:                                ; preds = %boundsCheckThen37, %boundsCheckElse36
  %70 = sext i32 %50 to i64
  %71 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr33, i64 %70, i32 1
  %baseArrPtr39 = load i32*, i32** %71, align 8
  %72 = load i32, i32* %j, align 4
  %73 = load i32, i32* %i, align 4
  %74 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %75 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %74, i64 0, i32 1
  %baseArrPtr40 = load %i32arrarr*, %i32arrarr** %75, align 8
  %76 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %74, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %.not81 = icmp slt i32 %73, %77
  br i1 %.not81, label %boundsCheckElse42, label %boundsCheckThen41

boundsCheckThen41:                                ; preds = %boundsCheckElse38
  %78 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %73, i32 %77)
  call void @exit(i32 -1)
  br label %boundsCheckElse42

boundsCheckElse42:                                ; preds = %boundsCheckThen41, %boundsCheckElse38
  %79 = sext i32 %73 to i64
  %80 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr40, i64 %79, i32 1
  %baseArrPtr43 = load %i32arr*, %i32arr** %80, align 8
  %81 = load i32, i32* %i, align 4
  %82 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %83 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %82, i64 0, i32 1
  %baseArrPtr44 = load %i32arrarr*, %i32arrarr** %83, align 8
  %84 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %82, i64 0, i32 2
  %85 = load i32, i32* %84, align 4
  %.not82 = icmp slt i32 %81, %85
  br i1 %.not82, label %boundsCheckElse46, label %boundsCheckThen45

boundsCheckThen45:                                ; preds = %boundsCheckElse42
  %86 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %81, i32 %85)
  call void @exit(i32 -1)
  br label %boundsCheckElse46

boundsCheckElse46:                                ; preds = %boundsCheckThen45, %boundsCheckElse42
  %87 = sext i32 %81 to i64
  %88 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr44, i64 %87, i32 2
  %89 = load i32, i32* %88, align 4
  %.not83 = icmp slt i32 %72, %89
  br i1 %.not83, label %boundsCheckElse48, label %boundsCheckThen47

boundsCheckThen47:                                ; preds = %boundsCheckElse46
  %90 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %72, i32 %89)
  call void @exit(i32 -1)
  br label %boundsCheckElse48

boundsCheckElse48:                                ; preds = %boundsCheckThen47, %boundsCheckElse46
  %91 = sext i32 %72 to i64
  %92 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr43, i64 %91, i32 2
  %93 = load i32, i32* %92, align 4
  %.not84 = icmp slt i32 %51, %93
  br i1 %.not84, label %boundsCheckElse50, label %boundsCheckThen49

boundsCheckThen49:                                ; preds = %boundsCheckElse48
  %94 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %51, i32 %93)
  call void @exit(i32 -1)
  br label %boundsCheckElse50

boundsCheckElse50:                                ; preds = %boundsCheckThen49, %boundsCheckElse48
  %95 = sext i32 %51 to i64
  %96 = getelementptr inbounds i32, i32* %baseArrPtr39, i64 %95
  store i32 %add29, i32* %96, align 4
  %97 = load i32, i32* %k, align 4
  %98 = load i32, i32* %j, align 4
  %99 = load i32, i32* %i, align 4
  %100 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %101 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %100, i64 0, i32 1
  %baseArrPtr51 = load %i32arrarr*, %i32arrarr** %101, align 8
  %102 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %100, i64 0, i32 2
  %103 = load i32, i32* %102, align 4
  %.not85 = icmp slt i32 %99, %103
  br i1 %.not85, label %boundsCheckElse53, label %boundsCheckThen52

boundsCheckThen52:                                ; preds = %boundsCheckElse50
  %104 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %99, i32 %103)
  call void @exit(i32 -1)
  br label %boundsCheckElse53

boundsCheckElse53:                                ; preds = %boundsCheckThen52, %boundsCheckElse50
  %105 = sext i32 %99 to i64
  %106 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr51, i64 %105, i32 1
  %baseArrPtr54 = load %i32arr*, %i32arr** %106, align 8
  %107 = load i32, i32* %i, align 4
  %108 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %109 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %108, i64 0, i32 1
  %baseArrPtr55 = load %i32arrarr*, %i32arrarr** %109, align 8
  %110 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %108, i64 0, i32 2
  %111 = load i32, i32* %110, align 4
  %.not86 = icmp slt i32 %107, %111
  br i1 %.not86, label %boundsCheckElse57, label %boundsCheckThen56

boundsCheckThen56:                                ; preds = %boundsCheckElse53
  %112 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %107, i32 %111)
  call void @exit(i32 -1)
  br label %boundsCheckElse57

boundsCheckElse57:                                ; preds = %boundsCheckThen56, %boundsCheckElse53
  %113 = sext i32 %107 to i64
  %114 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr55, i64 %113, i32 2
  %115 = load i32, i32* %114, align 4
  %.not87 = icmp slt i32 %98, %115
  br i1 %.not87, label %boundsCheckElse59, label %boundsCheckThen58

boundsCheckThen58:                                ; preds = %boundsCheckElse57
  %116 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %98, i32 %115)
  call void @exit(i32 -1)
  br label %boundsCheckElse59

boundsCheckElse59:                                ; preds = %boundsCheckThen58, %boundsCheckElse57
  %117 = sext i32 %98 to i64
  %118 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr54, i64 %117, i32 1
  %baseArrPtr60 = load i32*, i32** %118, align 8
  %119 = load i32, i32* %j, align 4
  %120 = load i32, i32* %i, align 4
  %121 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %122 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %121, i64 0, i32 1
  %baseArrPtr61 = load %i32arrarr*, %i32arrarr** %122, align 8
  %123 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %121, i64 0, i32 2
  %124 = load i32, i32* %123, align 4
  %.not88 = icmp slt i32 %120, %124
  br i1 %.not88, label %boundsCheckElse63, label %boundsCheckThen62

boundsCheckThen62:                                ; preds = %boundsCheckElse59
  %125 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %120, i32 %124)
  call void @exit(i32 -1)
  br label %boundsCheckElse63

boundsCheckElse63:                                ; preds = %boundsCheckThen62, %boundsCheckElse59
  %126 = sext i32 %120 to i64
  %127 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr61, i64 %126, i32 1
  %baseArrPtr64 = load %i32arr*, %i32arr** %127, align 8
  %128 = load i32, i32* %i, align 4
  %129 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %130 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %129, i64 0, i32 1
  %baseArrPtr65 = load %i32arrarr*, %i32arrarr** %130, align 8
  %131 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %129, i64 0, i32 2
  %132 = load i32, i32* %131, align 4
  %.not89 = icmp slt i32 %128, %132
  br i1 %.not89, label %boundsCheckElse67, label %boundsCheckThen66

boundsCheckThen66:                                ; preds = %boundsCheckElse63
  %133 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %128, i32 %132)
  call void @exit(i32 -1)
  br label %boundsCheckElse67

boundsCheckElse67:                                ; preds = %boundsCheckThen66, %boundsCheckElse63
  %134 = sext i32 %128 to i64
  %135 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr65, i64 %134, i32 2
  %136 = load i32, i32* %135, align 4
  %.not90 = icmp slt i32 %119, %136
  br i1 %.not90, label %boundsCheckElse69, label %boundsCheckThen68

boundsCheckThen68:                                ; preds = %boundsCheckElse67
  %137 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %119, i32 %136)
  call void @exit(i32 -1)
  br label %boundsCheckElse69

boundsCheckElse69:                                ; preds = %boundsCheckThen68, %boundsCheckElse67
  %138 = sext i32 %119 to i64
  %139 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr64, i64 %138, i32 2
  %140 = load i32, i32* %139, align 4
  %.not91 = icmp slt i32 %97, %140
  br i1 %.not91, label %boundsCheckElse71, label %boundsCheckThen70

boundsCheckThen70:                                ; preds = %boundsCheckElse69
  %141 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %97, i32 %140)
  call void @exit(i32 -1)
  br label %boundsCheckElse71

boundsCheckElse71:                                ; preds = %boundsCheckThen70, %boundsCheckElse69
  %142 = sext i32 %97 to i64
  %143 = getelementptr inbounds i32, i32* %baseArrPtr60, i64 %142
  %144 = load i32, i32* %143, align 4
  %145 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %144)
  br label %loopcond23

loopend:                                          ; preds = %loopcond23
  br label %loopcond6

loopend72:                                        ; preds = %loopcond6
  br label %loopcond

loopend73:                                        ; preds = %loopcond
  ret i32 0
}
