; ModuleID = 'Module'
source_filename = "Module"
target triple = "x86_64-pc-linux-gnu"

%Object_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arr_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arrarr_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arrarrarr_Vtable_type = type { %Object_Vtable_type*, i8* }
%Object = type { %Object_Vtable_type* }
%i32arr = type { %i32arr_Vtable_type*, i32*, i32 }
%i32arrarr = type { %i32arrarr_Vtable_type*, %i32arr*, i32 }
%i32arrarrarr = type { %i32arrarrarr_Vtable_type*, %i32arrarr*, i32 }

@printIntFormat = private constant [4 x i8] c"%d\0A\00", align 1
@castErrFormat = private constant [38 x i8] c"Narrow cast err: %s is not a type %s\0A\00", align 1
@outOfBoundsFormat = private constant [64 x i8] c"Array out of bounds exception at line %d. Index:%d | Length:%d\0A\00", align 1
@Object_class_name = private constant [7 x i8] c"Object\00", align 1
@Object_Vtable = global %Object_Vtable_type { %Object_Vtable_type* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @Object_class_name, i32 0, i32 0) }
@i32arr_class_name = private constant [7 x i8] c"i32arr\00", align 1
@i32arr_Vtable = global %i32arr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @i32arr_class_name, i32 0, i32 0) }
@i32arrarr_class_name = private constant [10 x i8] c"i32arrarr\00", align 1
@i32arrarr_Vtable = global %i32arrarr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @i32arrarr_class_name, i32 0, i32 0) }
@i32arrarrarr_class_name = private constant [13 x i8] c"i32arrarrarr\00", align 1
@i32arrarrarr_Vtable = global %i32arrarrarr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @i32arrarrarr_class_name, i32 0, i32 0) }

declare i32 @printf(i8*, ...)

declare i8* @malloc(i32)

declare i8* @calloc(i32, i32)

declare void @free(i8*)

declare void @exit(i32)

define i1 @Object_IsA(%Object* %0, %Object_Vtable_type* %1, i8* %2) {
entry:
  %object = alloca %Object*, align 8
  store %Object* %0, %Object** %object, align 8
  %vtbl = alloca %Object_Vtable_type*, align 8
  store %Object_Vtable_type* %1, %Object_Vtable_type** %vtbl, align 8
  %name = alloca i8*, align 8
  store i8* %2, i8** %name, align 8
  %3 = load %Object*, %Object** %object, align 8
  %4 = ptrtoint %Object* %3 to i64
  %equal = icmp eq i64 %4, 0
  %not = xor i1 %equal, true
  br i1 %not, label %then, label %else7

then:                                             ; preds = %entry
  %5 = load %Object*, %Object** %object, align 8
  %6 = getelementptr inbounds %Object, %Object* %5, i32 0, i32 0
  %7 = load %Object_Vtable_type*, %Object_Vtable_type** %6, align 8
  store %Object_Vtable_type* %7, %Object_Vtable_type** %vtbl, align 8
  br label %loopcond

loopcond:                                         ; preds = %ifcont, %then
  %8 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %9 = ptrtoint %Object_Vtable_type* %8 to i64
  %equal1 = icmp eq i64 %9, 0
  %not2 = xor i1 %equal1, true
  br i1 %not2, label %loop, label %loopend

loop:                                             ; preds = %loopcond
  %10 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %11 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %10, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = load i8*, i8** %name, align 8
  %14 = ptrtoint i8* %12 to i64
  %15 = ptrtoint i8* %13 to i64
  %equal3 = icmp eq i64 %14, %15
  br i1 %equal3, label %then4, label %else

then4:                                            ; preds = %loop
  br label %loopend

else:                                             ; preds = %loop
  %16 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %17 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %16, i32 0, i32 0
  %18 = load %Object_Vtable_type*, %Object_Vtable_type** %17, align 8
  store %Object_Vtable_type* %18, %Object_Vtable_type** %vtbl, align 8
  br label %ifcont

ifcont:                                           ; preds = %else
  br label %loopcond

loopend:                                          ; preds = %then4, %loopcond
  %19 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %20 = ptrtoint %Object_Vtable_type* %19 to i64
  %equal5 = icmp eq i64 %20, 0
  %not6 = xor i1 %equal5, true
  br label %ifcont8

else7:                                            ; preds = %entry
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %loopend
  %iftmp = phi i1 [ %not6, %loopend ], [ false, %else7 ]
  ret i1 %iftmp
}

define void @i32arr_Constructor(%i32arr* %0, %i32arr_Vtable_type* %1, i32* %2, i32 %3) {
entry:
  %this = alloca %i32arr*, align 8
  store %i32arr* %0, %i32arr** %this, align 8
  %vtable = alloca %i32arr_Vtable_type*, align 8
  store %i32arr_Vtable_type* %1, %i32arr_Vtable_type** %vtable, align 8
  %data = alloca i32*, align 8
  store i32* %2, i32** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arr_Vtable_type*, %i32arr_Vtable_type** %vtable, align 8
  %5 = load %i32arr*, %i32arr** %this, align 8
  %6 = getelementptr inbounds %i32arr, %i32arr* %5, i32 0, i32 0
  store %i32arr_Vtable_type* %4, %i32arr_Vtable_type** %6, align 8
  %7 = load i32*, i32** %data, align 8
  %8 = load %i32arr*, %i32arr** %this, align 8
  %9 = getelementptr inbounds %i32arr, %i32arr* %8, i32 0, i32 1
  store i32* %7, i32** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arr*, %i32arr** %this, align 8
  %12 = getelementptr inbounds %i32arr, %i32arr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define void @i32arrarr_Constructor(%i32arrarr* %0, %i32arrarr_Vtable_type* %1, %i32arr* %2, i32 %3) {
entry:
  %this = alloca %i32arrarr*, align 8
  store %i32arrarr* %0, %i32arrarr** %this, align 8
  %vtable = alloca %i32arrarr_Vtable_type*, align 8
  store %i32arrarr_Vtable_type* %1, %i32arrarr_Vtable_type** %vtable, align 8
  %data = alloca %i32arr*, align 8
  store %i32arr* %2, %i32arr** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arrarr_Vtable_type*, %i32arrarr_Vtable_type** %vtable, align 8
  %5 = load %i32arrarr*, %i32arrarr** %this, align 8
  %6 = getelementptr inbounds %i32arrarr, %i32arrarr* %5, i32 0, i32 0
  store %i32arrarr_Vtable_type* %4, %i32arrarr_Vtable_type** %6, align 8
  %7 = load %i32arr*, %i32arr** %data, align 8
  %8 = load %i32arrarr*, %i32arrarr** %this, align 8
  %9 = getelementptr inbounds %i32arrarr, %i32arrarr* %8, i32 0, i32 1
  store %i32arr* %7, %i32arr** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arrarr*, %i32arrarr** %this, align 8
  %12 = getelementptr inbounds %i32arrarr, %i32arrarr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define void @i32arrarrarr_Constructor(%i32arrarrarr* %0, %i32arrarrarr_Vtable_type* %1, %i32arrarr* %2, i32 %3) {
entry:
  %this = alloca %i32arrarrarr*, align 8
  store %i32arrarrarr* %0, %i32arrarrarr** %this, align 8
  %vtable = alloca %i32arrarrarr_Vtable_type*, align 8
  store %i32arrarrarr_Vtable_type* %1, %i32arrarrarr_Vtable_type** %vtable, align 8
  %data = alloca %i32arrarr*, align 8
  store %i32arrarr* %2, %i32arrarr** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arrarrarr_Vtable_type*, %i32arrarrarr_Vtable_type** %vtable, align 8
  %5 = load %i32arrarrarr*, %i32arrarrarr** %this, align 8
  %6 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %5, i32 0, i32 0
  store %i32arrarrarr_Vtable_type* %4, %i32arrarrarr_Vtable_type** %6, align 8
  %7 = load %i32arrarr*, %i32arrarr** %data, align 8
  %8 = load %i32arrarrarr*, %i32arrarrarr** %this, align 8
  %9 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %8, i32 0, i32 1
  store %i32arrarr* %7, %i32arrarr** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arrarrarr*, %i32arrarrarr** %this, align 8
  %12 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define i32 @main() {
entry:
  %dep = alloca i32, align 4
  %col = alloca i32, align 4
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca %i32arrarrarr*, align 8
  store %i32arrarrarr* null, %i32arrarrarr** %a, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %col, align 4
  store i32 0, i32* %dep, align 4
  store i32 5, i32* %i, align 4
  store i32 4, i32* %col, align 4
  store i32 3, i32* %dep, align 4
  %newArrayResult = alloca %i32arrarrarr, align 8
  %0 = call dereferenceable_or_null(120) i8* @calloc(i32 5, i32 24)
  %1 = bitcast i8* %0 to %i32arrarr*
  call void @i32arrarrarr_Constructor(%i32arrarrarr* nonnull %newArrayResult, %i32arrarrarr_Vtable_type* nonnull @i32arrarrarr_Vtable, %i32arrarr* %1, i32 5)
  store %i32arrarrarr* %newArrayResult, %i32arrarrarr** %a, align 8
  br label %loopcond

loopcond:                                         ; preds = %loopend84, %entry
  %2 = load i32, i32* %i, align 4
  %sgt = icmp sgt i32 %2, 0
  br i1 %sgt, label %loop, label %loopend85

loop:                                             ; preds = %loopcond
  %3 = load i32, i32* %i, align 4
  %sub = add i32 %3, -1
  store i32 %sub, i32* %i, align 4
  %4 = load i32, i32* %col, align 4
  store i32 %4, i32* %j, align 4
  %newArrayResult1 = alloca %i32arrarr, align 8
  %5 = call i8* @calloc(i32 %4, i32 24)
  %6 = bitcast i8* %5 to %i32arr*
  call void @i32arrarr_Constructor(%i32arrarr* nonnull %newArrayResult1, %i32arrarr_Vtable_type* nonnull @i32arrarr_Vtable, %i32arr* %6, i32 %4)
  %7 = load i32, i32* %i, align 4
  %8 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %9 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %8, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp slt i32 %7, %10
  br i1 %11, label %boundsCheckThen2, label %boundsCheckElse

boundsCheckThen2:                                 ; preds = %loop
  %12 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %13 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %12, i64 0, i32 1
  %baseArrPtr = load %i32arrarr*, %i32arrarr** %13, align 8
  %14 = sext i32 %7 to i64
  %15 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr, i64 %14
  br label %boundsCheckIfcont

boundsCheckElse:                                  ; preds = %loop
  %16 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 13, i32 %7, i32 %10)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont

boundsCheckIfcont:                                ; preds = %boundsCheckElse, %boundsCheckThen2
  %loadRefTypeBeforeSave = load %i32arrarr, %i32arrarr* %newArrayResult1, align 8
  store %i32arrarr %loadRefTypeBeforeSave, %i32arrarr* %15, align 8
  br label %loopcond3

loopcond3:                                        ; preds = %loopend, %boundsCheckIfcont
  %17 = load i32, i32* %j, align 4
  %sgt4 = icmp sgt i32 %17, 0
  br i1 %sgt4, label %loop5, label %loopend84

loop5:                                            ; preds = %loopcond3
  %18 = load i32, i32* %j, align 4
  %sub6 = add i32 %18, -1
  store i32 %sub6, i32* %j, align 4
  %19 = load i32, i32* %dep, align 4
  store i32 %19, i32* %k, align 4
  %newArrayResult7 = alloca %i32arr, align 8
  %20 = call i8* @calloc(i32 %19, i32 4)
  %21 = bitcast i8* %20 to i32*
  call void @i32arr_Constructor(%i32arr* nonnull %newArrayResult7, %i32arr_Vtable_type* nonnull @i32arr_Vtable, i32* %21, i32 %19)
  %22 = load i32, i32* %j, align 4
  %23 = load i32, i32* %i, align 4
  %24 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %25 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %24, i64 0, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %23, %26
  br i1 %27, label %boundsCheckThen9, label %boundsCheckElse10

boundsCheckThen9:                                 ; preds = %loop5
  %28 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %29 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %28, i64 0, i32 1
  %baseArrPtr8 = load %i32arrarr*, %i32arrarr** %29, align 8
  %30 = sext i32 %23 to i64
  br label %boundsCheckIfcont11

boundsCheckElse10:                                ; preds = %loop5
  %31 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 17, i32 %23, i32 %26)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont11

boundsCheckIfcont11:                              ; preds = %boundsCheckElse10, %boundsCheckThen9
  %32 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr8, i64 %30, i32 1
  %baseArrPtr12 = load %i32arr*, %i32arr** %32, align 8
  %33 = load i32, i32* %i, align 4
  %34 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %35 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %34, i64 0, i32 2
  %36 = load i32, i32* %35, align 4
  %37 = icmp slt i32 %33, %36
  br i1 %37, label %boundsCheckThen14, label %boundsCheckElse15

boundsCheckThen14:                                ; preds = %boundsCheckIfcont11
  %38 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %39 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %38, i64 0, i32 1
  %baseArrPtr13 = load %i32arrarr*, %i32arrarr** %39, align 8
  %40 = sext i32 %33 to i64
  br label %boundsCheckIfcont16

boundsCheckElse15:                                ; preds = %boundsCheckIfcont11
  %41 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 17, i32 %33, i32 %36)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont16

boundsCheckIfcont16:                              ; preds = %boundsCheckElse15, %boundsCheckThen14
  %42 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr13, i64 %40, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = icmp slt i32 %22, %43
  br i1 %44, label %boundsCheckThen17, label %boundsCheckElse18

boundsCheckThen17:                                ; preds = %boundsCheckIfcont16
  %45 = sext i32 %22 to i64
  %46 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr12, i64 %45
  br label %boundsCheckIfcont19

boundsCheckElse18:                                ; preds = %boundsCheckIfcont16
  %47 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 17, i32 %22, i32 %43)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont19

boundsCheckIfcont19:                              ; preds = %boundsCheckElse18, %boundsCheckThen17
  %loadRefTypeBeforeSave20 = load %i32arr, %i32arr* %newArrayResult7, align 8
  store %i32arr %loadRefTypeBeforeSave20, %i32arr* %46, align 8
  br label %loopcond21

loopcond21:                                       ; preds = %boundsCheckIfcont83, %boundsCheckIfcont19
  %48 = load i32, i32* %k, align 4
  %sgt22 = icmp sgt i32 %48, 0
  br i1 %sgt22, label %loop23, label %loopend

loop23:                                           ; preds = %loopcond21
  %49 = load i32, i32* %k, align 4
  %sub24 = add i32 %49, -1
  store i32 %sub24, i32* %k, align 4
  %50 = load i32, i32* %i, align 4
  %51 = load i32, i32* %col, align 4
  %mul = mul i32 %50, %51
  %52 = load i32, i32* %dep, align 4
  %53 = load i32, i32* %j, align 4
  %mul2586 = add i32 %mul, %53
  %add = mul i32 %mul2586, %52
  %54 = load i32, i32* %k, align 4
  %add27 = add i32 %add, %54
  %55 = load i32, i32* %i, align 4
  %56 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %57 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %56, i64 0, i32 2
  %58 = load i32, i32* %57, align 4
  %59 = icmp slt i32 %55, %58
  br i1 %59, label %boundsCheckThen29, label %boundsCheckElse30

boundsCheckThen29:                                ; preds = %loop23
  %60 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %61 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %60, i64 0, i32 1
  %baseArrPtr28 = load %i32arrarr*, %i32arrarr** %61, align 8
  %62 = sext i32 %55 to i64
  br label %boundsCheckIfcont31

boundsCheckElse30:                                ; preds = %loop23
  %63 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %55, i32 %58)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont31

boundsCheckIfcont31:                              ; preds = %boundsCheckElse30, %boundsCheckThen29
  %64 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr28, i64 %62, i32 1
  %baseArrPtr32 = load %i32arr*, %i32arr** %64, align 8
  %65 = load i32, i32* %i, align 4
  %66 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %67 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %66, i64 0, i32 2
  %68 = load i32, i32* %67, align 4
  %69 = icmp slt i32 %65, %68
  br i1 %69, label %boundsCheckThen34, label %boundsCheckElse35

boundsCheckThen34:                                ; preds = %boundsCheckIfcont31
  %70 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %71 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %70, i64 0, i32 1
  %baseArrPtr33 = load %i32arrarr*, %i32arrarr** %71, align 8
  %72 = sext i32 %65 to i64
  br label %boundsCheckIfcont36

boundsCheckElse35:                                ; preds = %boundsCheckIfcont31
  %73 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %65, i32 %68)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont36

boundsCheckIfcont36:                              ; preds = %boundsCheckElse35, %boundsCheckThen34
  %74 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr33, i64 %72, i32 2
  %75 = load i32, i32* %74, align 4
  %76 = icmp slt i32 %53, %75
  br i1 %76, label %boundsCheckThen37, label %boundsCheckElse38

boundsCheckThen37:                                ; preds = %boundsCheckIfcont36
  %77 = sext i32 %53 to i64
  br label %boundsCheckIfcont39

boundsCheckElse38:                                ; preds = %boundsCheckIfcont36
  %78 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %53, i32 %75)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont39

boundsCheckIfcont39:                              ; preds = %boundsCheckElse38, %boundsCheckThen37
  %79 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr32, i64 %77, i32 1
  %baseArrPtr40 = load i32*, i32** %79, align 8
  %80 = load i32, i32* %j, align 4
  %81 = load i32, i32* %i, align 4
  %82 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %83 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %82, i64 0, i32 2
  %84 = load i32, i32* %83, align 4
  %85 = icmp slt i32 %81, %84
  br i1 %85, label %boundsCheckThen42, label %boundsCheckElse43

boundsCheckThen42:                                ; preds = %boundsCheckIfcont39
  %86 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %87 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %86, i64 0, i32 1
  %baseArrPtr41 = load %i32arrarr*, %i32arrarr** %87, align 8
  %88 = sext i32 %81 to i64
  br label %boundsCheckIfcont44

boundsCheckElse43:                                ; preds = %boundsCheckIfcont39
  %89 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %81, i32 %84)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont44

boundsCheckIfcont44:                              ; preds = %boundsCheckElse43, %boundsCheckThen42
  %90 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr41, i64 %88, i32 1
  %baseArrPtr45 = load %i32arr*, %i32arr** %90, align 8
  %91 = load i32, i32* %i, align 4
  %92 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %93 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %92, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp slt i32 %91, %94
  br i1 %95, label %boundsCheckThen47, label %boundsCheckElse48

boundsCheckThen47:                                ; preds = %boundsCheckIfcont44
  %96 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %97 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %96, i64 0, i32 1
  %baseArrPtr46 = load %i32arrarr*, %i32arrarr** %97, align 8
  %98 = sext i32 %91 to i64
  br label %boundsCheckIfcont49

boundsCheckElse48:                                ; preds = %boundsCheckIfcont44
  %99 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %91, i32 %94)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont49

boundsCheckIfcont49:                              ; preds = %boundsCheckElse48, %boundsCheckThen47
  %100 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr46, i64 %98, i32 2
  %101 = load i32, i32* %100, align 4
  %102 = icmp slt i32 %80, %101
  br i1 %102, label %boundsCheckThen50, label %boundsCheckElse51

boundsCheckThen50:                                ; preds = %boundsCheckIfcont49
  %103 = sext i32 %80 to i64
  br label %boundsCheckIfcont52

boundsCheckElse51:                                ; preds = %boundsCheckIfcont49
  %104 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %80, i32 %101)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont52

boundsCheckIfcont52:                              ; preds = %boundsCheckElse51, %boundsCheckThen50
  %105 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr45, i64 %103, i32 2
  %106 = load i32, i32* %105, align 4
  %107 = icmp slt i32 %54, %106
  br i1 %107, label %boundsCheckThen53, label %boundsCheckElse54

boundsCheckThen53:                                ; preds = %boundsCheckIfcont52
  %108 = sext i32 %54 to i64
  %109 = getelementptr inbounds i32, i32* %baseArrPtr40, i64 %108
  br label %boundsCheckIfcont55

boundsCheckElse54:                                ; preds = %boundsCheckIfcont52
  %110 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 20, i32 %54, i32 %106)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont55

boundsCheckIfcont55:                              ; preds = %boundsCheckElse54, %boundsCheckThen53
  store i32 %add27, i32* %109, align 4
  %111 = load i32, i32* %k, align 4
  %112 = load i32, i32* %j, align 4
  %113 = load i32, i32* %i, align 4
  %114 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %115 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %114, i64 0, i32 2
  %116 = load i32, i32* %115, align 4
  %117 = icmp slt i32 %113, %116
  br i1 %117, label %boundsCheckThen57, label %boundsCheckElse58

boundsCheckThen57:                                ; preds = %boundsCheckIfcont55
  %118 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %119 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %118, i64 0, i32 1
  %baseArrPtr56 = load %i32arrarr*, %i32arrarr** %119, align 8
  %120 = sext i32 %113 to i64
  br label %boundsCheckIfcont59

boundsCheckElse58:                                ; preds = %boundsCheckIfcont55
  %121 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %113, i32 %116)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont59

boundsCheckIfcont59:                              ; preds = %boundsCheckElse58, %boundsCheckThen57
  %122 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr56, i64 %120, i32 1
  %baseArrPtr60 = load %i32arr*, %i32arr** %122, align 8
  %123 = load i32, i32* %i, align 4
  %124 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %125 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %124, i64 0, i32 2
  %126 = load i32, i32* %125, align 4
  %127 = icmp slt i32 %123, %126
  br i1 %127, label %boundsCheckThen62, label %boundsCheckElse63

boundsCheckThen62:                                ; preds = %boundsCheckIfcont59
  %128 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %129 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %128, i64 0, i32 1
  %baseArrPtr61 = load %i32arrarr*, %i32arrarr** %129, align 8
  %130 = sext i32 %123 to i64
  br label %boundsCheckIfcont64

boundsCheckElse63:                                ; preds = %boundsCheckIfcont59
  %131 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %123, i32 %126)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont64

boundsCheckIfcont64:                              ; preds = %boundsCheckElse63, %boundsCheckThen62
  %132 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr61, i64 %130, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp slt i32 %112, %133
  br i1 %134, label %boundsCheckThen65, label %boundsCheckElse66

boundsCheckThen65:                                ; preds = %boundsCheckIfcont64
  %135 = sext i32 %112 to i64
  br label %boundsCheckIfcont67

boundsCheckElse66:                                ; preds = %boundsCheckIfcont64
  %136 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %112, i32 %133)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont67

boundsCheckIfcont67:                              ; preds = %boundsCheckElse66, %boundsCheckThen65
  %137 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr60, i64 %135, i32 1
  %baseArrPtr68 = load i32*, i32** %137, align 8
  %138 = load i32, i32* %j, align 4
  %139 = load i32, i32* %i, align 4
  %140 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %141 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %140, i64 0, i32 2
  %142 = load i32, i32* %141, align 4
  %143 = icmp slt i32 %139, %142
  br i1 %143, label %boundsCheckThen70, label %boundsCheckElse71

boundsCheckThen70:                                ; preds = %boundsCheckIfcont67
  %144 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %145 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %144, i64 0, i32 1
  %baseArrPtr69 = load %i32arrarr*, %i32arrarr** %145, align 8
  %146 = sext i32 %139 to i64
  br label %boundsCheckIfcont72

boundsCheckElse71:                                ; preds = %boundsCheckIfcont67
  %147 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %139, i32 %142)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont72

boundsCheckIfcont72:                              ; preds = %boundsCheckElse71, %boundsCheckThen70
  %148 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr69, i64 %146, i32 1
  %baseArrPtr73 = load %i32arr*, %i32arr** %148, align 8
  %149 = load i32, i32* %i, align 4
  %150 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %151 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %150, i64 0, i32 2
  %152 = load i32, i32* %151, align 4
  %153 = icmp slt i32 %149, %152
  br i1 %153, label %boundsCheckThen75, label %boundsCheckElse76

boundsCheckThen75:                                ; preds = %boundsCheckIfcont72
  %154 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %155 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %154, i64 0, i32 1
  %baseArrPtr74 = load %i32arrarr*, %i32arrarr** %155, align 8
  %156 = sext i32 %149 to i64
  br label %boundsCheckIfcont77

boundsCheckElse76:                                ; preds = %boundsCheckIfcont72
  %157 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %149, i32 %152)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont77

boundsCheckIfcont77:                              ; preds = %boundsCheckElse76, %boundsCheckThen75
  %158 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr74, i64 %156, i32 2
  %159 = load i32, i32* %158, align 4
  %160 = icmp slt i32 %138, %159
  br i1 %160, label %boundsCheckThen78, label %boundsCheckElse79

boundsCheckThen78:                                ; preds = %boundsCheckIfcont77
  %161 = sext i32 %138 to i64
  br label %boundsCheckIfcont80

boundsCheckElse79:                                ; preds = %boundsCheckIfcont77
  %162 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %138, i32 %159)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont80

boundsCheckIfcont80:                              ; preds = %boundsCheckElse79, %boundsCheckThen78
  %163 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr73, i64 %161, i32 2
  %164 = load i32, i32* %163, align 4
  %165 = icmp slt i32 %111, %164
  br i1 %165, label %boundsCheckThen81, label %boundsCheckElse82

boundsCheckThen81:                                ; preds = %boundsCheckIfcont80
  %166 = sext i32 %111 to i64
  %167 = getelementptr inbounds i32, i32* %baseArrPtr68, i64 %166
  br label %boundsCheckIfcont83

boundsCheckElse82:                                ; preds = %boundsCheckIfcont80
  %168 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 21, i32 %111, i32 %164)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont83

boundsCheckIfcont83:                              ; preds = %boundsCheckElse82, %boundsCheckThen81
  %169 = load i32, i32* %167, align 4
  %170 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %169)
  br label %loopcond21

loopend:                                          ; preds = %loopcond21
  br label %loopcond3

loopend84:                                        ; preds = %loopcond3
  br label %loopcond

loopend85:                                        ; preds = %loopcond
  ret i32 0
}
