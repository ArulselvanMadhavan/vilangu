; ModuleID = 'Module'
source_filename = "Module"
target triple = "x86_64-pc-linux-gnu"

%Object_Vtable_type = type { %Object_Vtable_type*, i8* }
%Langarr_Vtable_type = type { %Object_Vtable_type*, i8* }
%French_Vtable_type = type { %Lang_Vtable_type*, i8* }
%Lang_Vtable_type = type { %Object_Vtable_type*, i8* }
%English_Vtable_type = type { %Lang_Vtable_type*, i8* }
%Object = type { %Object_Vtable_type* }
%Langarr = type { %Langarr_Vtable_type*, %Lang**, i32 }
%Lang = type { %Lang_Vtable_type*, i32 }
%French = type { %French_Vtable_type*, i32, %Langarr* }
%English = type { %English_Vtable_type*, i32, %Lang* }

@printIntFormat = private constant [4 x i8] c"%d\0A\00", align 1
@castErrFormat = private constant [52 x i8] c"Line no: %d | Narrow cast err: %s is not a type %s\0A\00", align 1
@outOfBoundsFormat = private constant [72 x i8] c"Line: %d | Array out of bounds exception at line. Index:%d | Length:%d\0A\00", align 1
@negativeLenFormat = private constant [62 x i8] c"Line: %d | Array len cannot be negative. Length attempted:%d\0A\00", align 1
@nullDerefFormat = private constant [29 x i8] c"Line: %d | Null dereference\0A\00", align 1
@divByZeroFormat = private constant [37 x i8] c"Line: %d | Divide by zero exception\0A\00", align 1
@Object_class_name = private constant [7 x i8] c"Object\00", align 1
@Object_Vtable = global %Object_Vtable_type { %Object_Vtable_type* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @Object_class_name, i32 0, i32 0) }
@Langarr_class_name = private constant [8 x i8] c"Langarr\00", align 1
@Langarr_Vtable = global %Langarr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @Langarr_class_name, i32 0, i32 0) }
@French_class_name = private constant [7 x i8] c"French\00", align 1
@French_Vtable = global %French_Vtable_type { %Lang_Vtable_type* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @French_class_name, i32 0, i32 0) }
@English_class_name = private constant [8 x i8] c"English\00", align 1
@English_Vtable = global %English_Vtable_type { %Lang_Vtable_type* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @English_class_name, i32 0, i32 0) }
@Lang_class_name = private constant [5 x i8] c"Lang\00", align 1
@Lang_Vtable = global %Lang_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @Lang_class_name, i32 0, i32 0) }

declare i32 @printf(i8*, ...)

declare i8* @malloc(i32)

declare i8* @calloc(i32, i32)

declare void @free(i8*)

declare void @exit(i32)

define i1 @Object_IsA(%Object* %0, %Object_Vtable_type* %1, i8* %2) {
entry:
  %object = alloca %Object*, align 8
  store %Object* %0, %Object** %object, align 8
  %vtbl = alloca %Object_Vtable_type*, align 8
  store %Object_Vtable_type* %1, %Object_Vtable_type** %vtbl, align 8
  %name = alloca i8*, align 8
  store i8* %2, i8** %name, align 8
  %3 = load %Object*, %Object** %object, align 8
  %4 = ptrtoint %Object* %3 to i64
  %equal = icmp eq i64 %4, 0
  %not = xor i1 %equal, true
  br i1 %not, label %then, label %else12

then:                                             ; preds = %entry
  %5 = load %Object*, %Object** %object, align 8
  %6 = icmp eq %Object* %5, null
  br i1 %6, label %nullDerefThen1, label %nullDerefElse

nullDerefThen1:                                   ; preds = %then
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 0)
  call void @exit(i32 -1)
  br label %nullDerefElse

nullDerefElse:                                    ; preds = %nullDerefThen1, %then
  %8 = getelementptr inbounds %Object, %Object* %5, i32 0, i32 0
  %9 = load %Object_Vtable_type*, %Object_Vtable_type** %8, align 8
  store %Object_Vtable_type* %9, %Object_Vtable_type** %vtbl, align 8
  br label %loopcond

loopcond:                                         ; preds = %ifcont, %nullDerefElse
  %10 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %11 = ptrtoint %Object_Vtable_type* %10 to i64
  %equal2 = icmp eq i64 %11, 0
  %not3 = xor i1 %equal2, true
  br i1 %not3, label %loop, label %loopend

loop:                                             ; preds = %loopcond
  %12 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %13 = icmp eq %Object_Vtable_type* %12, null
  br i1 %13, label %nullDerefThen4, label %nullDerefElse5

nullDerefThen4:                                   ; preds = %loop
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 0)
  call void @exit(i32 -1)
  br label %nullDerefElse5

nullDerefElse5:                                   ; preds = %nullDerefThen4, %loop
  %15 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %12, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = load i8*, i8** %name, align 8
  %18 = ptrtoint i8* %16 to i64
  %19 = ptrtoint i8* %17 to i64
  %equal6 = icmp eq i64 %18, %19
  br i1 %equal6, label %then7, label %else

then7:                                            ; preds = %nullDerefElse5
  br label %loopend

else:                                             ; preds = %nullDerefElse5
  %20 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %21 = icmp eq %Object_Vtable_type* %20, null
  br i1 %21, label %nullDerefThen8, label %nullDerefElse9

nullDerefThen8:                                   ; preds = %else
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 0)
  call void @exit(i32 -1)
  br label %nullDerefElse9

nullDerefElse9:                                   ; preds = %nullDerefThen8, %else
  %23 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %20, i32 0, i32 0
  %24 = load %Object_Vtable_type*, %Object_Vtable_type** %23, align 8
  store %Object_Vtable_type* %24, %Object_Vtable_type** %vtbl, align 8
  br label %ifcont

ifcont:                                           ; preds = %nullDerefElse9
  br label %loopcond

loopend:                                          ; preds = %then7, %loopcond
  %25 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %26 = ptrtoint %Object_Vtable_type* %25 to i64
  %equal10 = icmp eq i64 %26, 0
  %not11 = xor i1 %equal10, true
  br label %ifcont13

else12:                                           ; preds = %entry
  br label %ifcont13

ifcont13:                                         ; preds = %else12, %loopend
  %iftmp = phi i1 [ %not11, %loopend ], [ false, %else12 ]
  ret i1 %iftmp
}

define void @Object_Constructor(%Object* %0) {
entry:
  %this = alloca %Object*, align 8
  store %Object* %0, %Object** %this, align 8
  ret void
}

define void @Langarr_Constructor(%Langarr* %0, %Langarr_Vtable_type* %1, %Lang** %2, i32 %3) {
entry:
  %this = alloca %Langarr*, align 8
  store %Langarr* %0, %Langarr** %this, align 8
  %vtable = alloca %Langarr_Vtable_type*, align 8
  store %Langarr_Vtable_type* %1, %Langarr_Vtable_type** %vtable, align 8
  %data = alloca %Lang**, align 8
  store %Lang** %2, %Lang*** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %Langarr_Vtable_type*, %Langarr_Vtable_type** %vtable, align 8
  %5 = load %Langarr*, %Langarr** %this, align 8
  %6 = icmp eq %Langarr* %5, null
  br i1 %6, label %nullDerefThen1, label %nullDerefElse

nullDerefThen1:                                   ; preds = %entry
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 0)
  call void @exit(i32 -1)
  br label %nullDerefElse

nullDerefElse:                                    ; preds = %nullDerefThen1, %entry
  %8 = getelementptr inbounds %Langarr, %Langarr* %5, i32 0, i32 0
  store %Langarr_Vtable_type* %4, %Langarr_Vtable_type** %8, align 8
  %9 = load %Lang**, %Lang*** %data, align 8
  %10 = load %Langarr*, %Langarr** %this, align 8
  %11 = icmp eq %Langarr* %10, null
  br i1 %11, label %nullDerefThen2, label %nullDerefElse3

nullDerefThen2:                                   ; preds = %nullDerefElse
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 0)
  call void @exit(i32 -1)
  br label %nullDerefElse3

nullDerefElse3:                                   ; preds = %nullDerefThen2, %nullDerefElse
  %13 = getelementptr inbounds %Langarr, %Langarr* %10, i32 0, i32 1
  store %Lang** %9, %Lang*** %13, align 8
  %14 = load i32, i32* %length, align 4
  %15 = load %Langarr*, %Langarr** %this, align 8
  %16 = icmp eq %Langarr* %15, null
  br i1 %16, label %nullDerefThen4, label %nullDerefElse5

nullDerefThen4:                                   ; preds = %nullDerefElse3
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 0)
  call void @exit(i32 -1)
  br label %nullDerefElse5

nullDerefElse5:                                   ; preds = %nullDerefThen4, %nullDerefElse3
  %18 = getelementptr inbounds %Langarr, %Langarr* %15, i32 0, i32 2
  store i32 %14, i32* %18, align 4
  ret void
}

define void @French_Constructor(%French* %0) {
entry:
  %this = alloca %French*, align 8
  store %French* %0, %French** %this, align 8
  ret void
}

define void @English_Constructor(%English* %0) {
entry:
  %this = alloca %English*, align 8
  store %English* %0, %English** %this, align 8
  ret void
}

define void @Lang_Constructor(%Lang* %0) {
entry:
  %this = alloca %Lang*, align 8
  store %Lang* %0, %Lang** %this, align 8
  ret void
}

define i32 @main() {
entry:
  %l = alloca %Lang*, align 8
  %e = alloca %English*, align 8
  %f = alloca %French*, align 8
  store %French* null, %French** %f, align 8
  store %English* null, %English** %e, align 8
  store %Lang* null, %Lang** %l, align 8
  %0 = call dereferenceable_or_null(24) i8* @calloc(i32 1, i32 24)
  %1 = bitcast i8* %0 to %French*
  %2 = getelementptr inbounds %French, %French* %1, i64 0, i32 0
  store %French_Vtable_type* @French_Vtable, %French_Vtable_type** %2, align 8
  call void @French_Constructor(%French* %1)
  %3 = bitcast %French** %f to i8**
  store i8* %0, i8** %3, align 8
  br i1 false, label %negativeLenThen1, label %negativeLenCont

negativeLenThen1:                                 ; preds = %entry
  br label %negativeLenCont

negativeLenCont:                                  ; preds = %negativeLenThen1, %entry
  %newArrayResult = alloca %Langarr, align 8
  %4 = call dereferenceable_or_null(40) i8* @calloc(i32 5, i32 8)
  %5 = bitcast i8* %4 to %Lang**
  call void @Langarr_Constructor(%Langarr* nonnull %newArrayResult, %Langarr_Vtable_type* nonnull @Langarr_Vtable, %Lang** %5, i32 5)
  %6 = load %French*, %French** %f, align 8
  %7 = icmp eq %French* %6, null
  br i1 %7, label %nullDerefThen2, label %nullDerefElse

nullDerefThen2:                                   ; preds = %negativeLenCont
  %8 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 18)
  call void @exit(i32 -1)
  br label %nullDerefElse

nullDerefElse:                                    ; preds = %nullDerefThen2, %negativeLenCont
  %9 = getelementptr inbounds %French, %French* %6, i64 0, i32 2
  store %Langarr* %newArrayResult, %Langarr** %9, align 8
  %10 = call dereferenceable_or_null(24) i8* @calloc(i32 1, i32 24)
  %11 = bitcast i8* %10 to %English*
  %12 = getelementptr inbounds %English, %English* %11, i64 0, i32 0
  store %English_Vtable_type* @English_Vtable, %English_Vtable_type** %12, align 8
  call void @English_Constructor(%English* %11)
  %13 = bitcast %English** %e to i8**
  store i8* %10, i8** %13, align 8
  %14 = call dereferenceable_or_null(16) i8* @calloc(i32 1, i32 16)
  %15 = bitcast i8* %14 to %Lang*
  %16 = getelementptr inbounds %Lang, %Lang* %15, i64 0, i32 0
  store %Lang_Vtable_type* @Lang_Vtable, %Lang_Vtable_type** %16, align 8
  call void @Lang_Constructor(%Lang* %15)
  %.cast = bitcast i8* %10 to %English*
  %17 = icmp eq i8* %10, null
  br i1 %17, label %nullDerefThen3, label %nullDerefElse4

nullDerefThen3:                                   ; preds = %nullDerefElse
  %18 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 20)
  call void @exit(i32 -1)
  br label %nullDerefElse4

nullDerefElse4:                                   ; preds = %nullDerefThen3, %nullDerefElse
  %19 = getelementptr inbounds %English, %English* %.cast, i64 0, i32 2
  %20 = bitcast %Lang** %19 to i8**
  store i8* %14, i8** %20, align 8
  %21 = load %English*, %English** %e, align 8
  %22 = icmp eq %English* %21, null
  br i1 %22, label %nullDerefThen5, label %nullDerefElse6

nullDerefThen5:                                   ; preds = %nullDerefElse4
  %23 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 21)
  call void @exit(i32 -1)
  br label %nullDerefElse6

nullDerefElse6:                                   ; preds = %nullDerefThen5, %nullDerefElse4
  %24 = getelementptr inbounds %English, %English* %21, i64 0, i32 2
  %25 = load %Lang*, %Lang** %24, align 8
  %26 = icmp eq %Lang* %25, null
  br i1 %26, label %nullDerefThen7, label %nullDerefElse8

nullDerefThen7:                                   ; preds = %nullDerefElse6
  %27 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 21)
  call void @exit(i32 -1)
  br label %nullDerefElse8

nullDerefElse8:                                   ; preds = %nullDerefThen7, %nullDerefElse6
  %28 = getelementptr inbounds %Lang, %Lang* %25, i64 0, i32 1
  store i32 33, i32* %28, align 4
  %29 = load %English*, %English** %e, align 8
  %30 = icmp eq %English* %29, null
  br i1 %30, label %nullDerefThen9, label %nullDerefElse10

nullDerefThen9:                                   ; preds = %nullDerefElse8
  %31 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 22)
  call void @exit(i32 -1)
  br label %nullDerefElse10

nullDerefElse10:                                  ; preds = %nullDerefThen9, %nullDerefElse8
  %32 = getelementptr inbounds %English, %English* %29, i64 0, i32 2
  %33 = load %Lang*, %Lang** %32, align 8
  %34 = icmp eq %Lang* %33, null
  br i1 %34, label %nullDerefThen11, label %nullDerefElse12

nullDerefThen11:                                  ; preds = %nullDerefElse10
  %35 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 22)
  call void @exit(i32 -1)
  br label %nullDerefElse12

nullDerefElse12:                                  ; preds = %nullDerefThen11, %nullDerefElse10
  %36 = getelementptr inbounds %Lang, %Lang* %33, i64 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %37)
  %39 = bitcast %English** %e to %Lang**
  %40 = load %Lang*, %Lang** %39, align 8
  store %Lang* %40, %Lang** %l, align 8
  %41 = icmp eq %Lang* %40, null
  br i1 %41, label %nullDerefThen13, label %nullDerefElse14

nullDerefThen13:                                  ; preds = %nullDerefElse12
  %42 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 24)
  call void @exit(i32 -1)
  br label %nullDerefElse14

nullDerefElse14:                                  ; preds = %nullDerefThen13, %nullDerefElse12
  %43 = getelementptr inbounds %Lang, %Lang* %40, i64 0, i32 1
  store i32 43, i32* %43, align 4
  %44 = load %Lang*, %Lang** %l, align 8
  %45 = icmp eq %Lang* %44, null
  br i1 %45, label %nullDerefThen15, label %nullDerefElse16

nullDerefThen15:                                  ; preds = %nullDerefElse14
  %46 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 25)
  call void @exit(i32 -1)
  br label %nullDerefElse16

nullDerefElse16:                                  ; preds = %nullDerefThen15, %nullDerefElse14
  %47 = getelementptr inbounds %Lang, %Lang* %44, i64 0, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %48)
  %50 = bitcast %Lang** %l to %Object**
  %51 = load %Object*, %Object** %50, align 8
  %52 = call i1 @Object_IsA(%Object* %51, %Object_Vtable_type* nonnull @Object_Vtable, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @English_class_name, i64 0, i64 0))
  br i1 %52, label %castThen, label %castElse

castThen:                                         ; preds = %nullDerefElse16
  br label %castCont

castElse:                                         ; preds = %nullDerefElse16
  %53 = alloca [5 x i8], align 1
  %.repack = getelementptr inbounds [5 x i8], [5 x i8]* %53, i64 0, i64 0
  store i8 76, i8* %.repack, align 1
  %.repack21 = getelementptr inbounds [5 x i8], [5 x i8]* %53, i64 0, i64 1
  store i8 97, i8* %.repack21, align 1
  %.repack22 = getelementptr inbounds [5 x i8], [5 x i8]* %53, i64 0, i64 2
  store i8 110, i8* %.repack22, align 1
  %.repack23 = getelementptr inbounds [5 x i8], [5 x i8]* %53, i64 0, i64 3
  store i8 103, i8* %.repack23, align 1
  %.repack24 = getelementptr inbounds [5 x i8], [5 x i8]* %53, i64 0, i64 4
  store i8 0, i8* %.repack24, align 1
  %54 = getelementptr inbounds [5 x i8], [5 x i8]* %53, i64 0, i64 0
  %55 = alloca [10 x i8], align 1
  %.repack25 = getelementptr inbounds [10 x i8], [10 x i8]* %55, i64 0, i64 0
  store i8 37, i8* %.repack25, align 1
  %.repack26 = getelementptr inbounds [10 x i8], [10 x i8]* %55, i64 0, i64 1
  store i8 69, i8* %.repack26, align 1
  %.repack27 = getelementptr inbounds [10 x i8], [10 x i8]* %55, i64 0, i64 2
  store i8 110, i8* %.repack27, align 1
  %.repack28 = getelementptr inbounds [10 x i8], [10 x i8]* %55, i64 0, i64 3
  store i8 103, i8* %.repack28, align 1
  %.repack29 = getelementptr inbounds [10 x i8], [10 x i8]* %55, i64 0, i64 4
  store i8 108, i8* %.repack29, align 1
  %.repack30 = getelementptr inbounds [10 x i8], [10 x i8]* %55, i64 0, i64 5
  store i8 105, i8* %.repack30, align 1
  %.repack31 = getelementptr inbounds [10 x i8], [10 x i8]* %55, i64 0, i64 6
  store i8 115, i8* %.repack31, align 1
  %.repack32 = getelementptr inbounds [10 x i8], [10 x i8]* %55, i64 0, i64 7
  store i8 104, i8* %.repack32, align 1
  %.repack33 = getelementptr inbounds [10 x i8], [10 x i8]* %55, i64 0, i64 8
  store i8 42, i8* %.repack33, align 1
  %.repack34 = getelementptr inbounds [10 x i8], [10 x i8]* %55, i64 0, i64 9
  store i8 0, i8* %.repack34, align 1
  %56 = getelementptr inbounds [10 x i8], [10 x i8]* %55, i64 0, i64 0
  %57 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([52 x i8], [52 x i8]* @castErrFormat, i64 0, i64 0), i32 26, i8* nonnull %54, i8* nonnull %56)
  call void @exit(i32 -1)
  br label %castCont

castCont:                                         ; preds = %castElse, %castThen
  %58 = bitcast %English** %e to %Object**
  store %Object* %51, %Object** %58, align 8
  %59 = icmp eq %Object* %51, null
  br i1 %59, label %nullDerefThen17, label %nullDerefElse18

nullDerefThen17:                                  ; preds = %castCont
  %60 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 27)
  call void @exit(i32 -1)
  br label %nullDerefElse18

nullDerefElse18:                                  ; preds = %nullDerefThen17, %castCont
  %61 = getelementptr inbounds %Object, %Object* %51, i64 2
  %62 = bitcast %Object* %61 to %Lang**
  %63 = load %Lang*, %Lang** %62, align 8
  %64 = icmp eq %Lang* %63, null
  br i1 %64, label %nullDerefThen19, label %nullDerefElse20

nullDerefThen19:                                  ; preds = %nullDerefElse18
  %65 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 27)
  call void @exit(i32 -1)
  br label %nullDerefElse20

nullDerefElse20:                                  ; preds = %nullDerefThen19, %nullDerefElse18
  %66 = getelementptr inbounds %Lang, %Lang* %63, i64 0, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %67)
  ret i32 0
}
