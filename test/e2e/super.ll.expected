; ModuleID = 'Module'
source_filename = "Module"
target triple = "aarch64-unknown-linux-gnu"

%i32arr_Vtable_type = type { %Object_Vtable_type*, i8*, void (%Object*)*, void (%Object*)*, void (%i32arr*)*, void (%i32arr*, %i32arr_Vtable_type*, i32*, i32)* }
%Object_Vtable_type = type { %Object_Vtable_type*, i8*, void (%Object*)*, void (%Object*)* }
%Object = type { %Object_Vtable_type* }
%i32arr = type { %i32arr_Vtable_type*, i32*, i32 }
%C_Vtable_type = type { %A_Vtable_type*, i8*, void (%Object*)*, void (%Object*)*, void (%A*)*, void (%A*)*, void (%A*, i32)*, void (%A*, i32, i32)*, void (%C*)*, void (%C*)* }
%A_Vtable_type = type { %Object_Vtable_type*, i8*, void (%Object*)*, void (%Object*)*, void (%A*)*, void (%A*)*, void (%A*, i32)*, void (%A*, i32, i32)* }
%A = type { %A_Vtable_type*, i32 }
%C = type { %C_Vtable_type*, i32, i32 }
%B_Vtable_type = type { %Object_Vtable_type*, i8*, void (%Object*)*, void (%Object*)*, void (%B*)*, void (%B*)* }
%B = type { %B_Vtable_type*, i32 }

@printIntFormat = private constant [4 x i8] c"%d\0A\00", align 1
@castErrFormat = private constant [52 x i8] c"Line no: %d | Narrow cast err: %s is not a type %s\0A\00", align 1
@outOfBoundsFormat = private constant [72 x i8] c"Line: %d | Array out of bounds exception at line. Index:%d | Length:%d\0A\00", align 1
@negativeLenFormat = private constant [62 x i8] c"Line: %d | Array len cannot be negative. Length attempted:%d\0A\00", align 1
@nullDerefFormat = private constant [29 x i8] c"Line: %d | Null dereference\0A\00", align 1
@divByZeroFormat = private constant [37 x i8] c"Line: %d | Divide by zero exception\0A\00", align 1
@i32arr_class_name = private constant [7 x i8] c"i32arr\00", align 1
@i32arr_Vtable = global %i32arr_Vtable_type { %Object_Vtable_type* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @i32arr_class_name, i32 0, i32 0), void (%Object*)* @"~Object_Object", void (%Object*)* @Object_Object, void (%i32arr*)* @"~i32arr_i32arr", void (%i32arr*, %i32arr_Vtable_type*, i32*, i32)* @i32arr_Constructor }
@Object_class_name = private constant [7 x i8] c"Object\00", align 1
@Object_Vtable = global %Object_Vtable_type { %Object_Vtable_type* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @Object_class_name, i32 0, i32 0), void (%Object*)* @"~Object_Object", void (%Object*)* @Object_Object }
@C_class_name = private constant [2 x i8] c"C\00", align 1
@C_Vtable = global %C_Vtable_type { %A_Vtable_type* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @C_class_name, i32 0, i32 0), void (%Object*)* @"~Object_Object", void (%Object*)* @Object_Object, void (%A*)* @"~A_A", void (%A*)* @A_A, void (%A*, i32)* @A_A_i32, void (%A*, i32, i32)* @A_A_i32_i32, void (%C*)* @C_C, void (%C*)* @"~C_C" }
@A_class_name = private constant [2 x i8] c"A\00", align 1
@A_Vtable = global %A_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @A_class_name, i32 0, i32 0), void (%Object*)* @"~Object_Object", void (%Object*)* @Object_Object, void (%A*)* @"~A_A", void (%A*)* @A_A, void (%A*, i32)* @A_A_i32, void (%A*, i32, i32)* @A_A_i32_i32 }
@B_class_name = private constant [2 x i8] c"B\00", align 1
@B_Vtable = global %B_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @B_class_name, i32 0, i32 0), void (%Object*)* @"~Object_Object", void (%Object*)* @Object_Object, void (%B*)* @"~B_B", void (%B*)* @B_B }

declare i32 @printf(i8*, ...)

declare i8* @malloc(i32)

declare i8* @calloc(i32, i32)

declare void @free(i8*)

declare void @exit(i32)

define i1 @Object_IsA(%Object* %0, %Object_Vtable_type* %1, i8* %2) {
entry:
  %object = alloca %Object*, align 8
  store %Object* %0, %Object** %object, align 8
  %vtbl = alloca %Object_Vtable_type*, align 8
  store %Object_Vtable_type* %1, %Object_Vtable_type** %vtbl, align 8
  %name = alloca i8*, align 8
  store i8* %2, i8** %name, align 8
  %3 = load %Object*, %Object** %object, align 8
  %4 = ptrtoint %Object* %3 to i64
  %equal = icmp eq i64 %4, 0
  %not = xor i1 %equal, true
  br i1 %not, label %then, label %else12

then:                                             ; preds = %entry
  %5 = load %Object*, %Object** %object, align 8
  %6 = icmp eq %Object* %5, null
  br i1 %6, label %nullDerefThen1, label %nullDerefElse

nullDerefThen1:                                   ; preds = %then
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 0)
  call void @exit(i32 -1)
  br label %nullDerefElse

nullDerefElse:                                    ; preds = %nullDerefThen1, %then
  %8 = getelementptr inbounds %Object, %Object* %5, i32 0, i32 0
  %9 = load %Object_Vtable_type*, %Object_Vtable_type** %8, align 8
  store %Object_Vtable_type* %9, %Object_Vtable_type** %vtbl, align 8
  br label %loopcond

loopcond:                                         ; preds = %ifcont, %nullDerefElse
  %10 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %11 = ptrtoint %Object_Vtable_type* %10 to i64
  %equal2 = icmp eq i64 %11, 0
  %not3 = xor i1 %equal2, true
  br i1 %not3, label %loop, label %loopend

loop:                                             ; preds = %loopcond
  %12 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %13 = icmp eq %Object_Vtable_type* %12, null
  br i1 %13, label %nullDerefThen4, label %nullDerefElse5

nullDerefThen4:                                   ; preds = %loop
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 0)
  call void @exit(i32 -1)
  br label %nullDerefElse5

nullDerefElse5:                                   ; preds = %nullDerefThen4, %loop
  %15 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %12, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = load i8*, i8** %name, align 8
  %18 = ptrtoint i8* %16 to i64
  %19 = ptrtoint i8* %17 to i64
  %equal6 = icmp eq i64 %18, %19
  br i1 %equal6, label %then7, label %else

then7:                                            ; preds = %nullDerefElse5
  br label %loopend

else:                                             ; preds = %nullDerefElse5
  %20 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %21 = icmp eq %Object_Vtable_type* %20, null
  br i1 %21, label %nullDerefThen8, label %nullDerefElse9

nullDerefThen8:                                   ; preds = %else
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 0)
  call void @exit(i32 -1)
  br label %nullDerefElse9

nullDerefElse9:                                   ; preds = %nullDerefThen8, %else
  %23 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %20, i32 0, i32 0
  %24 = load %Object_Vtable_type*, %Object_Vtable_type** %23, align 8
  store %Object_Vtable_type* %24, %Object_Vtable_type** %vtbl, align 8
  br label %ifcont

ifcont:                                           ; preds = %nullDerefElse9
  br label %loopcond

loopend:                                          ; preds = %then7, %loopcond
  %25 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %26 = ptrtoint %Object_Vtable_type* %25 to i64
  %equal10 = icmp eq i64 %26, 0
  %not11 = xor i1 %equal10, true
  br label %ifcont13

else12:                                           ; preds = %entry
  br label %ifcont13

ifcont13:                                         ; preds = %else12, %loopend
  %iftmp = phi i1 [ %not11, %loopend ], [ false, %else12 ]
  ret i1 %iftmp
}

define void @i32arr_Constructor(%i32arr* %0, %i32arr_Vtable_type* %1, i32* %2, i32 %3) {
entry:
  %this = alloca %i32arr*, align 8
  %super = alloca %i32arr*, align 8
  store %i32arr* %0, %i32arr** %super, align 8
  store %i32arr* %0, %i32arr** %this, align 8
  %vtable = alloca %i32arr_Vtable_type*, align 8
  store %i32arr_Vtable_type* %1, %i32arr_Vtable_type** %vtable, align 8
  %data = alloca i32*, align 8
  store i32* %2, i32** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arr_Vtable_type*, %i32arr_Vtable_type** %vtable, align 8
  %5 = load %i32arr*, %i32arr** %this, align 8
  %6 = icmp eq %i32arr* %5, null
  br i1 %6, label %nullDerefThen1, label %nullDerefElse

nullDerefThen1:                                   ; preds = %entry
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 0)
  call void @exit(i32 -1)
  br label %nullDerefElse

nullDerefElse:                                    ; preds = %nullDerefThen1, %entry
  %8 = getelementptr inbounds %i32arr, %i32arr* %5, i32 0, i32 0
  store %i32arr_Vtable_type* %4, %i32arr_Vtable_type** %8, align 8
  %9 = load i32*, i32** %data, align 8
  %10 = load %i32arr*, %i32arr** %this, align 8
  %11 = icmp eq %i32arr* %10, null
  br i1 %11, label %nullDerefThen2, label %nullDerefElse3

nullDerefThen2:                                   ; preds = %nullDerefElse
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 0)
  call void @exit(i32 -1)
  br label %nullDerefElse3

nullDerefElse3:                                   ; preds = %nullDerefThen2, %nullDerefElse
  %13 = getelementptr inbounds %i32arr, %i32arr* %10, i32 0, i32 1
  store i32* %9, i32** %13, align 8
  %14 = load i32, i32* %length, align 4
  %15 = load %i32arr*, %i32arr** %this, align 8
  %16 = icmp eq %i32arr* %15, null
  br i1 %16, label %nullDerefThen4, label %nullDerefElse5

nullDerefThen4:                                   ; preds = %nullDerefElse3
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 0)
  call void @exit(i32 -1)
  br label %nullDerefElse5

nullDerefElse5:                                   ; preds = %nullDerefThen4, %nullDerefElse3
  %18 = getelementptr inbounds %i32arr, %i32arr* %15, i32 0, i32 2
  store i32 %14, i32* %18, align 4
  ret void
}

define void @"~i32arr_i32arr"(%i32arr* %0) {
entry:
  %this = alloca %i32arr*, align 8
  %super = alloca %i32arr*, align 8
  store %i32arr* %0, %i32arr** %super, align 8
  store %i32arr* %0, %i32arr** %this, align 8
  %1 = load %i32arr*, %i32arr** %this, align 8
  %2 = icmp eq %i32arr* %1, null
  br i1 %2, label %nullDerefThen1, label %nullDerefElse

nullDerefThen1:                                   ; preds = %entry
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 0)
  call void @exit(i32 -1)
  br label %nullDerefElse

nullDerefElse:                                    ; preds = %nullDerefThen1, %entry
  %4 = getelementptr inbounds %i32arr, %i32arr* %1, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8
  %6 = bitcast i32* %5 to i8*
  call void @free(i8* %6)
  ret void
}

define void @"~Object_Object"(%Object* %0) {
entry:
  %this = alloca %Object*, align 8
  %super = alloca %Object*, align 8
  store %Object* %0, %Object** %super, align 8
  store %Object* %0, %Object** %this, align 8
  ret void
}

define void @Object_Object(%Object* %0) {
entry:
  %this = alloca %Object*, align 8
  %super = alloca %Object*, align 8
  store %Object* %0, %Object** %super, align 8
  store %Object* %0, %Object** %this, align 8
  ret void
}

define void @C_C(%C* %0) {
entry:
  %this = alloca %C*, align 8
  %super = alloca %C*, align 8
  store %C* %0, %C** %super, align 8
  store %C* %0, %C** %this, align 8
  %1 = load %C*, %C** %super, align 8
  %2 = getelementptr inbounds %C, %C* %1, i32 0, i32 0
  %vTableLoad = load %C_Vtable_type*, %C_Vtable_type** %2, align 8
  %3 = getelementptr inbounds %C_Vtable_type, %C_Vtable_type* %vTableLoad, i32 0, i32 5
  %methodLoad = load void (%A*)*, void (%A*)** %3, align 8
  %4 = bitcast %C* %1 to %A*
  call void %methodLoad(%A* %4)
  %5 = load %C*, %C** %super, align 8
  %6 = getelementptr inbounds %C, %C* %5, i32 0, i32 0
  %vTableLoad1 = load %C_Vtable_type*, %C_Vtable_type** %6, align 8
  %7 = getelementptr inbounds %C_Vtable_type, %C_Vtable_type* %vTableLoad1, i32 0, i32 5
  %methodLoad2 = load void (%A*)*, void (%A*)** %7, align 8
  %8 = bitcast %C* %5 to %A*
  call void %methodLoad2(%A* %8)
  ret void
}

define void @"~C_C"(%C* %0) {
entry:
  %this = alloca %C*, align 8
  %super = alloca %C*, align 8
  store %C* %0, %C** %super, align 8
  store %C* %0, %C** %this, align 8
  ret void
}

define void @"~A_A"(%A* %0) {
entry:
  %this = alloca %A*, align 8
  %super = alloca %A*, align 8
  store %A* %0, %A** %super, align 8
  store %A* %0, %A** %this, align 8
  %1 = load %A*, %A** %super, align 8
  %2 = getelementptr inbounds %A, %A* %1, i32 0, i32 0
  %vTableLoad = load %A_Vtable_type*, %A_Vtable_type** %2, align 8
  %3 = getelementptr inbounds %A_Vtable_type, %A_Vtable_type* %vTableLoad, i32 0, i32 2
  %methodLoad = load void (%Object*)*, void (%Object*)** %3, align 8
  %4 = bitcast %A* %1 to %Object*
  call void %methodLoad(%Object* %4)
  ret void
}

define void @A_A(%A* %0) {
entry:
  %this = alloca %A*, align 8
  %super = alloca %A*, align 8
  store %A* %0, %A** %super, align 8
  store %A* %0, %A** %this, align 8
  %1 = load %A*, %A** %super, align 8
  %2 = getelementptr inbounds %A, %A* %1, i32 0, i32 0
  %vTableLoad = load %A_Vtable_type*, %A_Vtable_type** %2, align 8
  %3 = getelementptr inbounds %A_Vtable_type, %A_Vtable_type* %vTableLoad, i32 0, i32 3
  %methodLoad = load void (%Object*)*, void (%Object*)** %3, align 8
  %4 = bitcast %A* %1 to %Object*
  call void %methodLoad(%Object* %4)
  %5 = load %A*, %A** %this, align 8
  %6 = icmp eq %A* %5, null
  br i1 %6, label %nullDerefThen1, label %nullDerefElse

nullDerefThen1:                                   ; preds = %entry
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 4)
  call void @exit(i32 -1)
  br label %nullDerefElse

nullDerefElse:                                    ; preds = %nullDerefThen1, %entry
  %8 = getelementptr inbounds %A, %A* %5, i32 0, i32 1
  store i32 10, i32* %8, align 4
  ret void
}

define void @A_A_i32(%A* %0, i32 %1) {
entry:
  %this = alloca %A*, align 8
  %super = alloca %A*, align 8
  store %A* %0, %A** %super, align 8
  store %A* %0, %A** %this, align 8
  %i = alloca i32, align 4
  store i32 %1, i32* %i, align 4
  %2 = load %A*, %A** %this, align 8
  %3 = getelementptr inbounds %A, %A* %2, i32 0, i32 0
  %vTableLoad = load %A_Vtable_type*, %A_Vtable_type** %3, align 8
  %4 = getelementptr inbounds %A_Vtable_type, %A_Vtable_type* %vTableLoad, i32 0, i32 5
  %methodLoad = load void (%A*)*, void (%A*)** %4, align 8
  call void %methodLoad(%A* %2)
  %5 = load i32, i32* %i, align 4
  %6 = load %A*, %A** %this, align 8
  %7 = icmp eq %A* %6, null
  br i1 %7, label %nullDerefThen1, label %nullDerefElse

nullDerefThen1:                                   ; preds = %entry
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 8)
  call void @exit(i32 -1)
  br label %nullDerefElse

nullDerefElse:                                    ; preds = %nullDerefThen1, %entry
  %9 = getelementptr inbounds %A, %A* %6, i32 0, i32 1
  store i32 %5, i32* %9, align 4
  ret void
}

define void @A_A_i32_i32(%A* %0, i32 %1, i32 %2) {
entry:
  %this = alloca %A*, align 8
  %super = alloca %A*, align 8
  store %A* %0, %A** %super, align 8
  store %A* %0, %A** %this, align 8
  %i = alloca i32, align 4
  store i32 %1, i32* %i, align 4
  %j = alloca i32, align 4
  store i32 %2, i32* %j, align 4
  %3 = load %A*, %A** %super, align 8
  %4 = getelementptr inbounds %A, %A* %3, i32 0, i32 0
  %vTableLoad = load %A_Vtable_type*, %A_Vtable_type** %4, align 8
  %5 = getelementptr inbounds %A_Vtable_type, %A_Vtable_type* %vTableLoad, i32 0, i32 3
  %methodLoad = load void (%Object*)*, void (%Object*)** %5, align 8
  %6 = bitcast %A* %3 to %Object*
  call void %methodLoad(%Object* %6)
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %j, align 4
  %add = add i32 %7, %8
  %9 = load %A*, %A** %this, align 8
  %10 = icmp eq %A* %9, null
  br i1 %10, label %nullDerefThen1, label %nullDerefElse

nullDerefThen1:                                   ; preds = %entry
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i32 0, i32 0), i32 11)
  call void @exit(i32 -1)
  br label %nullDerefElse

nullDerefElse:                                    ; preds = %nullDerefThen1, %entry
  %12 = getelementptr inbounds %A, %A* %9, i32 0, i32 1
  store i32 %add, i32* %12, align 4
  ret void
}

define void @"~B_B"(%B* %0) {
entry:
  %this = alloca %B*, align 8
  %super = alloca %B*, align 8
  store %B* %0, %B** %super, align 8
  store %B* %0, %B** %this, align 8
  %1 = load %B*, %B** %super, align 8
  %2 = getelementptr inbounds %B, %B* %1, i32 0, i32 0
  %vTableLoad = load %B_Vtable_type*, %B_Vtable_type** %2, align 8
  %3 = getelementptr inbounds %B_Vtable_type, %B_Vtable_type* %vTableLoad, i32 0, i32 2
  %methodLoad = load void (%Object*)*, void (%Object*)** %3, align 8
  %4 = bitcast %B* %1 to %Object*
  call void %methodLoad(%Object* %4)
  ret void
}

define void @B_B(%B* %0) {
entry:
  %this = alloca %B*, align 8
  %super = alloca %B*, align 8
  store %B* %0, %B** %super, align 8
  store %B* %0, %B** %this, align 8
  %1 = load %B*, %B** %super, align 8
  %2 = getelementptr inbounds %B, %B* %1, i32 0, i32 0
  %vTableLoad = load %B_Vtable_type*, %B_Vtable_type** %2, align 8
  %3 = getelementptr inbounds %B_Vtable_type, %B_Vtable_type* %vTableLoad, i32 0, i32 3
  %methodLoad = load void (%Object*)*, void (%Object*)** %3, align 8
  %4 = bitcast %B* %1 to %Object*
  call void %methodLoad(%Object* %4)
  %5 = load %B*, %B** %super, align 8
  %6 = getelementptr inbounds %B, %B* %5, i32 0, i32 0
  %vTableLoad1 = load %B_Vtable_type*, %B_Vtable_type** %6, align 8
  %7 = getelementptr inbounds %B_Vtable_type, %B_Vtable_type* %vTableLoad1, i32 0, i32 3
  %methodLoad2 = load void (%Object*)*, void (%Object*)** %7, align 8
  %8 = bitcast %B* %5 to %Object*
  call void %methodLoad2(%Object* %8)
  ret void
}

define i32 @main() {
entry:
  %iarr = alloca %i32arr*, align 8
  %c = alloca %C*, align 8
  %b = alloca %B*, align 8
  %aa = alloca %A*, align 8
  %a = alloca %A*, align 8
  store %A* null, %A** %a, align 8
  store %A* null, %A** %aa, align 8
  store %B* null, %B** %b, align 8
  store %C* null, %C** %c, align 8
  %0 = call dereferenceable_or_null(16) i8* @calloc(i32 1, i32 16)
  %1 = bitcast i8* %0 to %C*
  %2 = getelementptr inbounds %C, %C* %1, i64 0, i32 0
  store %C_Vtable_type* @C_Vtable, %C_Vtable_type** %2, align 8
  %constructorLoad = load void (%C*)*, void (%C*)** getelementptr inbounds (%C_Vtable_type, %C_Vtable_type* @C_Vtable, i64 0, i32 8), align 16
  call void %constructorLoad(%C* %1)
  %3 = bitcast %C** %c to i8**
  store i8* %0, i8** %3, align 8
  store %i32arr* null, %i32arr** %iarr, align 8
  %4 = call dereferenceable_or_null(16) i8* @calloc(i32 1, i32 16)
  %5 = bitcast i8* %4 to %A*
  %6 = getelementptr inbounds %A, %A* %5, i64 0, i32 0
  store %A_Vtable_type* @A_Vtable, %A_Vtable_type** %6, align 8
  %constructorLoad1 = load void (%A*, i32)*, void (%A*, i32)** getelementptr inbounds (%A_Vtable_type, %A_Vtable_type* @A_Vtable, i64 0, i32 6), align 16
  call void %constructorLoad1(%A* %5, i32 5)
  %7 = bitcast %A** %a to i8**
  store i8* %4, i8** %7, align 8
  %8 = call dereferenceable_or_null(16) i8* @calloc(i32 1, i32 16)
  %9 = bitcast i8* %8 to %A*
  %10 = getelementptr inbounds %A, %A* %9, i64 0, i32 0
  store %A_Vtable_type* @A_Vtable, %A_Vtable_type** %10, align 8
  %constructorLoad2 = load void (%A*, i32, i32)*, void (%A*, i32, i32)** getelementptr inbounds (%A_Vtable_type, %A_Vtable_type* @A_Vtable, i64 0, i32 7), align 8
  call void %constructorLoad2(%A* %9, i32 5, i32 4)
  %11 = bitcast %A** %aa to i8**
  store i8* %8, i8** %11, align 8
  %12 = call dereferenceable_or_null(16) i8* @calloc(i32 1, i32 16)
  %13 = bitcast i8* %12 to %B*
  %14 = getelementptr inbounds %B, %B* %13, i64 0, i32 0
  store %B_Vtable_type* @B_Vtable, %B_Vtable_type** %14, align 8
  %constructorLoad3 = load void (%B*)*, void (%B*)** getelementptr inbounds (%B_Vtable_type, %B_Vtable_type* @B_Vtable, i64 0, i32 5), align 8
  call void %constructorLoad3(%B* %13)
  %15 = bitcast %B** %b to i8**
  store i8* %12, i8** %15, align 8
  %16 = load %A*, %A** %a, align 8
  %17 = icmp eq %A* %16, null
  br i1 %17, label %nullDerefThen4, label %nullDerefElse

nullDerefThen4:                                   ; preds = %entry
  %18 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 35)
  call void @exit(i32 -1)
  br label %nullDerefElse

nullDerefElse:                                    ; preds = %nullDerefThen4, %entry
  %19 = getelementptr inbounds %A, %A* %16, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %20)
  %22 = load %A*, %A** %aa, align 8
  %23 = icmp eq %A* %22, null
  br i1 %23, label %nullDerefThen5, label %nullDerefElse6

nullDerefThen5:                                   ; preds = %nullDerefElse
  %24 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 36)
  call void @exit(i32 -1)
  br label %nullDerefElse6

nullDerefElse6:                                   ; preds = %nullDerefThen5, %nullDerefElse
  %25 = getelementptr inbounds %A, %A* %22, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %26)
  %28 = load %B*, %B** %b, align 8
  %29 = icmp eq %B* %28, null
  br i1 %29, label %nullDerefThen7, label %nullDerefElse8

nullDerefThen7:                                   ; preds = %nullDerefElse6
  %30 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 37)
  call void @exit(i32 -1)
  br label %nullDerefElse8

nullDerefElse8:                                   ; preds = %nullDerefThen7, %nullDerefElse6
  %31 = getelementptr inbounds %B, %B* %28, i64 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %32)
  br i1 false, label %negativeLenThen9, label %negativeLenCont

negativeLenThen9:                                 ; preds = %nullDerefElse8
  br label %negativeLenCont

negativeLenCont:                                  ; preds = %negativeLenThen9, %nullDerefElse8
  %34 = call dereferenceable_or_null(24) i8* @calloc(i32 1, i32 24)
  %35 = bitcast i8* %34 to %i32arr*
  %36 = call dereferenceable_or_null(20) i8* @calloc(i32 5, i32 4)
  %37 = bitcast i8* %36 to i32*
  %constructorLoad10 = load void (%i32arr*, %i32arr_Vtable_type*, i32*, i32)*, void (%i32arr*, %i32arr_Vtable_type*, i32*, i32)** getelementptr inbounds (%i32arr_Vtable_type, %i32arr_Vtable_type* @i32arr_Vtable, i64 0, i32 5), align 8
  call void %constructorLoad10(%i32arr* %35, %i32arr_Vtable_type* nonnull @i32arr_Vtable, i32* %37, i32 5)
  %38 = bitcast %i32arr** %iarr to i8**
  store i8* %34, i8** %38, align 8
  %.cast = bitcast i8* %34 to %i32arr*
  %39 = icmp eq i8* %34, null
  br i1 %39, label %nullDerefThen11, label %nullDerefElse12

nullDerefThen11:                                  ; preds = %negativeLenCont
  %40 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 39)
  call void @exit(i32 -1)
  br label %nullDerefElse12

nullDerefElse12:                                  ; preds = %nullDerefThen11, %negativeLenCont
  %41 = getelementptr inbounds %i32arr, %i32arr* %.cast, i64 0, i32 1
  %baseArrPtr = load i32*, i32** %41, align 8
  %42 = load %i32arr*, %i32arr** %iarr, align 8
  %43 = icmp eq %i32arr* %42, null
  br i1 %43, label %nullDerefThen13, label %nullDerefElse14

nullDerefThen13:                                  ; preds = %nullDerefElse12
  %44 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 39)
  call void @exit(i32 -1)
  br label %nullDerefElse14

nullDerefElse14:                                  ; preds = %nullDerefThen13, %nullDerefElse12
  %45 = getelementptr inbounds %i32arr, %i32arr* %42, i64 0, i32 2
  %46 = load i32, i32* %45, align 4
  %47 = icmp slt i32 %46, 1
  br i1 %47, label %boundsCheckThen15, label %boundsCheckElse

boundsCheckThen15:                                ; preds = %nullDerefElse14
  %48 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 39, i32 0, i32 %46)
  call void @exit(i32 -1)
  br label %boundsCheckElse

boundsCheckElse:                                  ; preds = %boundsCheckThen15, %nullDerefElse14
  store i32 45, i32* %baseArrPtr, align 4
  %49 = load %i32arr*, %i32arr** %iarr, align 8
  %50 = icmp eq %i32arr* %49, null
  br i1 %50, label %nullDerefThen16, label %nullDerefElse17

nullDerefThen16:                                  ; preds = %boundsCheckElse
  %51 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 40)
  call void @exit(i32 -1)
  br label %nullDerefElse17

nullDerefElse17:                                  ; preds = %nullDerefThen16, %boundsCheckElse
  %52 = getelementptr inbounds %i32arr, %i32arr* %49, i64 0, i32 1
  %baseArrPtr18 = load i32*, i32** %52, align 8
  %53 = load %i32arr*, %i32arr** %iarr, align 8
  %54 = icmp eq %i32arr* %53, null
  br i1 %54, label %nullDerefThen19, label %nullDerefElse20

nullDerefThen19:                                  ; preds = %nullDerefElse17
  %55 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 40)
  call void @exit(i32 -1)
  br label %nullDerefElse20

nullDerefElse20:                                  ; preds = %nullDerefThen19, %nullDerefElse17
  %56 = getelementptr inbounds %i32arr, %i32arr* %53, i64 0, i32 2
  %57 = load i32, i32* %56, align 4
  %58 = icmp slt i32 %57, 1
  br i1 %58, label %boundsCheckThen21, label %boundsCheckElse22

boundsCheckThen21:                                ; preds = %nullDerefElse20
  %59 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 40, i32 0, i32 %57)
  call void @exit(i32 -1)
  br label %boundsCheckElse22

boundsCheckElse22:                                ; preds = %boundsCheckThen21, %nullDerefElse20
  %60 = load i32, i32* %baseArrPtr18, align 4
  %61 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %60)
  %62 = load %C*, %C** %c, align 8
  %63 = icmp eq %C* %62, null
  br i1 %63, label %nullDerefThen23, label %nullDerefElse24

nullDerefThen23:                                  ; preds = %boundsCheckElse22
  %64 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([29 x i8], [29 x i8]* @nullDerefFormat, i64 0, i64 0), i32 41)
  call void @exit(i32 -1)
  br label %nullDerefElse24

nullDerefElse24:                                  ; preds = %nullDerefThen23, %boundsCheckElse22
  %65 = getelementptr inbounds %C, %C* %62, i64 0, i32 1
  %66 = load i32, i32* %65, align 4
  %67 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %66)
  %68 = load %i32arr*, %i32arr** %iarr, align 8
  %69 = getelementptr inbounds %i32arr, %i32arr* %68, i64 0, i32 0
  %vTableLoad = load %i32arr_Vtable_type*, %i32arr_Vtable_type** %69, align 8
  %70 = getelementptr inbounds %i32arr_Vtable_type, %i32arr_Vtable_type* %vTableLoad, i64 0, i32 4
  %methodLoad = load void (%i32arr*)*, void (%i32arr*)** %70, align 8
  call void %methodLoad(%i32arr* %68)
  %71 = load %A*, %A** %a, align 8
  %72 = getelementptr inbounds %A, %A* %71, i64 0, i32 0
  %vTableLoad25 = load %A_Vtable_type*, %A_Vtable_type** %72, align 8
  %73 = getelementptr inbounds %A_Vtable_type, %A_Vtable_type* %vTableLoad25, i64 0, i32 4
  %methodLoad26 = load void (%A*)*, void (%A*)** %73, align 8
  call void %methodLoad26(%A* %71)
  %74 = load %C*, %C** %c, align 8
  %75 = getelementptr inbounds %C, %C* %74, i64 0, i32 0
  %vTableLoad27 = load %C_Vtable_type*, %C_Vtable_type** %75, align 8
  %76 = getelementptr inbounds %C_Vtable_type, %C_Vtable_type* %vTableLoad27, i64 0, i32 9
  %methodLoad28 = load void (%C*)*, void (%C*)** %76, align 8
  call void %methodLoad28(%C* %74)
  ret i32 0
}
