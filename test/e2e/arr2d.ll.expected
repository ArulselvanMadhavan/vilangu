; ModuleID = 'Module'
source_filename = "Module"
target triple = "x86_64-pc-linux-gnu"

%Object_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arr_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arrarr_Vtable_type = type { %Object_Vtable_type*, i8* }
%Object = type { %Object_Vtable_type* }
%i32arr = type { %i32arr_Vtable_type*, i32*, i32 }
%i32arrarr = type { %i32arrarr_Vtable_type*, %i32arr*, i32 }

@printIntFormat = private constant [4 x i8] c"%d\0A\00", align 1
@castErrFormat = private constant [38 x i8] c"Narrow cast err: %s is not a type %s\0A\00", align 1
@outOfBoundsFormat = private constant [64 x i8] c"Array out of bounds exception at line %d. Index:%d | Length:%d\0A\00", align 1
@negativeLenFormat = private constant [51 x i8] c"Array len cannot be negative. Length attempted:%d\0A\00", align 1
@Object_class_name = private constant [7 x i8] c"Object\00", align 1
@Object_Vtable = global %Object_Vtable_type { %Object_Vtable_type* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @Object_class_name, i32 0, i32 0) }
@i32arr_class_name = private constant [7 x i8] c"i32arr\00", align 1
@i32arr_Vtable = global %i32arr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @i32arr_class_name, i32 0, i32 0) }
@i32arrarr_class_name = private constant [10 x i8] c"i32arrarr\00", align 1
@i32arrarr_Vtable = global %i32arrarr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @i32arrarr_class_name, i32 0, i32 0) }

declare i32 @printf(i8*, ...)

declare i8* @malloc(i32)

declare i8* @calloc(i32, i32)

declare void @free(i8*)

declare void @exit(i32)

define i1 @Object_IsA(%Object* %0, %Object_Vtable_type* %1, i8* %2) {
entry:
  %object = alloca %Object*, align 8
  store %Object* %0, %Object** %object, align 8
  %vtbl = alloca %Object_Vtable_type*, align 8
  store %Object_Vtable_type* %1, %Object_Vtable_type** %vtbl, align 8
  %name = alloca i8*, align 8
  store i8* %2, i8** %name, align 8
  %3 = load %Object*, %Object** %object, align 8
  %4 = ptrtoint %Object* %3 to i64
  %equal = icmp eq i64 %4, 0
  %not = xor i1 %equal, true
  br i1 %not, label %then, label %else7

then:                                             ; preds = %entry
  %5 = load %Object*, %Object** %object, align 8
  %6 = getelementptr inbounds %Object, %Object* %5, i32 0, i32 0
  %7 = load %Object_Vtable_type*, %Object_Vtable_type** %6, align 8
  store %Object_Vtable_type* %7, %Object_Vtable_type** %vtbl, align 8
  br label %loopcond

loopcond:                                         ; preds = %ifcont, %then
  %8 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %9 = ptrtoint %Object_Vtable_type* %8 to i64
  %equal1 = icmp eq i64 %9, 0
  %not2 = xor i1 %equal1, true
  br i1 %not2, label %loop, label %loopend

loop:                                             ; preds = %loopcond
  %10 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %11 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %10, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = load i8*, i8** %name, align 8
  %14 = ptrtoint i8* %12 to i64
  %15 = ptrtoint i8* %13 to i64
  %equal3 = icmp eq i64 %14, %15
  br i1 %equal3, label %then4, label %else

then4:                                            ; preds = %loop
  br label %loopend

else:                                             ; preds = %loop
  %16 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %17 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %16, i32 0, i32 0
  %18 = load %Object_Vtable_type*, %Object_Vtable_type** %17, align 8
  store %Object_Vtable_type* %18, %Object_Vtable_type** %vtbl, align 8
  br label %ifcont

ifcont:                                           ; preds = %else
  br label %loopcond

loopend:                                          ; preds = %then4, %loopcond
  %19 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %20 = ptrtoint %Object_Vtable_type* %19 to i64
  %equal5 = icmp eq i64 %20, 0
  %not6 = xor i1 %equal5, true
  br label %ifcont8

else7:                                            ; preds = %entry
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %loopend
  %iftmp = phi i1 [ %not6, %loopend ], [ false, %else7 ]
  ret i1 %iftmp
}

define void @i32arr_Constructor(%i32arr* %0, %i32arr_Vtable_type* %1, i32* %2, i32 %3) {
entry:
  %this = alloca %i32arr*, align 8
  store %i32arr* %0, %i32arr** %this, align 8
  %vtable = alloca %i32arr_Vtable_type*, align 8
  store %i32arr_Vtable_type* %1, %i32arr_Vtable_type** %vtable, align 8
  %data = alloca i32*, align 8
  store i32* %2, i32** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arr_Vtable_type*, %i32arr_Vtable_type** %vtable, align 8
  %5 = load %i32arr*, %i32arr** %this, align 8
  %6 = getelementptr inbounds %i32arr, %i32arr* %5, i32 0, i32 0
  store %i32arr_Vtable_type* %4, %i32arr_Vtable_type** %6, align 8
  %7 = load i32*, i32** %data, align 8
  %8 = load %i32arr*, %i32arr** %this, align 8
  %9 = getelementptr inbounds %i32arr, %i32arr* %8, i32 0, i32 1
  store i32* %7, i32** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arr*, %i32arr** %this, align 8
  %12 = getelementptr inbounds %i32arr, %i32arr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define void @i32arrarr_Constructor(%i32arrarr* %0, %i32arrarr_Vtable_type* %1, %i32arr* %2, i32 %3) {
entry:
  %this = alloca %i32arrarr*, align 8
  store %i32arrarr* %0, %i32arrarr** %this, align 8
  %vtable = alloca %i32arrarr_Vtable_type*, align 8
  store %i32arrarr_Vtable_type* %1, %i32arrarr_Vtable_type** %vtable, align 8
  %data = alloca %i32arr*, align 8
  store %i32arr* %2, %i32arr** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arrarr_Vtable_type*, %i32arrarr_Vtable_type** %vtable, align 8
  %5 = load %i32arrarr*, %i32arrarr** %this, align 8
  %6 = getelementptr inbounds %i32arrarr, %i32arrarr* %5, i32 0, i32 0
  store %i32arrarr_Vtable_type* %4, %i32arrarr_Vtable_type** %6, align 8
  %7 = load %i32arr*, %i32arr** %data, align 8
  %8 = load %i32arrarr*, %i32arrarr** %this, align 8
  %9 = getelementptr inbounds %i32arrarr, %i32arrarr* %8, i32 0, i32 1
  store %i32arr* %7, %i32arr** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arrarr*, %i32arrarr** %this, align 8
  %12 = getelementptr inbounds %i32arrarr, %i32arrarr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define i32 @main() {
entry:
  %col = alloca i32, align 4
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca %i32arrarr*, align 8
  store %i32arrarr* null, %i32arrarr** %a, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %col, align 4
  br i1 false, label %negativeLenThen1, label %negativeLenCont

negativeLenThen1:                                 ; preds = %entry
  br label %negativeLenCont

negativeLenCont:                                  ; preds = %negativeLenThen1, %entry
  %newArrayResult = alloca %i32arrarr, align 8
  %0 = call dereferenceable_or_null(120) i8* @calloc(i32 5, i32 24)
  %1 = bitcast i8* %0 to %i32arr*
  call void @i32arrarr_Constructor(%i32arrarr* nonnull %newArrayResult, %i32arrarr_Vtable_type* nonnull @i32arrarr_Vtable, %i32arr* %1, i32 5)
  store %i32arrarr* %newArrayResult, %i32arrarr** %a, align 8
  store i32 5, i32* %i, align 4
  store i32 4, i32* %col, align 4
  br label %loopcond

loopcond:                                         ; preds = %loopend, %negativeLenCont
  %2 = load i32, i32* %i, align 4
  %sgt = icmp sgt i32 %2, 0
  br i1 %sgt, label %loop, label %loopend28

loop:                                             ; preds = %loopcond
  %3 = load i32, i32* %i, align 4
  %sub = add i32 %3, -1
  store i32 %sub, i32* %i, align 4
  %4 = load i32, i32* %col, align 4
  store i32 %4, i32* %j, align 4
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %negativeLenThen2, label %negativeLenCont3

negativeLenThen2:                                 ; preds = %loop
  %6 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([51 x i8], [51 x i8]* @negativeLenFormat, i64 0, i64 0), i32 %4)
  call void @exit(i32 -1)
  br label %negativeLenCont3

negativeLenCont3:                                 ; preds = %negativeLenThen2, %loop
  %newArrayResult4 = alloca %i32arr, align 8
  %7 = call i8* @calloc(i32 %4, i32 4)
  %8 = bitcast i8* %7 to i32*
  call void @i32arr_Constructor(%i32arr* nonnull %newArrayResult4, %i32arr_Vtable_type* nonnull @i32arr_Vtable, i32* %8, i32 %4)
  %9 = load i32, i32* %i, align 4
  %10 = load %i32arrarr*, %i32arrarr** %a, align 8
  %11 = getelementptr inbounds %i32arrarr, %i32arrarr* %10, i64 0, i32 1
  %baseArrPtr = load %i32arr*, %i32arr** %11, align 8
  %12 = getelementptr inbounds %i32arrarr, %i32arrarr* %10, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %.not = icmp slt i32 %9, %13
  br i1 %.not, label %boundsCheckElse, label %boundsCheckThen5

boundsCheckThen5:                                 ; preds = %negativeLenCont3
  %14 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 11, i32 %9, i32 %13)
  call void @exit(i32 -1)
  br label %boundsCheckElse

boundsCheckElse:                                  ; preds = %boundsCheckThen5, %negativeLenCont3
  %15 = sext i32 %9 to i64
  %16 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr, i64 %15
  %loadRefTypeBeforeSave = load %i32arr, %i32arr* %newArrayResult4, align 8
  store %i32arr %loadRefTypeBeforeSave, %i32arr* %16, align 8
  br label %loopcond6

loopcond6:                                        ; preds = %boundsCheckElse27, %boundsCheckElse
  %17 = load i32, i32* %j, align 4
  %sgt7 = icmp sgt i32 %17, 0
  br i1 %sgt7, label %loop8, label %loopend

loop8:                                            ; preds = %loopcond6
  %18 = load i32, i32* %j, align 4
  %sub9 = add i32 %18, -1
  store i32 %sub9, i32* %j, align 4
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %col, align 4
  %mul = mul i32 %19, %20
  %add = add i32 %mul, %sub9
  %21 = load %i32arrarr*, %i32arrarr** %a, align 8
  %22 = getelementptr inbounds %i32arrarr, %i32arrarr* %21, i64 0, i32 1
  %baseArrPtr10 = load %i32arr*, %i32arr** %22, align 8
  %23 = getelementptr inbounds %i32arrarr, %i32arrarr* %21, i64 0, i32 2
  %24 = load i32, i32* %23, align 4
  %.not29 = icmp slt i32 %19, %24
  br i1 %.not29, label %boundsCheckElse12, label %boundsCheckThen11

boundsCheckThen11:                                ; preds = %loop8
  %25 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 14, i32 %19, i32 %24)
  call void @exit(i32 -1)
  br label %boundsCheckElse12

boundsCheckElse12:                                ; preds = %boundsCheckThen11, %loop8
  %26 = sext i32 %19 to i64
  %27 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr10, i64 %26, i32 1
  %baseArrPtr13 = load i32*, i32** %27, align 8
  %28 = load i32, i32* %i, align 4
  %29 = load %i32arrarr*, %i32arrarr** %a, align 8
  %30 = getelementptr inbounds %i32arrarr, %i32arrarr* %29, i64 0, i32 1
  %baseArrPtr14 = load %i32arr*, %i32arr** %30, align 8
  %31 = getelementptr inbounds %i32arrarr, %i32arrarr* %29, i64 0, i32 2
  %32 = load i32, i32* %31, align 4
  %.not30 = icmp slt i32 %28, %32
  br i1 %.not30, label %boundsCheckElse16, label %boundsCheckThen15

boundsCheckThen15:                                ; preds = %boundsCheckElse12
  %33 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 14, i32 %28, i32 %32)
  call void @exit(i32 -1)
  br label %boundsCheckElse16

boundsCheckElse16:                                ; preds = %boundsCheckThen15, %boundsCheckElse12
  %34 = sext i32 %28 to i64
  %35 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr14, i64 %34, i32 2
  %36 = load i32, i32* %35, align 4
  %.not31 = icmp slt i32 %sub9, %36
  br i1 %.not31, label %boundsCheckElse18, label %boundsCheckThen17

boundsCheckThen17:                                ; preds = %boundsCheckElse16
  %37 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 14, i32 %sub9, i32 %36)
  call void @exit(i32 -1)
  br label %boundsCheckElse18

boundsCheckElse18:                                ; preds = %boundsCheckThen17, %boundsCheckElse16
  %38 = sext i32 %sub9 to i64
  %39 = getelementptr inbounds i32, i32* %baseArrPtr13, i64 %38
  store i32 %add, i32* %39, align 4
  %40 = load i32, i32* %j, align 4
  %41 = load i32, i32* %i, align 4
  %42 = load %i32arrarr*, %i32arrarr** %a, align 8
  %43 = getelementptr inbounds %i32arrarr, %i32arrarr* %42, i64 0, i32 1
  %baseArrPtr19 = load %i32arr*, %i32arr** %43, align 8
  %44 = getelementptr inbounds %i32arrarr, %i32arrarr* %42, i64 0, i32 2
  %45 = load i32, i32* %44, align 4
  %.not32 = icmp slt i32 %41, %45
  br i1 %.not32, label %boundsCheckElse21, label %boundsCheckThen20

boundsCheckThen20:                                ; preds = %boundsCheckElse18
  %46 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 15, i32 %41, i32 %45)
  call void @exit(i32 -1)
  br label %boundsCheckElse21

boundsCheckElse21:                                ; preds = %boundsCheckThen20, %boundsCheckElse18
  %47 = sext i32 %41 to i64
  %48 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr19, i64 %47, i32 1
  %baseArrPtr22 = load i32*, i32** %48, align 8
  %49 = load i32, i32* %i, align 4
  %50 = load %i32arrarr*, %i32arrarr** %a, align 8
  %51 = getelementptr inbounds %i32arrarr, %i32arrarr* %50, i64 0, i32 1
  %baseArrPtr23 = load %i32arr*, %i32arr** %51, align 8
  %52 = getelementptr inbounds %i32arrarr, %i32arrarr* %50, i64 0, i32 2
  %53 = load i32, i32* %52, align 4
  %.not33 = icmp slt i32 %49, %53
  br i1 %.not33, label %boundsCheckElse25, label %boundsCheckThen24

boundsCheckThen24:                                ; preds = %boundsCheckElse21
  %54 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 15, i32 %49, i32 %53)
  call void @exit(i32 -1)
  br label %boundsCheckElse25

boundsCheckElse25:                                ; preds = %boundsCheckThen24, %boundsCheckElse21
  %55 = sext i32 %49 to i64
  %56 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr23, i64 %55, i32 2
  %57 = load i32, i32* %56, align 4
  %.not34 = icmp slt i32 %40, %57
  br i1 %.not34, label %boundsCheckElse27, label %boundsCheckThen26

boundsCheckThen26:                                ; preds = %boundsCheckElse25
  %58 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 15, i32 %40, i32 %57)
  call void @exit(i32 -1)
  br label %boundsCheckElse27

boundsCheckElse27:                                ; preds = %boundsCheckThen26, %boundsCheckElse25
  %59 = sext i32 %40 to i64
  %60 = getelementptr inbounds i32, i32* %baseArrPtr22, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %61)
  br label %loopcond6

loopend:                                          ; preds = %loopcond6
  br label %loopcond

loopend28:                                        ; preds = %loopcond
  ret i32 0
}
