; ModuleID = 'Module'
source_filename = "Module"
target triple = "x86_64-pc-linux-gnu"

%Object_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arr_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arrarr_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arrarrarr_Vtable_type = type { %Object_Vtable_type*, i8* }
%Object = type { %Object_Vtable_type* }
%i32arr = type { %i32arr_Vtable_type*, i32*, i32 }
%i32arrarr = type { %i32arrarr_Vtable_type*, %i32arr*, i32 }
%i32arrarrarr = type { %i32arrarrarr_Vtable_type*, %i32arrarr*, i32 }

@printIntFormat = private constant [4 x i8] c"%d\0A\00", align 1
@castErrFormat = private constant [38 x i8] c"Narrow cast err: %s is not a type %s\0A\00", align 1
@outOfBoundsFormat = private constant [64 x i8] c"Array out of bounds exception at line %d. Index:%d | Length:%d\0A\00", align 1
@negativeLenFormat = private constant [51 x i8] c"Array len cannot be negative. Length attempted:%d\0A\00", align 1
@Object_class_name = private constant [7 x i8] c"Object\00", align 1
@Object_Vtable = global %Object_Vtable_type { %Object_Vtable_type* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @Object_class_name, i32 0, i32 0) }
@i32arr_class_name = private constant [7 x i8] c"i32arr\00", align 1
@i32arr_Vtable = global %i32arr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @i32arr_class_name, i32 0, i32 0) }
@i32arrarr_class_name = private constant [10 x i8] c"i32arrarr\00", align 1
@i32arrarr_Vtable = global %i32arrarr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @i32arrarr_class_name, i32 0, i32 0) }
@i32arrarrarr_class_name = private constant [13 x i8] c"i32arrarrarr\00", align 1
@i32arrarrarr_Vtable = global %i32arrarrarr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @i32arrarrarr_class_name, i32 0, i32 0) }

declare i32 @printf(i8*, ...)

declare i8* @malloc(i32)

declare i8* @calloc(i32, i32)

declare void @free(i8*)

declare void @exit(i32)

define i1 @Object_IsA(%Object* %0, %Object_Vtable_type* %1, i8* %2) {
entry:
  %object = alloca %Object*, align 8
  store %Object* %0, %Object** %object, align 8
  %vtbl = alloca %Object_Vtable_type*, align 8
  store %Object_Vtable_type* %1, %Object_Vtable_type** %vtbl, align 8
  %name = alloca i8*, align 8
  store i8* %2, i8** %name, align 8
  %3 = load %Object*, %Object** %object, align 8
  %4 = ptrtoint %Object* %3 to i64
  %equal = icmp eq i64 %4, 0
  %not = xor i1 %equal, true
  br i1 %not, label %then, label %else7

then:                                             ; preds = %entry
  %5 = load %Object*, %Object** %object, align 8
  %6 = getelementptr inbounds %Object, %Object* %5, i32 0, i32 0
  %7 = load %Object_Vtable_type*, %Object_Vtable_type** %6, align 8
  store %Object_Vtable_type* %7, %Object_Vtable_type** %vtbl, align 8
  br label %loopcond

loopcond:                                         ; preds = %ifcont, %then
  %8 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %9 = ptrtoint %Object_Vtable_type* %8 to i64
  %equal1 = icmp eq i64 %9, 0
  %not2 = xor i1 %equal1, true
  br i1 %not2, label %loop, label %loopend

loop:                                             ; preds = %loopcond
  %10 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %11 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %10, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = load i8*, i8** %name, align 8
  %14 = ptrtoint i8* %12 to i64
  %15 = ptrtoint i8* %13 to i64
  %equal3 = icmp eq i64 %14, %15
  br i1 %equal3, label %then4, label %else

then4:                                            ; preds = %loop
  br label %loopend

else:                                             ; preds = %loop
  %16 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %17 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %16, i32 0, i32 0
  %18 = load %Object_Vtable_type*, %Object_Vtable_type** %17, align 8
  store %Object_Vtable_type* %18, %Object_Vtable_type** %vtbl, align 8
  br label %ifcont

ifcont:                                           ; preds = %else
  br label %loopcond

loopend:                                          ; preds = %then4, %loopcond
  %19 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %20 = ptrtoint %Object_Vtable_type* %19 to i64
  %equal5 = icmp eq i64 %20, 0
  %not6 = xor i1 %equal5, true
  br label %ifcont8

else7:                                            ; preds = %entry
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %loopend
  %iftmp = phi i1 [ %not6, %loopend ], [ false, %else7 ]
  ret i1 %iftmp
}

define void @i32arr_Constructor(%i32arr* %0, %i32arr_Vtable_type* %1, i32* %2, i32 %3) {
entry:
  %this = alloca %i32arr*, align 8
  store %i32arr* %0, %i32arr** %this, align 8
  %vtable = alloca %i32arr_Vtable_type*, align 8
  store %i32arr_Vtable_type* %1, %i32arr_Vtable_type** %vtable, align 8
  %data = alloca i32*, align 8
  store i32* %2, i32** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arr_Vtable_type*, %i32arr_Vtable_type** %vtable, align 8
  %5 = load %i32arr*, %i32arr** %this, align 8
  %6 = getelementptr inbounds %i32arr, %i32arr* %5, i32 0, i32 0
  store %i32arr_Vtable_type* %4, %i32arr_Vtable_type** %6, align 8
  %7 = load i32*, i32** %data, align 8
  %8 = load %i32arr*, %i32arr** %this, align 8
  %9 = getelementptr inbounds %i32arr, %i32arr* %8, i32 0, i32 1
  store i32* %7, i32** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arr*, %i32arr** %this, align 8
  %12 = getelementptr inbounds %i32arr, %i32arr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define void @i32arrarr_Constructor(%i32arrarr* %0, %i32arrarr_Vtable_type* %1, %i32arr* %2, i32 %3) {
entry:
  %this = alloca %i32arrarr*, align 8
  store %i32arrarr* %0, %i32arrarr** %this, align 8
  %vtable = alloca %i32arrarr_Vtable_type*, align 8
  store %i32arrarr_Vtable_type* %1, %i32arrarr_Vtable_type** %vtable, align 8
  %data = alloca %i32arr*, align 8
  store %i32arr* %2, %i32arr** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arrarr_Vtable_type*, %i32arrarr_Vtable_type** %vtable, align 8
  %5 = load %i32arrarr*, %i32arrarr** %this, align 8
  %6 = getelementptr inbounds %i32arrarr, %i32arrarr* %5, i32 0, i32 0
  store %i32arrarr_Vtable_type* %4, %i32arrarr_Vtable_type** %6, align 8
  %7 = load %i32arr*, %i32arr** %data, align 8
  %8 = load %i32arrarr*, %i32arrarr** %this, align 8
  %9 = getelementptr inbounds %i32arrarr, %i32arrarr* %8, i32 0, i32 1
  store %i32arr* %7, %i32arr** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arrarr*, %i32arrarr** %this, align 8
  %12 = getelementptr inbounds %i32arrarr, %i32arrarr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define void @i32arrarrarr_Constructor(%i32arrarrarr* %0, %i32arrarrarr_Vtable_type* %1, %i32arrarr* %2, i32 %3) {
entry:
  %this = alloca %i32arrarrarr*, align 8
  store %i32arrarrarr* %0, %i32arrarrarr** %this, align 8
  %vtable = alloca %i32arrarrarr_Vtable_type*, align 8
  store %i32arrarrarr_Vtable_type* %1, %i32arrarrarr_Vtable_type** %vtable, align 8
  %data = alloca %i32arrarr*, align 8
  store %i32arrarr* %2, %i32arrarr** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arrarrarr_Vtable_type*, %i32arrarrarr_Vtable_type** %vtable, align 8
  %5 = load %i32arrarrarr*, %i32arrarrarr** %this, align 8
  %6 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %5, i32 0, i32 0
  store %i32arrarrarr_Vtable_type* %4, %i32arrarrarr_Vtable_type** %6, align 8
  %7 = load %i32arrarr*, %i32arrarr** %data, align 8
  %8 = load %i32arrarrarr*, %i32arrarrarr** %this, align 8
  %9 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %8, i32 0, i32 1
  store %i32arrarr* %7, %i32arrarr** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arrarrarr*, %i32arrarrarr** %this, align 8
  %12 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define i32 @main() {
entry:
  %a = alloca %i32arrarrarr*, align 8
  store %i32arrarrarr* null, %i32arrarrarr** %a, align 8
  br i1 false, label %negativeLenThen1, label %negativeLenCont

negativeLenThen1:                                 ; preds = %entry
  br label %negativeLenCont

negativeLenCont:                                  ; preds = %negativeLenThen1, %entry
  %newArrayResult = alloca %i32arrarrarr, align 8
  %0 = call dereferenceable_or_null(120) i8* @calloc(i32 5, i32 24)
  %1 = bitcast i8* %0 to %i32arrarr*
  call void @i32arrarrarr_Constructor(%i32arrarrarr* nonnull %newArrayResult, %i32arrarrarr_Vtable_type* nonnull @i32arrarrarr_Vtable, %i32arrarr* %1, i32 5)
  store %i32arrarrarr* %newArrayResult, %i32arrarrarr** %a, align 8
  br i1 false, label %negativeLenThen2, label %negativeLenCont3

negativeLenThen2:                                 ; preds = %negativeLenCont
  br label %negativeLenCont3

negativeLenCont3:                                 ; preds = %negativeLenThen2, %negativeLenCont
  %newArrayResult4 = alloca %i32arrarr, align 8
  %2 = call dereferenceable_or_null(511992) i8* @calloc(i32 21333, i32 24)
  %3 = bitcast i8* %2 to %i32arr*
  call void @i32arrarr_Constructor(%i32arrarr* nonnull %newArrayResult4, %i32arrarr_Vtable_type* nonnull @i32arrarr_Vtable, %i32arr* %3, i32 21333)
  %4 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %5 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %4, i64 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %boundsCheckThen5, label %boundsCheckElse

boundsCheckThen5:                                 ; preds = %negativeLenCont3
  %8 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %9 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %8, i64 0, i32 1
  %baseArrPtr = load %i32arrarr*, %i32arrarr** %9, align 8
  br label %boundsCheckIfcont

boundsCheckElse:                                  ; preds = %negativeLenCont3
  %10 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 4, i32 0, i32 %6)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont

boundsCheckIfcont:                                ; preds = %boundsCheckElse, %boundsCheckThen5
  %loadRefTypeBeforeSave = load %i32arrarr, %i32arrarr* %newArrayResult4, align 8
  store %i32arrarr %loadRefTypeBeforeSave, %i32arrarr* %baseArrPtr, align 8
  br i1 false, label %negativeLenThen6, label %negativeLenCont7

negativeLenThen6:                                 ; preds = %boundsCheckIfcont
  br label %negativeLenCont7

negativeLenCont7:                                 ; preds = %negativeLenThen6, %boundsCheckIfcont
  %newArrayResult8 = alloca %i32arr, align 8
  %11 = call dereferenceable_or_null(180) i8* @calloc(i32 45, i32 4)
  %12 = bitcast i8* %11 to i32*
  call void @i32arr_Constructor(%i32arr* nonnull %newArrayResult8, %i32arr_Vtable_type* nonnull @i32arr_Vtable, i32* %12, i32 45)
  %13 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %14 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %13, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %boundsCheckThen10, label %boundsCheckElse11

boundsCheckThen10:                                ; preds = %negativeLenCont7
  %17 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %18 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %17, i64 0, i32 1
  %baseArrPtr9 = load %i32arrarr*, %i32arrarr** %18, align 8
  br label %boundsCheckIfcont12

boundsCheckElse11:                                ; preds = %negativeLenCont7
  %19 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 5, i32 0, i32 %15)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont12

boundsCheckIfcont12:                              ; preds = %boundsCheckElse11, %boundsCheckThen10
  %20 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr9, i64 0, i32 1
  %baseArrPtr13 = load %i32arr*, %i32arr** %20, align 8
  %21 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %22 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %21, i64 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %boundsCheckThen15, label %boundsCheckElse16

boundsCheckThen15:                                ; preds = %boundsCheckIfcont12
  %25 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %26 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %25, i64 0, i32 1
  %baseArrPtr14 = load %i32arrarr*, %i32arrarr** %26, align 8
  br label %boundsCheckIfcont17

boundsCheckElse16:                                ; preds = %boundsCheckIfcont12
  %27 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 5, i32 0, i32 %23)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont17

boundsCheckIfcont17:                              ; preds = %boundsCheckElse16, %boundsCheckThen15
  %28 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr14, i64 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %boundsCheckThen18, label %boundsCheckElse19

boundsCheckThen18:                                ; preds = %boundsCheckIfcont17
  br label %boundsCheckIfcont20

boundsCheckElse19:                                ; preds = %boundsCheckIfcont17
  %31 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 5, i32 0, i32 %29)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont20

boundsCheckIfcont20:                              ; preds = %boundsCheckElse19, %boundsCheckThen18
  %loadRefTypeBeforeSave21 = load %i32arr, %i32arr* %newArrayResult8, align 8
  store %i32arr %loadRefTypeBeforeSave21, %i32arr* %baseArrPtr13, align 8
  %32 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %33 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %32, i64 0, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %34)
  %36 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %37 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %36, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp sgt i32 %38, 0
  br i1 %39, label %boundsCheckThen23, label %boundsCheckElse24

boundsCheckThen23:                                ; preds = %boundsCheckIfcont20
  %40 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %41 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %40, i64 0, i32 1
  %baseArrPtr22 = load %i32arrarr*, %i32arrarr** %41, align 8
  br label %boundsCheckIfcont25

boundsCheckElse24:                                ; preds = %boundsCheckIfcont20
  %42 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 7, i32 0, i32 %38)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont25

boundsCheckIfcont25:                              ; preds = %boundsCheckElse24, %boundsCheckThen23
  %43 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr22, i64 0, i32 2
  %44 = load i32, i32* %43, align 4
  %45 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %44)
  %46 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %47 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %46, i64 0, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = icmp sgt i32 %48, 0
  br i1 %49, label %boundsCheckThen27, label %boundsCheckElse28

boundsCheckThen27:                                ; preds = %boundsCheckIfcont25
  %50 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %51 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %50, i64 0, i32 1
  %baseArrPtr26 = load %i32arrarr*, %i32arrarr** %51, align 8
  br label %boundsCheckIfcont29

boundsCheckElse28:                                ; preds = %boundsCheckIfcont25
  %52 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 8, i32 0, i32 %48)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont29

boundsCheckIfcont29:                              ; preds = %boundsCheckElse28, %boundsCheckThen27
  %53 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr26, i64 0, i32 1
  %baseArrPtr30 = load %i32arr*, %i32arr** %53, align 8
  %54 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %55 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %54, i64 0, i32 2
  %56 = load i32, i32* %55, align 4
  %57 = icmp sgt i32 %56, 0
  br i1 %57, label %boundsCheckThen32, label %boundsCheckElse33

boundsCheckThen32:                                ; preds = %boundsCheckIfcont29
  %58 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %59 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %58, i64 0, i32 1
  %baseArrPtr31 = load %i32arrarr*, %i32arrarr** %59, align 8
  br label %boundsCheckIfcont34

boundsCheckElse33:                                ; preds = %boundsCheckIfcont29
  %60 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 8, i32 0, i32 %56)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont34

boundsCheckIfcont34:                              ; preds = %boundsCheckElse33, %boundsCheckThen32
  %61 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr31, i64 0, i32 2
  %62 = load i32, i32* %61, align 4
  %63 = icmp sgt i32 %62, 0
  br i1 %63, label %boundsCheckThen35, label %boundsCheckElse36

boundsCheckThen35:                                ; preds = %boundsCheckIfcont34
  br label %boundsCheckIfcont37

boundsCheckElse36:                                ; preds = %boundsCheckIfcont34
  %64 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 8, i32 0, i32 %62)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont37

boundsCheckIfcont37:                              ; preds = %boundsCheckElse36, %boundsCheckThen35
  %65 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr30, i64 0, i32 2
  %66 = load i32, i32* %65, align 4
  %67 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %66)
  %68 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %69 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %68, i64 0, i32 2
  %70 = load i32, i32* %69, align 4
  %71 = icmp sgt i32 %70, 1
  br i1 %71, label %boundsCheckThen39, label %boundsCheckElse40

boundsCheckThen39:                                ; preds = %boundsCheckIfcont37
  %72 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %73 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %72, i64 0, i32 1
  %baseArrPtr38 = load %i32arrarr*, %i32arrarr** %73, align 8
  br label %boundsCheckIfcont41

boundsCheckElse40:                                ; preds = %boundsCheckIfcont37
  %74 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 9, i32 1, i32 %70)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont41

boundsCheckIfcont41:                              ; preds = %boundsCheckElse40, %boundsCheckThen39
  %75 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr38, i64 1, i32 2
  %76 = load i32, i32* %75, align 4
  %77 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %76)
  %78 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %79 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %78, i64 0, i32 2
  %80 = load i32, i32* %79, align 4
  %81 = icmp sgt i32 %80, 1
  br i1 %81, label %boundsCheckThen43, label %boundsCheckElse44

boundsCheckThen43:                                ; preds = %boundsCheckIfcont41
  %82 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %83 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %82, i64 0, i32 1
  %baseArrPtr42 = load %i32arrarr*, %i32arrarr** %83, align 8
  br label %boundsCheckIfcont45

boundsCheckElse44:                                ; preds = %boundsCheckIfcont41
  %84 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 10, i32 1, i32 %80)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont45

boundsCheckIfcont45:                              ; preds = %boundsCheckElse44, %boundsCheckThen43
  %85 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr42, i64 1, i32 1
  %baseArrPtr46 = load %i32arr*, %i32arr** %85, align 8
  %86 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %87 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %86, i64 0, i32 2
  %88 = load i32, i32* %87, align 4
  %89 = icmp sgt i32 %88, 1
  br i1 %89, label %boundsCheckThen48, label %boundsCheckElse49

boundsCheckThen48:                                ; preds = %boundsCheckIfcont45
  %90 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %91 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %90, i64 0, i32 1
  %baseArrPtr47 = load %i32arrarr*, %i32arrarr** %91, align 8
  br label %boundsCheckIfcont50

boundsCheckElse49:                                ; preds = %boundsCheckIfcont45
  %92 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 10, i32 1, i32 %88)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont50

boundsCheckIfcont50:                              ; preds = %boundsCheckElse49, %boundsCheckThen48
  %93 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr47, i64 1, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp sgt i32 %94, 0
  br i1 %95, label %boundsCheckThen51, label %boundsCheckElse52

boundsCheckThen51:                                ; preds = %boundsCheckIfcont50
  br label %boundsCheckIfcont53

boundsCheckElse52:                                ; preds = %boundsCheckIfcont50
  %96 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([64 x i8], [64 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 10, i32 0, i32 %94)
  call void @exit(i32 -1)
  br label %boundsCheckIfcont53

boundsCheckIfcont53:                              ; preds = %boundsCheckElse52, %boundsCheckThen51
  %97 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr46, i64 0, i32 2
  %98 = load i32, i32* %97, align 4
  %99 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %98)
  ret i32 0
}
