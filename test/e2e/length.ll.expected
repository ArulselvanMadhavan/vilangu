; ModuleID = 'Module'
source_filename = "Module"
target triple = "x86_64-pc-linux-gnu"

%Object_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arr_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arrarr_Vtable_type = type { %Object_Vtable_type*, i8* }
%i32arrarrarr_Vtable_type = type { %Object_Vtable_type*, i8* }
%Object = type { %Object_Vtable_type* }
%i32arr = type { %i32arr_Vtable_type*, i32*, i32 }
%i32arrarr = type { %i32arrarr_Vtable_type*, %i32arr*, i32 }
%i32arrarrarr = type { %i32arrarrarr_Vtable_type*, %i32arrarr*, i32 }

@printIntFormat = private constant [4 x i8] c"%d\0A\00", align 1
@castErrFormat = private constant [38 x i8] c"Narrow cast err: %s is not a type %s\0A\00", align 1
@outOfBoundsFormat = private constant [72 x i8] c"Line: %d | Array out of bounds exception at line. Index:%d | Length:%d\0A\00", align 1
@negativeLenFormat = private constant [62 x i8] c"Line: %d | Array len cannot be negative. Length attempted:%d\0A\00", align 1
@Object_class_name = private constant [7 x i8] c"Object\00", align 1
@Object_Vtable = global %Object_Vtable_type { %Object_Vtable_type* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @Object_class_name, i32 0, i32 0) }
@i32arr_class_name = private constant [7 x i8] c"i32arr\00", align 1
@i32arr_Vtable = global %i32arr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @i32arr_class_name, i32 0, i32 0) }
@i32arrarr_class_name = private constant [10 x i8] c"i32arrarr\00", align 1
@i32arrarr_Vtable = global %i32arrarr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @i32arrarr_class_name, i32 0, i32 0) }
@i32arrarrarr_class_name = private constant [13 x i8] c"i32arrarrarr\00", align 1
@i32arrarrarr_Vtable = global %i32arrarrarr_Vtable_type { %Object_Vtable_type* @Object_Vtable, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @i32arrarrarr_class_name, i32 0, i32 0) }

declare i32 @printf(i8*, ...)

declare i8* @malloc(i32)

declare i8* @calloc(i32, i32)

declare void @free(i8*)

declare void @exit(i32)

define i1 @Object_IsA(%Object* %0, %Object_Vtable_type* %1, i8* %2) {
entry:
  %object = alloca %Object*, align 8
  store %Object* %0, %Object** %object, align 8
  %vtbl = alloca %Object_Vtable_type*, align 8
  store %Object_Vtable_type* %1, %Object_Vtable_type** %vtbl, align 8
  %name = alloca i8*, align 8
  store i8* %2, i8** %name, align 8
  %3 = load %Object*, %Object** %object, align 8
  %4 = ptrtoint %Object* %3 to i64
  %equal = icmp eq i64 %4, 0
  %not = xor i1 %equal, true
  br i1 %not, label %then, label %else7

then:                                             ; preds = %entry
  %5 = load %Object*, %Object** %object, align 8
  %6 = getelementptr inbounds %Object, %Object* %5, i32 0, i32 0
  %7 = load %Object_Vtable_type*, %Object_Vtable_type** %6, align 8
  store %Object_Vtable_type* %7, %Object_Vtable_type** %vtbl, align 8
  br label %loopcond

loopcond:                                         ; preds = %ifcont, %then
  %8 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %9 = ptrtoint %Object_Vtable_type* %8 to i64
  %equal1 = icmp eq i64 %9, 0
  %not2 = xor i1 %equal1, true
  br i1 %not2, label %loop, label %loopend

loop:                                             ; preds = %loopcond
  %10 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %11 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %10, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = load i8*, i8** %name, align 8
  %14 = ptrtoint i8* %12 to i64
  %15 = ptrtoint i8* %13 to i64
  %equal3 = icmp eq i64 %14, %15
  br i1 %equal3, label %then4, label %else

then4:                                            ; preds = %loop
  br label %loopend

else:                                             ; preds = %loop
  %16 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %17 = getelementptr inbounds %Object_Vtable_type, %Object_Vtable_type* %16, i32 0, i32 0
  %18 = load %Object_Vtable_type*, %Object_Vtable_type** %17, align 8
  store %Object_Vtable_type* %18, %Object_Vtable_type** %vtbl, align 8
  br label %ifcont

ifcont:                                           ; preds = %else
  br label %loopcond

loopend:                                          ; preds = %then4, %loopcond
  %19 = load %Object_Vtable_type*, %Object_Vtable_type** %vtbl, align 8
  %20 = ptrtoint %Object_Vtable_type* %19 to i64
  %equal5 = icmp eq i64 %20, 0
  %not6 = xor i1 %equal5, true
  br label %ifcont8

else7:                                            ; preds = %entry
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %loopend
  %iftmp = phi i1 [ %not6, %loopend ], [ false, %else7 ]
  ret i1 %iftmp
}

define void @i32arr_Constructor(%i32arr* %0, %i32arr_Vtable_type* %1, i32* %2, i32 %3) {
entry:
  %this = alloca %i32arr*, align 8
  store %i32arr* %0, %i32arr** %this, align 8
  %vtable = alloca %i32arr_Vtable_type*, align 8
  store %i32arr_Vtable_type* %1, %i32arr_Vtable_type** %vtable, align 8
  %data = alloca i32*, align 8
  store i32* %2, i32** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arr_Vtable_type*, %i32arr_Vtable_type** %vtable, align 8
  %5 = load %i32arr*, %i32arr** %this, align 8
  %6 = getelementptr inbounds %i32arr, %i32arr* %5, i32 0, i32 0
  store %i32arr_Vtable_type* %4, %i32arr_Vtable_type** %6, align 8
  %7 = load i32*, i32** %data, align 8
  %8 = load %i32arr*, %i32arr** %this, align 8
  %9 = getelementptr inbounds %i32arr, %i32arr* %8, i32 0, i32 1
  store i32* %7, i32** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arr*, %i32arr** %this, align 8
  %12 = getelementptr inbounds %i32arr, %i32arr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define void @i32arrarr_Constructor(%i32arrarr* %0, %i32arrarr_Vtable_type* %1, %i32arr* %2, i32 %3) {
entry:
  %this = alloca %i32arrarr*, align 8
  store %i32arrarr* %0, %i32arrarr** %this, align 8
  %vtable = alloca %i32arrarr_Vtable_type*, align 8
  store %i32arrarr_Vtable_type* %1, %i32arrarr_Vtable_type** %vtable, align 8
  %data = alloca %i32arr*, align 8
  store %i32arr* %2, %i32arr** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arrarr_Vtable_type*, %i32arrarr_Vtable_type** %vtable, align 8
  %5 = load %i32arrarr*, %i32arrarr** %this, align 8
  %6 = getelementptr inbounds %i32arrarr, %i32arrarr* %5, i32 0, i32 0
  store %i32arrarr_Vtable_type* %4, %i32arrarr_Vtable_type** %6, align 8
  %7 = load %i32arr*, %i32arr** %data, align 8
  %8 = load %i32arrarr*, %i32arrarr** %this, align 8
  %9 = getelementptr inbounds %i32arrarr, %i32arrarr* %8, i32 0, i32 1
  store %i32arr* %7, %i32arr** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arrarr*, %i32arrarr** %this, align 8
  %12 = getelementptr inbounds %i32arrarr, %i32arrarr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define void @i32arrarrarr_Constructor(%i32arrarrarr* %0, %i32arrarrarr_Vtable_type* %1, %i32arrarr* %2, i32 %3) {
entry:
  %this = alloca %i32arrarrarr*, align 8
  store %i32arrarrarr* %0, %i32arrarrarr** %this, align 8
  %vtable = alloca %i32arrarrarr_Vtable_type*, align 8
  store %i32arrarrarr_Vtable_type* %1, %i32arrarrarr_Vtable_type** %vtable, align 8
  %data = alloca %i32arrarr*, align 8
  store %i32arrarr* %2, %i32arrarr** %data, align 8
  %length = alloca i32, align 4
  store i32 %3, i32* %length, align 4
  %4 = load %i32arrarrarr_Vtable_type*, %i32arrarrarr_Vtable_type** %vtable, align 8
  %5 = load %i32arrarrarr*, %i32arrarrarr** %this, align 8
  %6 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %5, i32 0, i32 0
  store %i32arrarrarr_Vtable_type* %4, %i32arrarrarr_Vtable_type** %6, align 8
  %7 = load %i32arrarr*, %i32arrarr** %data, align 8
  %8 = load %i32arrarrarr*, %i32arrarrarr** %this, align 8
  %9 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %8, i32 0, i32 1
  store %i32arrarr* %7, %i32arrarr** %9, align 8
  %10 = load i32, i32* %length, align 4
  %11 = load %i32arrarrarr*, %i32arrarrarr** %this, align 8
  %12 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 4
  ret void
}

define i32 @main() {
entry:
  %a = alloca %i32arrarrarr*, align 8
  store %i32arrarrarr* null, %i32arrarrarr** %a, align 8
  br i1 false, label %negativeLenThen1, label %negativeLenCont

negativeLenThen1:                                 ; preds = %entry
  br label %negativeLenCont

negativeLenCont:                                  ; preds = %negativeLenThen1, %entry
  %newArrayResult = alloca %i32arrarrarr, align 8
  %0 = call dereferenceable_or_null(120) i8* @calloc(i32 5, i32 24)
  %1 = bitcast i8* %0 to %i32arrarr*
  call void @i32arrarrarr_Constructor(%i32arrarrarr* nonnull %newArrayResult, %i32arrarrarr_Vtable_type* nonnull @i32arrarrarr_Vtable, %i32arrarr* %1, i32 5)
  store %i32arrarrarr* %newArrayResult, %i32arrarrarr** %a, align 8
  br i1 false, label %negativeLenThen2, label %negativeLenCont3

negativeLenThen2:                                 ; preds = %negativeLenCont
  br label %negativeLenCont3

negativeLenCont3:                                 ; preds = %negativeLenThen2, %negativeLenCont
  %newArrayResult4 = alloca %i32arrarr, align 8
  %2 = call dereferenceable_or_null(511992) i8* @calloc(i32 21333, i32 24)
  %3 = bitcast i8* %2 to %i32arr*
  call void @i32arrarr_Constructor(%i32arrarr* nonnull %newArrayResult4, %i32arrarr_Vtable_type* nonnull @i32arrarr_Vtable, %i32arr* %3, i32 21333)
  %4 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %5 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %4, i64 0, i32 1
  %baseArrPtr = load %i32arrarr*, %i32arrarr** %5, align 8
  %6 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %4, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %7, 1
  br i1 %8, label %boundsCheckThen5, label %boundsCheckElse

boundsCheckThen5:                                 ; preds = %negativeLenCont3
  %9 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 4, i32 0, i32 %7)
  call void @exit(i32 -1)
  br label %boundsCheckElse

boundsCheckElse:                                  ; preds = %boundsCheckThen5, %negativeLenCont3
  %loadRefTypeBeforeSave = load %i32arrarr, %i32arrarr* %newArrayResult4, align 8
  store %i32arrarr %loadRefTypeBeforeSave, %i32arrarr* %baseArrPtr, align 8
  br i1 false, label %negativeLenThen6, label %negativeLenCont7

negativeLenThen6:                                 ; preds = %boundsCheckElse
  br label %negativeLenCont7

negativeLenCont7:                                 ; preds = %negativeLenThen6, %boundsCheckElse
  %newArrayResult8 = alloca %i32arr, align 8
  %10 = call dereferenceable_or_null(180) i8* @calloc(i32 45, i32 4)
  %11 = bitcast i8* %10 to i32*
  call void @i32arr_Constructor(%i32arr* nonnull %newArrayResult8, %i32arr_Vtable_type* nonnull @i32arr_Vtable, i32* %11, i32 45)
  %12 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %13 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %12, i64 0, i32 1
  %baseArrPtr9 = load %i32arrarr*, %i32arrarr** %13, align 8
  %14 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %12, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %15, 1
  br i1 %16, label %boundsCheckThen10, label %boundsCheckElse11

boundsCheckThen10:                                ; preds = %negativeLenCont7
  %17 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 5, i32 0, i32 %15)
  call void @exit(i32 -1)
  br label %boundsCheckElse11

boundsCheckElse11:                                ; preds = %boundsCheckThen10, %negativeLenCont7
  %18 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr9, i64 0, i32 1
  %baseArrPtr12 = load %i32arr*, %i32arr** %18, align 8
  %19 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %20 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %19, i64 0, i32 1
  %baseArrPtr13 = load %i32arrarr*, %i32arrarr** %20, align 8
  %21 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %19, i64 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 1
  br i1 %23, label %boundsCheckThen14, label %boundsCheckElse15

boundsCheckThen14:                                ; preds = %boundsCheckElse11
  %24 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 5, i32 0, i32 %22)
  call void @exit(i32 -1)
  br label %boundsCheckElse15

boundsCheckElse15:                                ; preds = %boundsCheckThen14, %boundsCheckElse11
  %25 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr13, i64 0, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, 1
  br i1 %27, label %boundsCheckThen16, label %boundsCheckElse17

boundsCheckThen16:                                ; preds = %boundsCheckElse15
  %28 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 5, i32 0, i32 %26)
  call void @exit(i32 -1)
  br label %boundsCheckElse17

boundsCheckElse17:                                ; preds = %boundsCheckThen16, %boundsCheckElse15
  %loadRefTypeBeforeSave18 = load %i32arr, %i32arr* %newArrayResult8, align 8
  store %i32arr %loadRefTypeBeforeSave18, %i32arr* %baseArrPtr12, align 8
  %29 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %30 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %29, i64 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %31)
  %33 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %29, i64 0, i32 1
  %baseArrPtr19 = load %i32arrarr*, %i32arrarr** %33, align 8
  %34 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %29, i64 0, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = icmp slt i32 %35, 1
  br i1 %36, label %boundsCheckThen20, label %boundsCheckElse21

boundsCheckThen20:                                ; preds = %boundsCheckElse17
  %37 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 7, i32 0, i32 %35)
  call void @exit(i32 -1)
  br label %boundsCheckElse21

boundsCheckElse21:                                ; preds = %boundsCheckThen20, %boundsCheckElse17
  %38 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr19, i64 0, i32 2
  %39 = load i32, i32* %38, align 4
  %40 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %39)
  %41 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %42 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %41, i64 0, i32 1
  %baseArrPtr22 = load %i32arrarr*, %i32arrarr** %42, align 8
  %43 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %41, i64 0, i32 2
  %44 = load i32, i32* %43, align 4
  %45 = icmp slt i32 %44, 1
  br i1 %45, label %boundsCheckThen23, label %boundsCheckElse24

boundsCheckThen23:                                ; preds = %boundsCheckElse21
  %46 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 8, i32 0, i32 %44)
  call void @exit(i32 -1)
  br label %boundsCheckElse24

boundsCheckElse24:                                ; preds = %boundsCheckThen23, %boundsCheckElse21
  %47 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr22, i64 0, i32 1
  %baseArrPtr25 = load %i32arr*, %i32arr** %47, align 8
  %48 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %49 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %48, i64 0, i32 1
  %baseArrPtr26 = load %i32arrarr*, %i32arrarr** %49, align 8
  %50 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %48, i64 0, i32 2
  %51 = load i32, i32* %50, align 4
  %52 = icmp slt i32 %51, 1
  br i1 %52, label %boundsCheckThen27, label %boundsCheckElse28

boundsCheckThen27:                                ; preds = %boundsCheckElse24
  %53 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 8, i32 0, i32 %51)
  call void @exit(i32 -1)
  br label %boundsCheckElse28

boundsCheckElse28:                                ; preds = %boundsCheckThen27, %boundsCheckElse24
  %54 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr26, i64 0, i32 2
  %55 = load i32, i32* %54, align 4
  %56 = icmp slt i32 %55, 1
  br i1 %56, label %boundsCheckThen29, label %boundsCheckElse30

boundsCheckThen29:                                ; preds = %boundsCheckElse28
  %57 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 8, i32 0, i32 %55)
  call void @exit(i32 -1)
  br label %boundsCheckElse30

boundsCheckElse30:                                ; preds = %boundsCheckThen29, %boundsCheckElse28
  %58 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr25, i64 0, i32 2
  %59 = load i32, i32* %58, align 4
  %60 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %59)
  %61 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %62 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %61, i64 0, i32 1
  %baseArrPtr31 = load %i32arrarr*, %i32arrarr** %62, align 8
  %63 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %61, i64 0, i32 2
  %64 = load i32, i32* %63, align 4
  %65 = icmp slt i32 %64, 2
  br i1 %65, label %boundsCheckThen32, label %boundsCheckElse33

boundsCheckThen32:                                ; preds = %boundsCheckElse30
  %66 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 9, i32 1, i32 %64)
  call void @exit(i32 -1)
  br label %boundsCheckElse33

boundsCheckElse33:                                ; preds = %boundsCheckThen32, %boundsCheckElse30
  %67 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr31, i64 1, i32 2
  %68 = load i32, i32* %67, align 4
  %69 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %68)
  %70 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %71 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %70, i64 0, i32 1
  %baseArrPtr34 = load %i32arrarr*, %i32arrarr** %71, align 8
  %72 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %70, i64 0, i32 2
  %73 = load i32, i32* %72, align 4
  %74 = icmp slt i32 %73, 2
  br i1 %74, label %boundsCheckThen35, label %boundsCheckElse36

boundsCheckThen35:                                ; preds = %boundsCheckElse33
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 10, i32 1, i32 %73)
  call void @exit(i32 -1)
  br label %boundsCheckElse36

boundsCheckElse36:                                ; preds = %boundsCheckThen35, %boundsCheckElse33
  %76 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr34, i64 1, i32 1
  %baseArrPtr37 = load %i32arr*, %i32arr** %76, align 8
  %77 = load %i32arrarrarr*, %i32arrarrarr** %a, align 8
  %78 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %77, i64 0, i32 1
  %baseArrPtr38 = load %i32arrarr*, %i32arrarr** %78, align 8
  %79 = getelementptr inbounds %i32arrarrarr, %i32arrarrarr* %77, i64 0, i32 2
  %80 = load i32, i32* %79, align 4
  %81 = icmp slt i32 %80, 2
  br i1 %81, label %boundsCheckThen39, label %boundsCheckElse40

boundsCheckThen39:                                ; preds = %boundsCheckElse36
  %82 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 10, i32 1, i32 %80)
  call void @exit(i32 -1)
  br label %boundsCheckElse40

boundsCheckElse40:                                ; preds = %boundsCheckThen39, %boundsCheckElse36
  %83 = getelementptr inbounds %i32arrarr, %i32arrarr* %baseArrPtr38, i64 1, i32 2
  %84 = load i32, i32* %83, align 4
  %85 = icmp slt i32 %84, 1
  br i1 %85, label %boundsCheckThen41, label %boundsCheckElse42

boundsCheckThen41:                                ; preds = %boundsCheckElse40
  %86 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([72 x i8], [72 x i8]* @outOfBoundsFormat, i64 0, i64 0), i32 10, i32 0, i32 %84)
  call void @exit(i32 -1)
  br label %boundsCheckElse42

boundsCheckElse42:                                ; preds = %boundsCheckThen41, %boundsCheckElse40
  %87 = getelementptr inbounds %i32arr, %i32arr* %baseArrPtr37, i64 0, i32 2
  %88 = load i32, i32* %87, align 4
  %89 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @printIntFormat, i64 0, i64 0), i32 %88)
  ret i32 0
}
