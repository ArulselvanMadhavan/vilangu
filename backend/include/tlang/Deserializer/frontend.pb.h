// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frontend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frontend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frontend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frontend_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frontend_2eproto;
namespace Frontend_ir {
class Bin_op;
class Bin_opDefaultTypeInternal;
extern Bin_opDefaultTypeInternal _Bin_op_default_instance_;
class Bin_op__PlusOp;
class Bin_op__PlusOpDefaultTypeInternal;
extern Bin_op__PlusOpDefaultTypeInternal _Bin_op__PlusOp_default_instance_;
class Expr;
class ExprDefaultTypeInternal;
extern ExprDefaultTypeInternal _Expr_default_instance_;
class Expr__Assign;
class Expr__AssignDefaultTypeInternal;
extern Expr__AssignDefaultTypeInternal _Expr__Assign_default_instance_;
class Expr__Binop;
class Expr__BinopDefaultTypeInternal;
extern Expr__BinopDefaultTypeInternal _Expr__Binop_default_instance_;
class Expr__FunctionApp;
class Expr__FunctionAppDefaultTypeInternal;
extern Expr__FunctionAppDefaultTypeInternal _Expr__FunctionApp_default_instance_;
class Expr__Printf;
class Expr__PrintfDefaultTypeInternal;
extern Expr__PrintfDefaultTypeInternal _Expr__Printf_default_instance_;
class Expr__Unop;
class Expr__UnopDefaultTypeInternal;
extern Expr__UnopDefaultTypeInternal _Expr__Unop_default_instance_;
class Expr__VarDecl;
class Expr__VarDeclDefaultTypeInternal;
extern Expr__VarDeclDefaultTypeInternal _Expr__VarDecl_default_instance_;
class Identifier;
class IdentifierDefaultTypeInternal;
extern IdentifierDefaultTypeInternal _Identifier_default_instance_;
class Identifier__Var;
class Identifier__VarDefaultTypeInternal;
extern Identifier__VarDefaultTypeInternal _Identifier__Var_default_instance_;
class Program;
class ProgramDefaultTypeInternal;
extern ProgramDefaultTypeInternal _Program_default_instance_;
class Un_op;
class Un_opDefaultTypeInternal;
extern Un_opDefaultTypeInternal _Un_op_default_instance_;
class Un_op__NegOp;
class Un_op__NegOpDefaultTypeInternal;
extern Un_op__NegOpDefaultTypeInternal _Un_op__NegOp_default_instance_;
class Un_op__NotOp;
class Un_op__NotOpDefaultTypeInternal;
extern Un_op__NotOpDefaultTypeInternal _Un_op__NotOp_default_instance_;
}  // namespace Frontend_ir
PROTOBUF_NAMESPACE_OPEN
template<> ::Frontend_ir::Bin_op* Arena::CreateMaybeMessage<::Frontend_ir::Bin_op>(Arena*);
template<> ::Frontend_ir::Bin_op__PlusOp* Arena::CreateMaybeMessage<::Frontend_ir::Bin_op__PlusOp>(Arena*);
template<> ::Frontend_ir::Expr* Arena::CreateMaybeMessage<::Frontend_ir::Expr>(Arena*);
template<> ::Frontend_ir::Expr__Assign* Arena::CreateMaybeMessage<::Frontend_ir::Expr__Assign>(Arena*);
template<> ::Frontend_ir::Expr__Binop* Arena::CreateMaybeMessage<::Frontend_ir::Expr__Binop>(Arena*);
template<> ::Frontend_ir::Expr__FunctionApp* Arena::CreateMaybeMessage<::Frontend_ir::Expr__FunctionApp>(Arena*);
template<> ::Frontend_ir::Expr__Printf* Arena::CreateMaybeMessage<::Frontend_ir::Expr__Printf>(Arena*);
template<> ::Frontend_ir::Expr__Unop* Arena::CreateMaybeMessage<::Frontend_ir::Expr__Unop>(Arena*);
template<> ::Frontend_ir::Expr__VarDecl* Arena::CreateMaybeMessage<::Frontend_ir::Expr__VarDecl>(Arena*);
template<> ::Frontend_ir::Identifier* Arena::CreateMaybeMessage<::Frontend_ir::Identifier>(Arena*);
template<> ::Frontend_ir::Identifier__Var* Arena::CreateMaybeMessage<::Frontend_ir::Identifier__Var>(Arena*);
template<> ::Frontend_ir::Program* Arena::CreateMaybeMessage<::Frontend_ir::Program>(Arena*);
template<> ::Frontend_ir::Un_op* Arena::CreateMaybeMessage<::Frontend_ir::Un_op>(Arena*);
template<> ::Frontend_ir::Un_op__NegOp* Arena::CreateMaybeMessage<::Frontend_ir::Un_op__NegOp>(Arena*);
template<> ::Frontend_ir::Un_op__NotOp* Arena::CreateMaybeMessage<::Frontend_ir::Un_op__NotOp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Frontend_ir {

// ===================================================================

class Un_op__NotOp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Un_op._NotOp) */ {
 public:
  inline Un_op__NotOp() : Un_op__NotOp(nullptr) {};
  virtual ~Un_op__NotOp();

  Un_op__NotOp(const Un_op__NotOp& from);
  Un_op__NotOp(Un_op__NotOp&& from) noexcept
    : Un_op__NotOp() {
    *this = ::std::move(from);
  }

  inline Un_op__NotOp& operator=(const Un_op__NotOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Un_op__NotOp& operator=(Un_op__NotOp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Un_op__NotOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Un_op__NotOp* internal_default_instance() {
    return reinterpret_cast<const Un_op__NotOp*>(
               &_Un_op__NotOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Un_op__NotOp& a, Un_op__NotOp& b) {
    a.Swap(&b);
  }
  inline void Swap(Un_op__NotOp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Un_op__NotOp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Un_op__NotOp* New() const final {
    return CreateMaybeMessage<Un_op__NotOp>(nullptr);
  }

  Un_op__NotOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Un_op__NotOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Un_op__NotOp& from);
  void MergeFrom(const Un_op__NotOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Un_op__NotOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Un_op._NotOp";
  }
  protected:
  explicit Un_op__NotOp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Frontend_ir.Un_op._NotOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_2eproto;
};
// -------------------------------------------------------------------

class Un_op__NegOp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Un_op._NegOp) */ {
 public:
  inline Un_op__NegOp() : Un_op__NegOp(nullptr) {};
  virtual ~Un_op__NegOp();

  Un_op__NegOp(const Un_op__NegOp& from);
  Un_op__NegOp(Un_op__NegOp&& from) noexcept
    : Un_op__NegOp() {
    *this = ::std::move(from);
  }

  inline Un_op__NegOp& operator=(const Un_op__NegOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Un_op__NegOp& operator=(Un_op__NegOp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Un_op__NegOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Un_op__NegOp* internal_default_instance() {
    return reinterpret_cast<const Un_op__NegOp*>(
               &_Un_op__NegOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Un_op__NegOp& a, Un_op__NegOp& b) {
    a.Swap(&b);
  }
  inline void Swap(Un_op__NegOp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Un_op__NegOp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Un_op__NegOp* New() const final {
    return CreateMaybeMessage<Un_op__NegOp>(nullptr);
  }

  Un_op__NegOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Un_op__NegOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Un_op__NegOp& from);
  void MergeFrom(const Un_op__NegOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Un_op__NegOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Un_op._NegOp";
  }
  protected:
  explicit Un_op__NegOp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Frontend_ir.Un_op._NegOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_2eproto;
};
// -------------------------------------------------------------------

class Un_op PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Un_op) */ {
 public:
  inline Un_op() : Un_op(nullptr) {};
  virtual ~Un_op();

  Un_op(const Un_op& from);
  Un_op(Un_op&& from) noexcept
    : Un_op() {
    *this = ::std::move(from);
  }

  inline Un_op& operator=(const Un_op& from) {
    CopyFrom(from);
    return *this;
  }
  inline Un_op& operator=(Un_op&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Un_op& default_instance();

  enum ValueCase {
    kNot = 1,
    kNeg = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Un_op* internal_default_instance() {
    return reinterpret_cast<const Un_op*>(
               &_Un_op_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Un_op& a, Un_op& b) {
    a.Swap(&b);
  }
  inline void Swap(Un_op* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Un_op* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Un_op* New() const final {
    return CreateMaybeMessage<Un_op>(nullptr);
  }

  Un_op* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Un_op>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Un_op& from);
  void MergeFrom(const Un_op& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Un_op* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Un_op";
  }
  protected:
  explicit Un_op(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Un_op__NotOp _NotOp;
  typedef Un_op__NegOp _NegOp;

  // accessors -------------------------------------------------------

  enum : int {
    kNotFieldNumber = 1,
    kNegFieldNumber = 2,
  };
  // .Frontend_ir.Un_op._NotOp not = 1;
  bool has_not_() const;
  private:
  bool _internal_has_not_() const;
  public:
  void clear_not_();
  const ::Frontend_ir::Un_op__NotOp& not_() const;
  ::Frontend_ir::Un_op__NotOp* release_not_();
  ::Frontend_ir::Un_op__NotOp* mutable_not_();
  void set_allocated_not_(::Frontend_ir::Un_op__NotOp* not_);
  private:
  const ::Frontend_ir::Un_op__NotOp& _internal_not_() const;
  ::Frontend_ir::Un_op__NotOp* _internal_mutable_not_();
  public:
  void unsafe_arena_set_allocated_not_(
      ::Frontend_ir::Un_op__NotOp* not_);
  ::Frontend_ir::Un_op__NotOp* unsafe_arena_release_not_();

  // .Frontend_ir.Un_op._NegOp neg = 2;
  bool has_neg() const;
  private:
  bool _internal_has_neg() const;
  public:
  void clear_neg();
  const ::Frontend_ir::Un_op__NegOp& neg() const;
  ::Frontend_ir::Un_op__NegOp* release_neg();
  ::Frontend_ir::Un_op__NegOp* mutable_neg();
  void set_allocated_neg(::Frontend_ir::Un_op__NegOp* neg);
  private:
  const ::Frontend_ir::Un_op__NegOp& _internal_neg() const;
  ::Frontend_ir::Un_op__NegOp* _internal_mutable_neg();
  public:
  void unsafe_arena_set_allocated_neg(
      ::Frontend_ir::Un_op__NegOp* neg);
  ::Frontend_ir::Un_op__NegOp* unsafe_arena_release_neg();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:Frontend_ir.Un_op)
 private:
  class _Internal;
  void set_has_not_();
  void set_has_neg();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    ValueUnion() {}
    ::Frontend_ir::Un_op__NotOp* not__;
    ::Frontend_ir::Un_op__NegOp* neg_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frontend_2eproto;
};
// -------------------------------------------------------------------

class Bin_op__PlusOp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Bin_op._PlusOp) */ {
 public:
  inline Bin_op__PlusOp() : Bin_op__PlusOp(nullptr) {};
  virtual ~Bin_op__PlusOp();

  Bin_op__PlusOp(const Bin_op__PlusOp& from);
  Bin_op__PlusOp(Bin_op__PlusOp&& from) noexcept
    : Bin_op__PlusOp() {
    *this = ::std::move(from);
  }

  inline Bin_op__PlusOp& operator=(const Bin_op__PlusOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bin_op__PlusOp& operator=(Bin_op__PlusOp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bin_op__PlusOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bin_op__PlusOp* internal_default_instance() {
    return reinterpret_cast<const Bin_op__PlusOp*>(
               &_Bin_op__PlusOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Bin_op__PlusOp& a, Bin_op__PlusOp& b) {
    a.Swap(&b);
  }
  inline void Swap(Bin_op__PlusOp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bin_op__PlusOp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bin_op__PlusOp* New() const final {
    return CreateMaybeMessage<Bin_op__PlusOp>(nullptr);
  }

  Bin_op__PlusOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bin_op__PlusOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bin_op__PlusOp& from);
  void MergeFrom(const Bin_op__PlusOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bin_op__PlusOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Bin_op._PlusOp";
  }
  protected:
  explicit Bin_op__PlusOp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Frontend_ir.Bin_op._PlusOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_2eproto;
};
// -------------------------------------------------------------------

class Bin_op PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Bin_op) */ {
 public:
  inline Bin_op() : Bin_op(nullptr) {};
  virtual ~Bin_op();

  Bin_op(const Bin_op& from);
  Bin_op(Bin_op&& from) noexcept
    : Bin_op() {
    *this = ::std::move(from);
  }

  inline Bin_op& operator=(const Bin_op& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bin_op& operator=(Bin_op&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bin_op& default_instance();

  enum ValueCase {
    kPlus = 1,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bin_op* internal_default_instance() {
    return reinterpret_cast<const Bin_op*>(
               &_Bin_op_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Bin_op& a, Bin_op& b) {
    a.Swap(&b);
  }
  inline void Swap(Bin_op* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bin_op* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bin_op* New() const final {
    return CreateMaybeMessage<Bin_op>(nullptr);
  }

  Bin_op* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bin_op>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bin_op& from);
  void MergeFrom(const Bin_op& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bin_op* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Bin_op";
  }
  protected:
  explicit Bin_op(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Bin_op__PlusOp _PlusOp;

  // accessors -------------------------------------------------------

  enum : int {
    kPlusFieldNumber = 1,
  };
  // .Frontend_ir.Bin_op._PlusOp plus = 1;
  bool has_plus() const;
  private:
  bool _internal_has_plus() const;
  public:
  void clear_plus();
  const ::Frontend_ir::Bin_op__PlusOp& plus() const;
  ::Frontend_ir::Bin_op__PlusOp* release_plus();
  ::Frontend_ir::Bin_op__PlusOp* mutable_plus();
  void set_allocated_plus(::Frontend_ir::Bin_op__PlusOp* plus);
  private:
  const ::Frontend_ir::Bin_op__PlusOp& _internal_plus() const;
  ::Frontend_ir::Bin_op__PlusOp* _internal_mutable_plus();
  public:
  void unsafe_arena_set_allocated_plus(
      ::Frontend_ir::Bin_op__PlusOp* plus);
  ::Frontend_ir::Bin_op__PlusOp* unsafe_arena_release_plus();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:Frontend_ir.Bin_op)
 private:
  class _Internal;
  void set_has_plus();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    ValueUnion() {}
    ::Frontend_ir::Bin_op__PlusOp* plus_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frontend_2eproto;
};
// -------------------------------------------------------------------

class Identifier__Var PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Identifier._Var) */ {
 public:
  inline Identifier__Var() : Identifier__Var(nullptr) {};
  virtual ~Identifier__Var();

  Identifier__Var(const Identifier__Var& from);
  Identifier__Var(Identifier__Var&& from) noexcept
    : Identifier__Var() {
    *this = ::std::move(from);
  }

  inline Identifier__Var& operator=(const Identifier__Var& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identifier__Var& operator=(Identifier__Var&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Identifier__Var& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identifier__Var* internal_default_instance() {
    return reinterpret_cast<const Identifier__Var*>(
               &_Identifier__Var_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Identifier__Var& a, Identifier__Var& b) {
    a.Swap(&b);
  }
  inline void Swap(Identifier__Var* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Identifier__Var* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Identifier__Var* New() const final {
    return CreateMaybeMessage<Identifier__Var>(nullptr);
  }

  Identifier__Var* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Identifier__Var>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Identifier__Var& from);
  void MergeFrom(const Identifier__Var& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identifier__Var* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Identifier._Var";
  }
  protected:
  explicit Identifier__Var(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarNameFieldNumber = 1,
  };
  // required string var_name = 1;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const char* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_var_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_var_name(
      std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // @@protoc_insertion_point(class_scope:Frontend_ir.Identifier._Var)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  friend struct ::TableStruct_frontend_2eproto;
};
// -------------------------------------------------------------------

class Identifier PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Identifier) */ {
 public:
  inline Identifier() : Identifier(nullptr) {};
  virtual ~Identifier();

  Identifier(const Identifier& from);
  Identifier(Identifier&& from) noexcept
    : Identifier() {
    *this = ::std::move(from);
  }

  inline Identifier& operator=(const Identifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identifier& operator=(Identifier&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Identifier& default_instance();

  enum ValueCase {
    kVar = 1,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identifier* internal_default_instance() {
    return reinterpret_cast<const Identifier*>(
               &_Identifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Identifier& a, Identifier& b) {
    a.Swap(&b);
  }
  inline void Swap(Identifier* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Identifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Identifier* New() const final {
    return CreateMaybeMessage<Identifier>(nullptr);
  }

  Identifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Identifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Identifier& from);
  void MergeFrom(const Identifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Identifier";
  }
  protected:
  explicit Identifier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Identifier__Var _Var;

  // accessors -------------------------------------------------------

  enum : int {
    kVarFieldNumber = 1,
  };
  // .Frontend_ir.Identifier._Var var = 1;
  bool has_var() const;
  private:
  bool _internal_has_var() const;
  public:
  void clear_var();
  const ::Frontend_ir::Identifier__Var& var() const;
  ::Frontend_ir::Identifier__Var* release_var();
  ::Frontend_ir::Identifier__Var* mutable_var();
  void set_allocated_var(::Frontend_ir::Identifier__Var* var);
  private:
  const ::Frontend_ir::Identifier__Var& _internal_var() const;
  ::Frontend_ir::Identifier__Var* _internal_mutable_var();
  public:
  void unsafe_arena_set_allocated_var(
      ::Frontend_ir::Identifier__Var* var);
  ::Frontend_ir::Identifier__Var* unsafe_arena_release_var();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:Frontend_ir.Identifier)
 private:
  class _Internal;
  void set_has_var();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    ValueUnion() {}
    ::Frontend_ir::Identifier__Var* var_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frontend_2eproto;
};
// -------------------------------------------------------------------

class Expr__FunctionApp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Expr._FunctionApp) */ {
 public:
  inline Expr__FunctionApp() : Expr__FunctionApp(nullptr) {};
  virtual ~Expr__FunctionApp();

  Expr__FunctionApp(const Expr__FunctionApp& from);
  Expr__FunctionApp(Expr__FunctionApp&& from) noexcept
    : Expr__FunctionApp() {
    *this = ::std::move(from);
  }

  inline Expr__FunctionApp& operator=(const Expr__FunctionApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr__FunctionApp& operator=(Expr__FunctionApp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expr__FunctionApp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expr__FunctionApp* internal_default_instance() {
    return reinterpret_cast<const Expr__FunctionApp*>(
               &_Expr__FunctionApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Expr__FunctionApp& a, Expr__FunctionApp& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr__FunctionApp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr__FunctionApp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expr__FunctionApp* New() const final {
    return CreateMaybeMessage<Expr__FunctionApp>(nullptr);
  }

  Expr__FunctionApp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expr__FunctionApp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expr__FunctionApp& from);
  void MergeFrom(const Expr__FunctionApp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr__FunctionApp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Expr._FunctionApp";
  }
  protected:
  explicit Expr__FunctionApp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .Frontend_ir.Expr args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  ::Frontend_ir::Expr* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >*
      mutable_args();
  private:
  const ::Frontend_ir::Expr& _internal_args(int index) const;
  ::Frontend_ir::Expr* _internal_add_args();
  public:
  const ::Frontend_ir::Expr& args(int index) const;
  ::Frontend_ir::Expr* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >&
      args() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Frontend_ir.Expr._FunctionApp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr > args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_frontend_2eproto;
};
// -------------------------------------------------------------------

class Expr__Printf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Expr._Printf) */ {
 public:
  inline Expr__Printf() : Expr__Printf(nullptr) {};
  virtual ~Expr__Printf();

  Expr__Printf(const Expr__Printf& from);
  Expr__Printf(Expr__Printf&& from) noexcept
    : Expr__Printf() {
    *this = ::std::move(from);
  }

  inline Expr__Printf& operator=(const Expr__Printf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr__Printf& operator=(Expr__Printf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expr__Printf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expr__Printf* internal_default_instance() {
    return reinterpret_cast<const Expr__Printf*>(
               &_Expr__Printf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Expr__Printf& a, Expr__Printf& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr__Printf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr__Printf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expr__Printf* New() const final {
    return CreateMaybeMessage<Expr__Printf>(nullptr);
  }

  Expr__Printf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expr__Printf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expr__Printf& from);
  void MergeFrom(const Expr__Printf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr__Printf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Expr._Printf";
  }
  protected:
  explicit Expr__Printf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFArgsFieldNumber = 2,
    kFormatFieldNumber = 1,
  };
  // repeated .Frontend_ir.Expr f_args = 2;
  int f_args_size() const;
  private:
  int _internal_f_args_size() const;
  public:
  void clear_f_args();
  ::Frontend_ir::Expr* mutable_f_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >*
      mutable_f_args();
  private:
  const ::Frontend_ir::Expr& _internal_f_args(int index) const;
  ::Frontend_ir::Expr* _internal_add_f_args();
  public:
  const ::Frontend_ir::Expr& f_args(int index) const;
  ::Frontend_ir::Expr* add_f_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >&
      f_args() const;

  // required string format = 1;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const std::string& format() const;
  void set_format(const std::string& value);
  void set_format(std::string&& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  std::string* mutable_format();
  std::string* release_format();
  void set_allocated_format(std::string* format);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_format();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_format(
      std::string* format);
  private:
  const std::string& _internal_format() const;
  void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // @@protoc_insertion_point(class_scope:Frontend_ir.Expr._Printf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr > f_args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  friend struct ::TableStruct_frontend_2eproto;
};
// -------------------------------------------------------------------

class Expr__Unop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Expr._Unop) */ {
 public:
  inline Expr__Unop() : Expr__Unop(nullptr) {};
  virtual ~Expr__Unop();

  Expr__Unop(const Expr__Unop& from);
  Expr__Unop(Expr__Unop&& from) noexcept
    : Expr__Unop() {
    *this = ::std::move(from);
  }

  inline Expr__Unop& operator=(const Expr__Unop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr__Unop& operator=(Expr__Unop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expr__Unop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expr__Unop* internal_default_instance() {
    return reinterpret_cast<const Expr__Unop*>(
               &_Expr__Unop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Expr__Unop& a, Expr__Unop& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr__Unop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr__Unop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expr__Unop* New() const final {
    return CreateMaybeMessage<Expr__Unop>(nullptr);
  }

  Expr__Unop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expr__Unop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expr__Unop& from);
  void MergeFrom(const Expr__Unop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr__Unop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Expr._Unop";
  }
  protected:
  explicit Expr__Unop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 1,
    kUexprFieldNumber = 2,
  };
  // required .Frontend_ir.Un_op op = 1;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  const ::Frontend_ir::Un_op& op() const;
  ::Frontend_ir::Un_op* release_op();
  ::Frontend_ir::Un_op* mutable_op();
  void set_allocated_op(::Frontend_ir::Un_op* op);
  private:
  const ::Frontend_ir::Un_op& _internal_op() const;
  ::Frontend_ir::Un_op* _internal_mutable_op();
  public:
  void unsafe_arena_set_allocated_op(
      ::Frontend_ir::Un_op* op);
  ::Frontend_ir::Un_op* unsafe_arena_release_op();

  // required .Frontend_ir.Expr uexpr = 2;
  bool has_uexpr() const;
  private:
  bool _internal_has_uexpr() const;
  public:
  void clear_uexpr();
  const ::Frontend_ir::Expr& uexpr() const;
  ::Frontend_ir::Expr* release_uexpr();
  ::Frontend_ir::Expr* mutable_uexpr();
  void set_allocated_uexpr(::Frontend_ir::Expr* uexpr);
  private:
  const ::Frontend_ir::Expr& _internal_uexpr() const;
  ::Frontend_ir::Expr* _internal_mutable_uexpr();
  public:
  void unsafe_arena_set_allocated_uexpr(
      ::Frontend_ir::Expr* uexpr);
  ::Frontend_ir::Expr* unsafe_arena_release_uexpr();

  // @@protoc_insertion_point(class_scope:Frontend_ir.Expr._Unop)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Frontend_ir::Un_op* op_;
  ::Frontend_ir::Expr* uexpr_;
  friend struct ::TableStruct_frontend_2eproto;
};
// -------------------------------------------------------------------

class Expr__Binop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Expr._Binop) */ {
 public:
  inline Expr__Binop() : Expr__Binop(nullptr) {};
  virtual ~Expr__Binop();

  Expr__Binop(const Expr__Binop& from);
  Expr__Binop(Expr__Binop&& from) noexcept
    : Expr__Binop() {
    *this = ::std::move(from);
  }

  inline Expr__Binop& operator=(const Expr__Binop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr__Binop& operator=(Expr__Binop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expr__Binop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expr__Binop* internal_default_instance() {
    return reinterpret_cast<const Expr__Binop*>(
               &_Expr__Binop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Expr__Binop& a, Expr__Binop& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr__Binop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr__Binop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expr__Binop* New() const final {
    return CreateMaybeMessage<Expr__Binop>(nullptr);
  }

  Expr__Binop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expr__Binop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expr__Binop& from);
  void MergeFrom(const Expr__Binop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr__Binop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Expr._Binop";
  }
  protected:
  explicit Expr__Binop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinOpFieldNumber = 1,
    kLexprFieldNumber = 2,
    kRexprFieldNumber = 3,
  };
  // required .Frontend_ir.Bin_op bin_op = 1;
  bool has_bin_op() const;
  private:
  bool _internal_has_bin_op() const;
  public:
  void clear_bin_op();
  const ::Frontend_ir::Bin_op& bin_op() const;
  ::Frontend_ir::Bin_op* release_bin_op();
  ::Frontend_ir::Bin_op* mutable_bin_op();
  void set_allocated_bin_op(::Frontend_ir::Bin_op* bin_op);
  private:
  const ::Frontend_ir::Bin_op& _internal_bin_op() const;
  ::Frontend_ir::Bin_op* _internal_mutable_bin_op();
  public:
  void unsafe_arena_set_allocated_bin_op(
      ::Frontend_ir::Bin_op* bin_op);
  ::Frontend_ir::Bin_op* unsafe_arena_release_bin_op();

  // required .Frontend_ir.Expr lexpr = 2;
  bool has_lexpr() const;
  private:
  bool _internal_has_lexpr() const;
  public:
  void clear_lexpr();
  const ::Frontend_ir::Expr& lexpr() const;
  ::Frontend_ir::Expr* release_lexpr();
  ::Frontend_ir::Expr* mutable_lexpr();
  void set_allocated_lexpr(::Frontend_ir::Expr* lexpr);
  private:
  const ::Frontend_ir::Expr& _internal_lexpr() const;
  ::Frontend_ir::Expr* _internal_mutable_lexpr();
  public:
  void unsafe_arena_set_allocated_lexpr(
      ::Frontend_ir::Expr* lexpr);
  ::Frontend_ir::Expr* unsafe_arena_release_lexpr();

  // required .Frontend_ir.Expr rexpr = 3;
  bool has_rexpr() const;
  private:
  bool _internal_has_rexpr() const;
  public:
  void clear_rexpr();
  const ::Frontend_ir::Expr& rexpr() const;
  ::Frontend_ir::Expr* release_rexpr();
  ::Frontend_ir::Expr* mutable_rexpr();
  void set_allocated_rexpr(::Frontend_ir::Expr* rexpr);
  private:
  const ::Frontend_ir::Expr& _internal_rexpr() const;
  ::Frontend_ir::Expr* _internal_mutable_rexpr();
  public:
  void unsafe_arena_set_allocated_rexpr(
      ::Frontend_ir::Expr* rexpr);
  ::Frontend_ir::Expr* unsafe_arena_release_rexpr();

  // @@protoc_insertion_point(class_scope:Frontend_ir.Expr._Binop)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Frontend_ir::Bin_op* bin_op_;
  ::Frontend_ir::Expr* lexpr_;
  ::Frontend_ir::Expr* rexpr_;
  friend struct ::TableStruct_frontend_2eproto;
};
// -------------------------------------------------------------------

class Expr__VarDecl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Expr._VarDecl) */ {
 public:
  inline Expr__VarDecl() : Expr__VarDecl(nullptr) {};
  virtual ~Expr__VarDecl();

  Expr__VarDecl(const Expr__VarDecl& from);
  Expr__VarDecl(Expr__VarDecl&& from) noexcept
    : Expr__VarDecl() {
    *this = ::std::move(from);
  }

  inline Expr__VarDecl& operator=(const Expr__VarDecl& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr__VarDecl& operator=(Expr__VarDecl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expr__VarDecl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expr__VarDecl* internal_default_instance() {
    return reinterpret_cast<const Expr__VarDecl*>(
               &_Expr__VarDecl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Expr__VarDecl& a, Expr__VarDecl& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr__VarDecl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr__VarDecl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expr__VarDecl* New() const final {
    return CreateMaybeMessage<Expr__VarDecl>(nullptr);
  }

  Expr__VarDecl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expr__VarDecl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expr__VarDecl& from);
  void MergeFrom(const Expr__VarDecl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr__VarDecl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Expr._VarDecl";
  }
  protected:
  explicit Expr__VarDecl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarIdFieldNumber = 1,
  };
  // required string var_id = 1;
  bool has_var_id() const;
  private:
  bool _internal_has_var_id() const;
  public:
  void clear_var_id();
  const std::string& var_id() const;
  void set_var_id(const std::string& value);
  void set_var_id(std::string&& value);
  void set_var_id(const char* value);
  void set_var_id(const char* value, size_t size);
  std::string* mutable_var_id();
  std::string* release_var_id();
  void set_allocated_var_id(std::string* var_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_var_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_var_id(
      std::string* var_id);
  private:
  const std::string& _internal_var_id() const;
  void _internal_set_var_id(const std::string& value);
  std::string* _internal_mutable_var_id();
  public:

  // @@protoc_insertion_point(class_scope:Frontend_ir.Expr._VarDecl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_id_;
  friend struct ::TableStruct_frontend_2eproto;
};
// -------------------------------------------------------------------

class Expr__Assign PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Expr._Assign) */ {
 public:
  inline Expr__Assign() : Expr__Assign(nullptr) {};
  virtual ~Expr__Assign();

  Expr__Assign(const Expr__Assign& from);
  Expr__Assign(Expr__Assign&& from) noexcept
    : Expr__Assign() {
    *this = ::std::move(from);
  }

  inline Expr__Assign& operator=(const Expr__Assign& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr__Assign& operator=(Expr__Assign&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expr__Assign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expr__Assign* internal_default_instance() {
    return reinterpret_cast<const Expr__Assign*>(
               &_Expr__Assign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Expr__Assign& a, Expr__Assign& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr__Assign* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr__Assign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expr__Assign* New() const final {
    return CreateMaybeMessage<Expr__Assign>(nullptr);
  }

  Expr__Assign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expr__Assign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expr__Assign& from);
  void MergeFrom(const Expr__Assign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr__Assign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Expr._Assign";
  }
  protected:
  explicit Expr__Assign(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLhsFieldNumber = 1,
    kRhsFieldNumber = 2,
  };
  // required .Frontend_ir.Identifier lhs = 1;
  bool has_lhs() const;
  private:
  bool _internal_has_lhs() const;
  public:
  void clear_lhs();
  const ::Frontend_ir::Identifier& lhs() const;
  ::Frontend_ir::Identifier* release_lhs();
  ::Frontend_ir::Identifier* mutable_lhs();
  void set_allocated_lhs(::Frontend_ir::Identifier* lhs);
  private:
  const ::Frontend_ir::Identifier& _internal_lhs() const;
  ::Frontend_ir::Identifier* _internal_mutable_lhs();
  public:
  void unsafe_arena_set_allocated_lhs(
      ::Frontend_ir::Identifier* lhs);
  ::Frontend_ir::Identifier* unsafe_arena_release_lhs();

  // required .Frontend_ir.Expr rhs = 2;
  bool has_rhs() const;
  private:
  bool _internal_has_rhs() const;
  public:
  void clear_rhs();
  const ::Frontend_ir::Expr& rhs() const;
  ::Frontend_ir::Expr* release_rhs();
  ::Frontend_ir::Expr* mutable_rhs();
  void set_allocated_rhs(::Frontend_ir::Expr* rhs);
  private:
  const ::Frontend_ir::Expr& _internal_rhs() const;
  ::Frontend_ir::Expr* _internal_mutable_rhs();
  public:
  void unsafe_arena_set_allocated_rhs(
      ::Frontend_ir::Expr* rhs);
  ::Frontend_ir::Expr* unsafe_arena_release_rhs();

  // @@protoc_insertion_point(class_scope:Frontend_ir.Expr._Assign)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Frontend_ir::Identifier* lhs_;
  ::Frontend_ir::Expr* rhs_;
  friend struct ::TableStruct_frontend_2eproto;
};
// -------------------------------------------------------------------

class Expr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Expr) */ {
 public:
  inline Expr() : Expr(nullptr) {};
  virtual ~Expr();

  Expr(const Expr& from);
  Expr(Expr&& from) noexcept
    : Expr() {
    *this = ::std::move(from);
  }

  inline Expr& operator=(const Expr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr& operator=(Expr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expr& default_instance();

  enum ValueCase {
    kInteger = 1,
    kFunctionApp = 2,
    kPrintf = 3,
    kUnop = 4,
    kBinop = 5,
    kVarDecl = 6,
    kAssign = 7,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expr* internal_default_instance() {
    return reinterpret_cast<const Expr*>(
               &_Expr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Expr& a, Expr& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expr* New() const final {
    return CreateMaybeMessage<Expr>(nullptr);
  }

  Expr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expr& from);
  void MergeFrom(const Expr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Expr";
  }
  protected:
  explicit Expr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expr__FunctionApp _FunctionApp;
  typedef Expr__Printf _Printf;
  typedef Expr__Unop _Unop;
  typedef Expr__Binop _Binop;
  typedef Expr__VarDecl _VarDecl;
  typedef Expr__Assign _Assign;

  // accessors -------------------------------------------------------

  enum : int {
    kIntegerFieldNumber = 1,
    kFunctionAppFieldNumber = 2,
    kPrintfFieldNumber = 3,
    kUnopFieldNumber = 4,
    kBinopFieldNumber = 5,
    kVarDeclFieldNumber = 6,
    kAssignFieldNumber = 7,
  };
  // int32 Integer = 1;
  bool has_integer() const;
  private:
  bool _internal_has_integer() const;
  public:
  void clear_integer();
  ::PROTOBUF_NAMESPACE_ID::int32 integer() const;
  void set_integer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_integer() const;
  void _internal_set_integer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Frontend_ir.Expr._FunctionApp FunctionApp = 2;
  bool has_functionapp() const;
  private:
  bool _internal_has_functionapp() const;
  public:
  void clear_functionapp();
  const ::Frontend_ir::Expr__FunctionApp& functionapp() const;
  ::Frontend_ir::Expr__FunctionApp* release_functionapp();
  ::Frontend_ir::Expr__FunctionApp* mutable_functionapp();
  void set_allocated_functionapp(::Frontend_ir::Expr__FunctionApp* functionapp);
  private:
  const ::Frontend_ir::Expr__FunctionApp& _internal_functionapp() const;
  ::Frontend_ir::Expr__FunctionApp* _internal_mutable_functionapp();
  public:
  void unsafe_arena_set_allocated_functionapp(
      ::Frontend_ir::Expr__FunctionApp* functionapp);
  ::Frontend_ir::Expr__FunctionApp* unsafe_arena_release_functionapp();

  // .Frontend_ir.Expr._Printf Printf = 3;
  bool has_printf() const;
  private:
  bool _internal_has_printf() const;
  public:
  void clear_printf();
  const ::Frontend_ir::Expr__Printf& printf() const;
  ::Frontend_ir::Expr__Printf* release_printf();
  ::Frontend_ir::Expr__Printf* mutable_printf();
  void set_allocated_printf(::Frontend_ir::Expr__Printf* printf);
  private:
  const ::Frontend_ir::Expr__Printf& _internal_printf() const;
  ::Frontend_ir::Expr__Printf* _internal_mutable_printf();
  public:
  void unsafe_arena_set_allocated_printf(
      ::Frontend_ir::Expr__Printf* printf);
  ::Frontend_ir::Expr__Printf* unsafe_arena_release_printf();

  // .Frontend_ir.Expr._Unop Unop = 4;
  bool has_unop() const;
  private:
  bool _internal_has_unop() const;
  public:
  void clear_unop();
  const ::Frontend_ir::Expr__Unop& unop() const;
  ::Frontend_ir::Expr__Unop* release_unop();
  ::Frontend_ir::Expr__Unop* mutable_unop();
  void set_allocated_unop(::Frontend_ir::Expr__Unop* unop);
  private:
  const ::Frontend_ir::Expr__Unop& _internal_unop() const;
  ::Frontend_ir::Expr__Unop* _internal_mutable_unop();
  public:
  void unsafe_arena_set_allocated_unop(
      ::Frontend_ir::Expr__Unop* unop);
  ::Frontend_ir::Expr__Unop* unsafe_arena_release_unop();

  // .Frontend_ir.Expr._Binop Binop = 5;
  bool has_binop() const;
  private:
  bool _internal_has_binop() const;
  public:
  void clear_binop();
  const ::Frontend_ir::Expr__Binop& binop() const;
  ::Frontend_ir::Expr__Binop* release_binop();
  ::Frontend_ir::Expr__Binop* mutable_binop();
  void set_allocated_binop(::Frontend_ir::Expr__Binop* binop);
  private:
  const ::Frontend_ir::Expr__Binop& _internal_binop() const;
  ::Frontend_ir::Expr__Binop* _internal_mutable_binop();
  public:
  void unsafe_arena_set_allocated_binop(
      ::Frontend_ir::Expr__Binop* binop);
  ::Frontend_ir::Expr__Binop* unsafe_arena_release_binop();

  // .Frontend_ir.Expr._VarDecl VarDecl = 6;
  bool has_vardecl() const;
  private:
  bool _internal_has_vardecl() const;
  public:
  void clear_vardecl();
  const ::Frontend_ir::Expr__VarDecl& vardecl() const;
  ::Frontend_ir::Expr__VarDecl* release_vardecl();
  ::Frontend_ir::Expr__VarDecl* mutable_vardecl();
  void set_allocated_vardecl(::Frontend_ir::Expr__VarDecl* vardecl);
  private:
  const ::Frontend_ir::Expr__VarDecl& _internal_vardecl() const;
  ::Frontend_ir::Expr__VarDecl* _internal_mutable_vardecl();
  public:
  void unsafe_arena_set_allocated_vardecl(
      ::Frontend_ir::Expr__VarDecl* vardecl);
  ::Frontend_ir::Expr__VarDecl* unsafe_arena_release_vardecl();

  // .Frontend_ir.Expr._Assign Assign = 7;
  bool has_assign() const;
  private:
  bool _internal_has_assign() const;
  public:
  void clear_assign();
  const ::Frontend_ir::Expr__Assign& assign() const;
  ::Frontend_ir::Expr__Assign* release_assign();
  ::Frontend_ir::Expr__Assign* mutable_assign();
  void set_allocated_assign(::Frontend_ir::Expr__Assign* assign);
  private:
  const ::Frontend_ir::Expr__Assign& _internal_assign() const;
  ::Frontend_ir::Expr__Assign* _internal_mutable_assign();
  public:
  void unsafe_arena_set_allocated_assign(
      ::Frontend_ir::Expr__Assign* assign);
  ::Frontend_ir::Expr__Assign* unsafe_arena_release_assign();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:Frontend_ir.Expr)
 private:
  class _Internal;
  void set_has_integer();
  void set_has_functionapp();
  void set_has_printf();
  void set_has_unop();
  void set_has_binop();
  void set_has_vardecl();
  void set_has_assign();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 integer_;
    ::Frontend_ir::Expr__FunctionApp* functionapp_;
    ::Frontend_ir::Expr__Printf* printf_;
    ::Frontend_ir::Expr__Unop* unop_;
    ::Frontend_ir::Expr__Binop* binop_;
    ::Frontend_ir::Expr__VarDecl* vardecl_;
    ::Frontend_ir::Expr__Assign* assign_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frontend_2eproto;
};
// -------------------------------------------------------------------

class Program PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Program) */ {
 public:
  inline Program() : Program(nullptr) {};
  virtual ~Program();

  Program(const Program& from);
  Program(Program&& from) noexcept
    : Program() {
    *this = ::std::move(from);
  }

  inline Program& operator=(const Program& from) {
    CopyFrom(from);
    return *this;
  }
  inline Program& operator=(Program&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Program& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Program* internal_default_instance() {
    return reinterpret_cast<const Program*>(
               &_Program_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Program& a, Program& b) {
    a.Swap(&b);
  }
  inline void Swap(Program* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Program* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Program* New() const final {
    return CreateMaybeMessage<Program>(nullptr);
  }

  Program* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Program>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Program& from);
  void MergeFrom(const Program& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Program* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Program";
  }
  protected:
  explicit Program(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainFieldNumber = 1,
  };
  // repeated .Frontend_ir.Expr main = 1;
  int main_size() const;
  private:
  int _internal_main_size() const;
  public:
  void clear_main();
  ::Frontend_ir::Expr* mutable_main(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >*
      mutable_main();
  private:
  const ::Frontend_ir::Expr& _internal_main(int index) const;
  ::Frontend_ir::Expr* _internal_add_main();
  public:
  const ::Frontend_ir::Expr& main(int index) const;
  ::Frontend_ir::Expr* add_main();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >&
      main() const;

  // @@protoc_insertion_point(class_scope:Frontend_ir.Program)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr > main_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Un_op__NotOp

// -------------------------------------------------------------------

// Un_op__NegOp

// -------------------------------------------------------------------

// Un_op

// .Frontend_ir.Un_op._NotOp not = 1;
inline bool Un_op::_internal_has_not_() const {
  return value_case() == kNot;
}
inline bool Un_op::has_not_() const {
  return _internal_has_not_();
}
inline void Un_op::set_has_not_() {
  _oneof_case_[0] = kNot;
}
inline void Un_op::clear_not_() {
  if (_internal_has_not_()) {
    if (GetArena() == nullptr) {
      delete value_.not__;
    }
    clear_has_value();
  }
}
inline ::Frontend_ir::Un_op__NotOp* Un_op::release_not_() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Un_op.not)
  if (_internal_has_not_()) {
    clear_has_value();
      ::Frontend_ir::Un_op__NotOp* temp = value_.not__;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.not__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Frontend_ir::Un_op__NotOp& Un_op::_internal_not_() const {
  return _internal_has_not_()
      ? *value_.not__
      : *reinterpret_cast< ::Frontend_ir::Un_op__NotOp*>(&::Frontend_ir::_Un_op__NotOp_default_instance_);
}
inline const ::Frontend_ir::Un_op__NotOp& Un_op::not_() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Un_op.not)
  return _internal_not_();
}
inline ::Frontend_ir::Un_op__NotOp* Un_op::unsafe_arena_release_not_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Frontend_ir.Un_op.not)
  if (_internal_has_not_()) {
    clear_has_value();
    ::Frontend_ir::Un_op__NotOp* temp = value_.not__;
    value_.not__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Un_op::unsafe_arena_set_allocated_not_(::Frontend_ir::Un_op__NotOp* not_) {
  clear_value();
  if (not_) {
    set_has_not_();
    value_.not__ = not_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Un_op.not)
}
inline ::Frontend_ir::Un_op__NotOp* Un_op::_internal_mutable_not_() {
  if (!_internal_has_not_()) {
    clear_value();
    set_has_not_();
    value_.not__ = CreateMaybeMessage< ::Frontend_ir::Un_op__NotOp >(GetArena());
  }
  return value_.not__;
}
inline ::Frontend_ir::Un_op__NotOp* Un_op::mutable_not_() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Un_op.not)
  return _internal_mutable_not_();
}

// .Frontend_ir.Un_op._NegOp neg = 2;
inline bool Un_op::_internal_has_neg() const {
  return value_case() == kNeg;
}
inline bool Un_op::has_neg() const {
  return _internal_has_neg();
}
inline void Un_op::set_has_neg() {
  _oneof_case_[0] = kNeg;
}
inline void Un_op::clear_neg() {
  if (_internal_has_neg()) {
    if (GetArena() == nullptr) {
      delete value_.neg_;
    }
    clear_has_value();
  }
}
inline ::Frontend_ir::Un_op__NegOp* Un_op::release_neg() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Un_op.neg)
  if (_internal_has_neg()) {
    clear_has_value();
      ::Frontend_ir::Un_op__NegOp* temp = value_.neg_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.neg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Frontend_ir::Un_op__NegOp& Un_op::_internal_neg() const {
  return _internal_has_neg()
      ? *value_.neg_
      : *reinterpret_cast< ::Frontend_ir::Un_op__NegOp*>(&::Frontend_ir::_Un_op__NegOp_default_instance_);
}
inline const ::Frontend_ir::Un_op__NegOp& Un_op::neg() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Un_op.neg)
  return _internal_neg();
}
inline ::Frontend_ir::Un_op__NegOp* Un_op::unsafe_arena_release_neg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Frontend_ir.Un_op.neg)
  if (_internal_has_neg()) {
    clear_has_value();
    ::Frontend_ir::Un_op__NegOp* temp = value_.neg_;
    value_.neg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Un_op::unsafe_arena_set_allocated_neg(::Frontend_ir::Un_op__NegOp* neg) {
  clear_value();
  if (neg) {
    set_has_neg();
    value_.neg_ = neg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Un_op.neg)
}
inline ::Frontend_ir::Un_op__NegOp* Un_op::_internal_mutable_neg() {
  if (!_internal_has_neg()) {
    clear_value();
    set_has_neg();
    value_.neg_ = CreateMaybeMessage< ::Frontend_ir::Un_op__NegOp >(GetArena());
  }
  return value_.neg_;
}
inline ::Frontend_ir::Un_op__NegOp* Un_op::mutable_neg() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Un_op.neg)
  return _internal_mutable_neg();
}

inline bool Un_op::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Un_op::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Un_op::ValueCase Un_op::value_case() const {
  return Un_op::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Bin_op__PlusOp

// -------------------------------------------------------------------

// Bin_op

// .Frontend_ir.Bin_op._PlusOp plus = 1;
inline bool Bin_op::_internal_has_plus() const {
  return value_case() == kPlus;
}
inline bool Bin_op::has_plus() const {
  return _internal_has_plus();
}
inline void Bin_op::set_has_plus() {
  _oneof_case_[0] = kPlus;
}
inline void Bin_op::clear_plus() {
  if (_internal_has_plus()) {
    if (GetArena() == nullptr) {
      delete value_.plus_;
    }
    clear_has_value();
  }
}
inline ::Frontend_ir::Bin_op__PlusOp* Bin_op::release_plus() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Bin_op.plus)
  if (_internal_has_plus()) {
    clear_has_value();
      ::Frontend_ir::Bin_op__PlusOp* temp = value_.plus_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.plus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Frontend_ir::Bin_op__PlusOp& Bin_op::_internal_plus() const {
  return _internal_has_plus()
      ? *value_.plus_
      : *reinterpret_cast< ::Frontend_ir::Bin_op__PlusOp*>(&::Frontend_ir::_Bin_op__PlusOp_default_instance_);
}
inline const ::Frontend_ir::Bin_op__PlusOp& Bin_op::plus() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Bin_op.plus)
  return _internal_plus();
}
inline ::Frontend_ir::Bin_op__PlusOp* Bin_op::unsafe_arena_release_plus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Frontend_ir.Bin_op.plus)
  if (_internal_has_plus()) {
    clear_has_value();
    ::Frontend_ir::Bin_op__PlusOp* temp = value_.plus_;
    value_.plus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Bin_op::unsafe_arena_set_allocated_plus(::Frontend_ir::Bin_op__PlusOp* plus) {
  clear_value();
  if (plus) {
    set_has_plus();
    value_.plus_ = plus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Bin_op.plus)
}
inline ::Frontend_ir::Bin_op__PlusOp* Bin_op::_internal_mutable_plus() {
  if (!_internal_has_plus()) {
    clear_value();
    set_has_plus();
    value_.plus_ = CreateMaybeMessage< ::Frontend_ir::Bin_op__PlusOp >(GetArena());
  }
  return value_.plus_;
}
inline ::Frontend_ir::Bin_op__PlusOp* Bin_op::mutable_plus() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Bin_op.plus)
  return _internal_mutable_plus();
}

inline bool Bin_op::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Bin_op::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Bin_op::ValueCase Bin_op::value_case() const {
  return Bin_op::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Identifier__Var

// required string var_name = 1;
inline bool Identifier__Var::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Identifier__Var::has_var_name() const {
  return _internal_has_var_name();
}
inline void Identifier__Var::clear_var_name() {
  var_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Identifier__Var::var_name() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Identifier._Var.var_name)
  return _internal_var_name();
}
inline void Identifier__Var::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:Frontend_ir.Identifier._Var.var_name)
}
inline std::string* Identifier__Var::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Identifier._Var.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& Identifier__Var::_internal_var_name() const {
  return var_name_.Get();
}
inline void Identifier__Var::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Identifier__Var::set_var_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Frontend_ir.Identifier._Var.var_name)
}
inline void Identifier__Var::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Frontend_ir.Identifier._Var.var_name)
}
inline void Identifier__Var::set_var_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Frontend_ir.Identifier._Var.var_name)
}
inline std::string* Identifier__Var::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000001u;
  return var_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Identifier__Var::release_var_name() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Identifier._Var.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Identifier__Var::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Frontend_ir.Identifier._Var.var_name)
}
inline std::string* Identifier__Var::unsafe_arena_release_var_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Frontend_ir.Identifier._Var.var_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return var_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Identifier__Var::unsafe_arena_set_allocated_var_name(
    std::string* var_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      var_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Identifier._Var.var_name)
}

// -------------------------------------------------------------------

// Identifier

// .Frontend_ir.Identifier._Var var = 1;
inline bool Identifier::_internal_has_var() const {
  return value_case() == kVar;
}
inline bool Identifier::has_var() const {
  return _internal_has_var();
}
inline void Identifier::set_has_var() {
  _oneof_case_[0] = kVar;
}
inline void Identifier::clear_var() {
  if (_internal_has_var()) {
    if (GetArena() == nullptr) {
      delete value_.var_;
    }
    clear_has_value();
  }
}
inline ::Frontend_ir::Identifier__Var* Identifier::release_var() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Identifier.var)
  if (_internal_has_var()) {
    clear_has_value();
      ::Frontend_ir::Identifier__Var* temp = value_.var_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.var_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Frontend_ir::Identifier__Var& Identifier::_internal_var() const {
  return _internal_has_var()
      ? *value_.var_
      : *reinterpret_cast< ::Frontend_ir::Identifier__Var*>(&::Frontend_ir::_Identifier__Var_default_instance_);
}
inline const ::Frontend_ir::Identifier__Var& Identifier::var() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Identifier.var)
  return _internal_var();
}
inline ::Frontend_ir::Identifier__Var* Identifier::unsafe_arena_release_var() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Frontend_ir.Identifier.var)
  if (_internal_has_var()) {
    clear_has_value();
    ::Frontend_ir::Identifier__Var* temp = value_.var_;
    value_.var_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Identifier::unsafe_arena_set_allocated_var(::Frontend_ir::Identifier__Var* var) {
  clear_value();
  if (var) {
    set_has_var();
    value_.var_ = var;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Identifier.var)
}
inline ::Frontend_ir::Identifier__Var* Identifier::_internal_mutable_var() {
  if (!_internal_has_var()) {
    clear_value();
    set_has_var();
    value_.var_ = CreateMaybeMessage< ::Frontend_ir::Identifier__Var >(GetArena());
  }
  return value_.var_;
}
inline ::Frontend_ir::Identifier__Var* Identifier::mutable_var() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Identifier.var)
  return _internal_mutable_var();
}

inline bool Identifier::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Identifier::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Identifier::ValueCase Identifier::value_case() const {
  return Identifier::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expr__FunctionApp

// required string name = 1;
inline bool Expr__FunctionApp::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Expr__FunctionApp::has_name() const {
  return _internal_has_name();
}
inline void Expr__FunctionApp::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Expr__FunctionApp::name() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr._FunctionApp.name)
  return _internal_name();
}
inline void Expr__FunctionApp::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Frontend_ir.Expr._FunctionApp.name)
}
inline std::string* Expr__FunctionApp::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr._FunctionApp.name)
  return _internal_mutable_name();
}
inline const std::string& Expr__FunctionApp::_internal_name() const {
  return name_.Get();
}
inline void Expr__FunctionApp::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Expr__FunctionApp::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Frontend_ir.Expr._FunctionApp.name)
}
inline void Expr__FunctionApp::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Frontend_ir.Expr._FunctionApp.name)
}
inline void Expr__FunctionApp::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Frontend_ir.Expr._FunctionApp.name)
}
inline std::string* Expr__FunctionApp::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Expr__FunctionApp::release_name() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr._FunctionApp.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Expr__FunctionApp::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Frontend_ir.Expr._FunctionApp.name)
}
inline std::string* Expr__FunctionApp::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Frontend_ir.Expr._FunctionApp.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Expr__FunctionApp::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr._FunctionApp.name)
}

// repeated .Frontend_ir.Expr args = 2;
inline int Expr__FunctionApp::_internal_args_size() const {
  return args_.size();
}
inline int Expr__FunctionApp::args_size() const {
  return _internal_args_size();
}
inline void Expr__FunctionApp::clear_args() {
  args_.Clear();
}
inline ::Frontend_ir::Expr* Expr__FunctionApp::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr._FunctionApp.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >*
Expr__FunctionApp::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:Frontend_ir.Expr._FunctionApp.args)
  return &args_;
}
inline const ::Frontend_ir::Expr& Expr__FunctionApp::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::Frontend_ir::Expr& Expr__FunctionApp::args(int index) const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr._FunctionApp.args)
  return _internal_args(index);
}
inline ::Frontend_ir::Expr* Expr__FunctionApp::_internal_add_args() {
  return args_.Add();
}
inline ::Frontend_ir::Expr* Expr__FunctionApp::add_args() {
  // @@protoc_insertion_point(field_add:Frontend_ir.Expr._FunctionApp.args)
  return _internal_add_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >&
Expr__FunctionApp::args() const {
  // @@protoc_insertion_point(field_list:Frontend_ir.Expr._FunctionApp.args)
  return args_;
}

// -------------------------------------------------------------------

// Expr__Printf

// required string format = 1;
inline bool Expr__Printf::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Expr__Printf::has_format() const {
  return _internal_has_format();
}
inline void Expr__Printf::clear_format() {
  format_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Expr__Printf::format() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr._Printf.format)
  return _internal_format();
}
inline void Expr__Printf::set_format(const std::string& value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:Frontend_ir.Expr._Printf.format)
}
inline std::string* Expr__Printf::mutable_format() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr._Printf.format)
  return _internal_mutable_format();
}
inline const std::string& Expr__Printf::_internal_format() const {
  return format_.Get();
}
inline void Expr__Printf::_internal_set_format(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Expr__Printf::set_format(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  format_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Frontend_ir.Expr._Printf.format)
}
inline void Expr__Printf::set_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Frontend_ir.Expr._Printf.format)
}
inline void Expr__Printf::set_format(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Frontend_ir.Expr._Printf.format)
}
inline std::string* Expr__Printf::_internal_mutable_format() {
  _has_bits_[0] |= 0x00000001u;
  return format_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Expr__Printf::release_format() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr._Printf.format)
  if (!_internal_has_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return format_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Expr__Printf::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Frontend_ir.Expr._Printf.format)
}
inline std::string* Expr__Printf::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Frontend_ir.Expr._Printf.format)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return format_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Expr__Printf::unsafe_arena_set_allocated_format(
    std::string* format) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (format != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  format_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      format, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr._Printf.format)
}

// repeated .Frontend_ir.Expr f_args = 2;
inline int Expr__Printf::_internal_f_args_size() const {
  return f_args_.size();
}
inline int Expr__Printf::f_args_size() const {
  return _internal_f_args_size();
}
inline void Expr__Printf::clear_f_args() {
  f_args_.Clear();
}
inline ::Frontend_ir::Expr* Expr__Printf::mutable_f_args(int index) {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr._Printf.f_args)
  return f_args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >*
Expr__Printf::mutable_f_args() {
  // @@protoc_insertion_point(field_mutable_list:Frontend_ir.Expr._Printf.f_args)
  return &f_args_;
}
inline const ::Frontend_ir::Expr& Expr__Printf::_internal_f_args(int index) const {
  return f_args_.Get(index);
}
inline const ::Frontend_ir::Expr& Expr__Printf::f_args(int index) const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr._Printf.f_args)
  return _internal_f_args(index);
}
inline ::Frontend_ir::Expr* Expr__Printf::_internal_add_f_args() {
  return f_args_.Add();
}
inline ::Frontend_ir::Expr* Expr__Printf::add_f_args() {
  // @@protoc_insertion_point(field_add:Frontend_ir.Expr._Printf.f_args)
  return _internal_add_f_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >&
Expr__Printf::f_args() const {
  // @@protoc_insertion_point(field_list:Frontend_ir.Expr._Printf.f_args)
  return f_args_;
}

// -------------------------------------------------------------------

// Expr__Unop

// required .Frontend_ir.Un_op op = 1;
inline bool Expr__Unop::_internal_has_op() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || op_ != nullptr);
  return value;
}
inline bool Expr__Unop::has_op() const {
  return _internal_has_op();
}
inline void Expr__Unop::clear_op() {
  if (op_ != nullptr) op_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Frontend_ir::Un_op& Expr__Unop::_internal_op() const {
  const ::Frontend_ir::Un_op* p = op_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Frontend_ir::Un_op*>(
      &::Frontend_ir::_Un_op_default_instance_);
}
inline const ::Frontend_ir::Un_op& Expr__Unop::op() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr._Unop.op)
  return _internal_op();
}
inline void Expr__Unop::unsafe_arena_set_allocated_op(
    ::Frontend_ir::Un_op* op) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(op_);
  }
  op_ = op;
  if (op) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr._Unop.op)
}
inline ::Frontend_ir::Un_op* Expr__Unop::release_op() {
  auto temp = unsafe_arena_release_op();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Frontend_ir::Un_op* Expr__Unop::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr._Unop.op)
  _has_bits_[0] &= ~0x00000001u;
  ::Frontend_ir::Un_op* temp = op_;
  op_ = nullptr;
  return temp;
}
inline ::Frontend_ir::Un_op* Expr__Unop::_internal_mutable_op() {
  _has_bits_[0] |= 0x00000001u;
  if (op_ == nullptr) {
    auto* p = CreateMaybeMessage<::Frontend_ir::Un_op>(GetArena());
    op_ = p;
  }
  return op_;
}
inline ::Frontend_ir::Un_op* Expr__Unop::mutable_op() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr._Unop.op)
  return _internal_mutable_op();
}
inline void Expr__Unop::set_allocated_op(::Frontend_ir::Un_op* op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete op_;
  }
  if (op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(op);
    if (message_arena != submessage_arena) {
      op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  op_ = op;
  // @@protoc_insertion_point(field_set_allocated:Frontend_ir.Expr._Unop.op)
}

// required .Frontend_ir.Expr uexpr = 2;
inline bool Expr__Unop::_internal_has_uexpr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || uexpr_ != nullptr);
  return value;
}
inline bool Expr__Unop::has_uexpr() const {
  return _internal_has_uexpr();
}
inline void Expr__Unop::clear_uexpr() {
  if (uexpr_ != nullptr) uexpr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Frontend_ir::Expr& Expr__Unop::_internal_uexpr() const {
  const ::Frontend_ir::Expr* p = uexpr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Frontend_ir::Expr*>(
      &::Frontend_ir::_Expr_default_instance_);
}
inline const ::Frontend_ir::Expr& Expr__Unop::uexpr() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr._Unop.uexpr)
  return _internal_uexpr();
}
inline void Expr__Unop::unsafe_arena_set_allocated_uexpr(
    ::Frontend_ir::Expr* uexpr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uexpr_);
  }
  uexpr_ = uexpr;
  if (uexpr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr._Unop.uexpr)
}
inline ::Frontend_ir::Expr* Expr__Unop::release_uexpr() {
  auto temp = unsafe_arena_release_uexpr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Frontend_ir::Expr* Expr__Unop::unsafe_arena_release_uexpr() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr._Unop.uexpr)
  _has_bits_[0] &= ~0x00000002u;
  ::Frontend_ir::Expr* temp = uexpr_;
  uexpr_ = nullptr;
  return temp;
}
inline ::Frontend_ir::Expr* Expr__Unop::_internal_mutable_uexpr() {
  _has_bits_[0] |= 0x00000002u;
  if (uexpr_ == nullptr) {
    auto* p = CreateMaybeMessage<::Frontend_ir::Expr>(GetArena());
    uexpr_ = p;
  }
  return uexpr_;
}
inline ::Frontend_ir::Expr* Expr__Unop::mutable_uexpr() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr._Unop.uexpr)
  return _internal_mutable_uexpr();
}
inline void Expr__Unop::set_allocated_uexpr(::Frontend_ir::Expr* uexpr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uexpr_;
  }
  if (uexpr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uexpr);
    if (message_arena != submessage_arena) {
      uexpr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uexpr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uexpr_ = uexpr;
  // @@protoc_insertion_point(field_set_allocated:Frontend_ir.Expr._Unop.uexpr)
}

// -------------------------------------------------------------------

// Expr__Binop

// required .Frontend_ir.Bin_op bin_op = 1;
inline bool Expr__Binop::_internal_has_bin_op() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || bin_op_ != nullptr);
  return value;
}
inline bool Expr__Binop::has_bin_op() const {
  return _internal_has_bin_op();
}
inline void Expr__Binop::clear_bin_op() {
  if (bin_op_ != nullptr) bin_op_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Frontend_ir::Bin_op& Expr__Binop::_internal_bin_op() const {
  const ::Frontend_ir::Bin_op* p = bin_op_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Frontend_ir::Bin_op*>(
      &::Frontend_ir::_Bin_op_default_instance_);
}
inline const ::Frontend_ir::Bin_op& Expr__Binop::bin_op() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr._Binop.bin_op)
  return _internal_bin_op();
}
inline void Expr__Binop::unsafe_arena_set_allocated_bin_op(
    ::Frontend_ir::Bin_op* bin_op) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bin_op_);
  }
  bin_op_ = bin_op;
  if (bin_op) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr._Binop.bin_op)
}
inline ::Frontend_ir::Bin_op* Expr__Binop::release_bin_op() {
  auto temp = unsafe_arena_release_bin_op();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Frontend_ir::Bin_op* Expr__Binop::unsafe_arena_release_bin_op() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr._Binop.bin_op)
  _has_bits_[0] &= ~0x00000001u;
  ::Frontend_ir::Bin_op* temp = bin_op_;
  bin_op_ = nullptr;
  return temp;
}
inline ::Frontend_ir::Bin_op* Expr__Binop::_internal_mutable_bin_op() {
  _has_bits_[0] |= 0x00000001u;
  if (bin_op_ == nullptr) {
    auto* p = CreateMaybeMessage<::Frontend_ir::Bin_op>(GetArena());
    bin_op_ = p;
  }
  return bin_op_;
}
inline ::Frontend_ir::Bin_op* Expr__Binop::mutable_bin_op() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr._Binop.bin_op)
  return _internal_mutable_bin_op();
}
inline void Expr__Binop::set_allocated_bin_op(::Frontend_ir::Bin_op* bin_op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bin_op_;
  }
  if (bin_op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bin_op);
    if (message_arena != submessage_arena) {
      bin_op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bin_op, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bin_op_ = bin_op;
  // @@protoc_insertion_point(field_set_allocated:Frontend_ir.Expr._Binop.bin_op)
}

// required .Frontend_ir.Expr lexpr = 2;
inline bool Expr__Binop::_internal_has_lexpr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || lexpr_ != nullptr);
  return value;
}
inline bool Expr__Binop::has_lexpr() const {
  return _internal_has_lexpr();
}
inline void Expr__Binop::clear_lexpr() {
  if (lexpr_ != nullptr) lexpr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Frontend_ir::Expr& Expr__Binop::_internal_lexpr() const {
  const ::Frontend_ir::Expr* p = lexpr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Frontend_ir::Expr*>(
      &::Frontend_ir::_Expr_default_instance_);
}
inline const ::Frontend_ir::Expr& Expr__Binop::lexpr() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr._Binop.lexpr)
  return _internal_lexpr();
}
inline void Expr__Binop::unsafe_arena_set_allocated_lexpr(
    ::Frontend_ir::Expr* lexpr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lexpr_);
  }
  lexpr_ = lexpr;
  if (lexpr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr._Binop.lexpr)
}
inline ::Frontend_ir::Expr* Expr__Binop::release_lexpr() {
  auto temp = unsafe_arena_release_lexpr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Frontend_ir::Expr* Expr__Binop::unsafe_arena_release_lexpr() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr._Binop.lexpr)
  _has_bits_[0] &= ~0x00000002u;
  ::Frontend_ir::Expr* temp = lexpr_;
  lexpr_ = nullptr;
  return temp;
}
inline ::Frontend_ir::Expr* Expr__Binop::_internal_mutable_lexpr() {
  _has_bits_[0] |= 0x00000002u;
  if (lexpr_ == nullptr) {
    auto* p = CreateMaybeMessage<::Frontend_ir::Expr>(GetArena());
    lexpr_ = p;
  }
  return lexpr_;
}
inline ::Frontend_ir::Expr* Expr__Binop::mutable_lexpr() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr._Binop.lexpr)
  return _internal_mutable_lexpr();
}
inline void Expr__Binop::set_allocated_lexpr(::Frontend_ir::Expr* lexpr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lexpr_;
  }
  if (lexpr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lexpr);
    if (message_arena != submessage_arena) {
      lexpr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lexpr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lexpr_ = lexpr;
  // @@protoc_insertion_point(field_set_allocated:Frontend_ir.Expr._Binop.lexpr)
}

// required .Frontend_ir.Expr rexpr = 3;
inline bool Expr__Binop::_internal_has_rexpr() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || rexpr_ != nullptr);
  return value;
}
inline bool Expr__Binop::has_rexpr() const {
  return _internal_has_rexpr();
}
inline void Expr__Binop::clear_rexpr() {
  if (rexpr_ != nullptr) rexpr_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Frontend_ir::Expr& Expr__Binop::_internal_rexpr() const {
  const ::Frontend_ir::Expr* p = rexpr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Frontend_ir::Expr*>(
      &::Frontend_ir::_Expr_default_instance_);
}
inline const ::Frontend_ir::Expr& Expr__Binop::rexpr() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr._Binop.rexpr)
  return _internal_rexpr();
}
inline void Expr__Binop::unsafe_arena_set_allocated_rexpr(
    ::Frontend_ir::Expr* rexpr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rexpr_);
  }
  rexpr_ = rexpr;
  if (rexpr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr._Binop.rexpr)
}
inline ::Frontend_ir::Expr* Expr__Binop::release_rexpr() {
  auto temp = unsafe_arena_release_rexpr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Frontend_ir::Expr* Expr__Binop::unsafe_arena_release_rexpr() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr._Binop.rexpr)
  _has_bits_[0] &= ~0x00000004u;
  ::Frontend_ir::Expr* temp = rexpr_;
  rexpr_ = nullptr;
  return temp;
}
inline ::Frontend_ir::Expr* Expr__Binop::_internal_mutable_rexpr() {
  _has_bits_[0] |= 0x00000004u;
  if (rexpr_ == nullptr) {
    auto* p = CreateMaybeMessage<::Frontend_ir::Expr>(GetArena());
    rexpr_ = p;
  }
  return rexpr_;
}
inline ::Frontend_ir::Expr* Expr__Binop::mutable_rexpr() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr._Binop.rexpr)
  return _internal_mutable_rexpr();
}
inline void Expr__Binop::set_allocated_rexpr(::Frontend_ir::Expr* rexpr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rexpr_;
  }
  if (rexpr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rexpr);
    if (message_arena != submessage_arena) {
      rexpr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rexpr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rexpr_ = rexpr;
  // @@protoc_insertion_point(field_set_allocated:Frontend_ir.Expr._Binop.rexpr)
}

// -------------------------------------------------------------------

// Expr__VarDecl

// required string var_id = 1;
inline bool Expr__VarDecl::_internal_has_var_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Expr__VarDecl::has_var_id() const {
  return _internal_has_var_id();
}
inline void Expr__VarDecl::clear_var_id() {
  var_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Expr__VarDecl::var_id() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr._VarDecl.var_id)
  return _internal_var_id();
}
inline void Expr__VarDecl::set_var_id(const std::string& value) {
  _internal_set_var_id(value);
  // @@protoc_insertion_point(field_set:Frontend_ir.Expr._VarDecl.var_id)
}
inline std::string* Expr__VarDecl::mutable_var_id() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr._VarDecl.var_id)
  return _internal_mutable_var_id();
}
inline const std::string& Expr__VarDecl::_internal_var_id() const {
  return var_id_.Get();
}
inline void Expr__VarDecl::_internal_set_var_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Expr__VarDecl::set_var_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Frontend_ir.Expr._VarDecl.var_id)
}
inline void Expr__VarDecl::set_var_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Frontend_ir.Expr._VarDecl.var_id)
}
inline void Expr__VarDecl::set_var_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Frontend_ir.Expr._VarDecl.var_id)
}
inline std::string* Expr__VarDecl::_internal_mutable_var_id() {
  _has_bits_[0] |= 0x00000001u;
  return var_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Expr__VarDecl::release_var_id() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr._VarDecl.var_id)
  if (!_internal_has_var_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Expr__VarDecl::set_allocated_var_id(std::string* var_id) {
  if (var_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Frontend_ir.Expr._VarDecl.var_id)
}
inline std::string* Expr__VarDecl::unsafe_arena_release_var_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Frontend_ir.Expr._VarDecl.var_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return var_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Expr__VarDecl::unsafe_arena_set_allocated_var_id(
    std::string* var_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (var_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      var_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr._VarDecl.var_id)
}

// -------------------------------------------------------------------

// Expr__Assign

// required .Frontend_ir.Identifier lhs = 1;
inline bool Expr__Assign::_internal_has_lhs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || lhs_ != nullptr);
  return value;
}
inline bool Expr__Assign::has_lhs() const {
  return _internal_has_lhs();
}
inline void Expr__Assign::clear_lhs() {
  if (lhs_ != nullptr) lhs_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Frontend_ir::Identifier& Expr__Assign::_internal_lhs() const {
  const ::Frontend_ir::Identifier* p = lhs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Frontend_ir::Identifier*>(
      &::Frontend_ir::_Identifier_default_instance_);
}
inline const ::Frontend_ir::Identifier& Expr__Assign::lhs() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr._Assign.lhs)
  return _internal_lhs();
}
inline void Expr__Assign::unsafe_arena_set_allocated_lhs(
    ::Frontend_ir::Identifier* lhs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lhs_);
  }
  lhs_ = lhs;
  if (lhs) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr._Assign.lhs)
}
inline ::Frontend_ir::Identifier* Expr__Assign::release_lhs() {
  auto temp = unsafe_arena_release_lhs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Frontend_ir::Identifier* Expr__Assign::unsafe_arena_release_lhs() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr._Assign.lhs)
  _has_bits_[0] &= ~0x00000001u;
  ::Frontend_ir::Identifier* temp = lhs_;
  lhs_ = nullptr;
  return temp;
}
inline ::Frontend_ir::Identifier* Expr__Assign::_internal_mutable_lhs() {
  _has_bits_[0] |= 0x00000001u;
  if (lhs_ == nullptr) {
    auto* p = CreateMaybeMessage<::Frontend_ir::Identifier>(GetArena());
    lhs_ = p;
  }
  return lhs_;
}
inline ::Frontend_ir::Identifier* Expr__Assign::mutable_lhs() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr._Assign.lhs)
  return _internal_mutable_lhs();
}
inline void Expr__Assign::set_allocated_lhs(::Frontend_ir::Identifier* lhs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lhs_;
  }
  if (lhs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lhs);
    if (message_arena != submessage_arena) {
      lhs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lhs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lhs_ = lhs;
  // @@protoc_insertion_point(field_set_allocated:Frontend_ir.Expr._Assign.lhs)
}

// required .Frontend_ir.Expr rhs = 2;
inline bool Expr__Assign::_internal_has_rhs() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || rhs_ != nullptr);
  return value;
}
inline bool Expr__Assign::has_rhs() const {
  return _internal_has_rhs();
}
inline void Expr__Assign::clear_rhs() {
  if (rhs_ != nullptr) rhs_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Frontend_ir::Expr& Expr__Assign::_internal_rhs() const {
  const ::Frontend_ir::Expr* p = rhs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Frontend_ir::Expr*>(
      &::Frontend_ir::_Expr_default_instance_);
}
inline const ::Frontend_ir::Expr& Expr__Assign::rhs() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr._Assign.rhs)
  return _internal_rhs();
}
inline void Expr__Assign::unsafe_arena_set_allocated_rhs(
    ::Frontend_ir::Expr* rhs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rhs_);
  }
  rhs_ = rhs;
  if (rhs) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr._Assign.rhs)
}
inline ::Frontend_ir::Expr* Expr__Assign::release_rhs() {
  auto temp = unsafe_arena_release_rhs();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Frontend_ir::Expr* Expr__Assign::unsafe_arena_release_rhs() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr._Assign.rhs)
  _has_bits_[0] &= ~0x00000002u;
  ::Frontend_ir::Expr* temp = rhs_;
  rhs_ = nullptr;
  return temp;
}
inline ::Frontend_ir::Expr* Expr__Assign::_internal_mutable_rhs() {
  _has_bits_[0] |= 0x00000002u;
  if (rhs_ == nullptr) {
    auto* p = CreateMaybeMessage<::Frontend_ir::Expr>(GetArena());
    rhs_ = p;
  }
  return rhs_;
}
inline ::Frontend_ir::Expr* Expr__Assign::mutable_rhs() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr._Assign.rhs)
  return _internal_mutable_rhs();
}
inline void Expr__Assign::set_allocated_rhs(::Frontend_ir::Expr* rhs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rhs_;
  }
  if (rhs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rhs);
    if (message_arena != submessage_arena) {
      rhs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rhs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rhs_ = rhs;
  // @@protoc_insertion_point(field_set_allocated:Frontend_ir.Expr._Assign.rhs)
}

// -------------------------------------------------------------------

// Expr

// int32 Integer = 1;
inline bool Expr::_internal_has_integer() const {
  return value_case() == kInteger;
}
inline bool Expr::has_integer() const {
  return _internal_has_integer();
}
inline void Expr::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline void Expr::clear_integer() {
  if (_internal_has_integer()) {
    value_.integer_ = 0;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expr::_internal_integer() const {
  if (_internal_has_integer()) {
    return value_.integer_;
  }
  return 0;
}
inline void Expr::_internal_set_integer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_integer()) {
    clear_value();
    set_has_integer();
  }
  value_.integer_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expr::integer() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr.Integer)
  return _internal_integer();
}
inline void Expr::set_integer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_integer(value);
  // @@protoc_insertion_point(field_set:Frontend_ir.Expr.Integer)
}

// .Frontend_ir.Expr._FunctionApp FunctionApp = 2;
inline bool Expr::_internal_has_functionapp() const {
  return value_case() == kFunctionApp;
}
inline bool Expr::has_functionapp() const {
  return _internal_has_functionapp();
}
inline void Expr::set_has_functionapp() {
  _oneof_case_[0] = kFunctionApp;
}
inline void Expr::clear_functionapp() {
  if (_internal_has_functionapp()) {
    if (GetArena() == nullptr) {
      delete value_.functionapp_;
    }
    clear_has_value();
  }
}
inline ::Frontend_ir::Expr__FunctionApp* Expr::release_functionapp() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr.FunctionApp)
  if (_internal_has_functionapp()) {
    clear_has_value();
      ::Frontend_ir::Expr__FunctionApp* temp = value_.functionapp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.functionapp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Frontend_ir::Expr__FunctionApp& Expr::_internal_functionapp() const {
  return _internal_has_functionapp()
      ? *value_.functionapp_
      : *reinterpret_cast< ::Frontend_ir::Expr__FunctionApp*>(&::Frontend_ir::_Expr__FunctionApp_default_instance_);
}
inline const ::Frontend_ir::Expr__FunctionApp& Expr::functionapp() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr.FunctionApp)
  return _internal_functionapp();
}
inline ::Frontend_ir::Expr__FunctionApp* Expr::unsafe_arena_release_functionapp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Frontend_ir.Expr.FunctionApp)
  if (_internal_has_functionapp()) {
    clear_has_value();
    ::Frontend_ir::Expr__FunctionApp* temp = value_.functionapp_;
    value_.functionapp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_functionapp(::Frontend_ir::Expr__FunctionApp* functionapp) {
  clear_value();
  if (functionapp) {
    set_has_functionapp();
    value_.functionapp_ = functionapp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr.FunctionApp)
}
inline ::Frontend_ir::Expr__FunctionApp* Expr::_internal_mutable_functionapp() {
  if (!_internal_has_functionapp()) {
    clear_value();
    set_has_functionapp();
    value_.functionapp_ = CreateMaybeMessage< ::Frontend_ir::Expr__FunctionApp >(GetArena());
  }
  return value_.functionapp_;
}
inline ::Frontend_ir::Expr__FunctionApp* Expr::mutable_functionapp() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr.FunctionApp)
  return _internal_mutable_functionapp();
}

// .Frontend_ir.Expr._Printf Printf = 3;
inline bool Expr::_internal_has_printf() const {
  return value_case() == kPrintf;
}
inline bool Expr::has_printf() const {
  return _internal_has_printf();
}
inline void Expr::set_has_printf() {
  _oneof_case_[0] = kPrintf;
}
inline void Expr::clear_printf() {
  if (_internal_has_printf()) {
    if (GetArena() == nullptr) {
      delete value_.printf_;
    }
    clear_has_value();
  }
}
inline ::Frontend_ir::Expr__Printf* Expr::release_printf() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr.Printf)
  if (_internal_has_printf()) {
    clear_has_value();
      ::Frontend_ir::Expr__Printf* temp = value_.printf_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.printf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Frontend_ir::Expr__Printf& Expr::_internal_printf() const {
  return _internal_has_printf()
      ? *value_.printf_
      : *reinterpret_cast< ::Frontend_ir::Expr__Printf*>(&::Frontend_ir::_Expr__Printf_default_instance_);
}
inline const ::Frontend_ir::Expr__Printf& Expr::printf() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr.Printf)
  return _internal_printf();
}
inline ::Frontend_ir::Expr__Printf* Expr::unsafe_arena_release_printf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Frontend_ir.Expr.Printf)
  if (_internal_has_printf()) {
    clear_has_value();
    ::Frontend_ir::Expr__Printf* temp = value_.printf_;
    value_.printf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_printf(::Frontend_ir::Expr__Printf* printf) {
  clear_value();
  if (printf) {
    set_has_printf();
    value_.printf_ = printf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr.Printf)
}
inline ::Frontend_ir::Expr__Printf* Expr::_internal_mutable_printf() {
  if (!_internal_has_printf()) {
    clear_value();
    set_has_printf();
    value_.printf_ = CreateMaybeMessage< ::Frontend_ir::Expr__Printf >(GetArena());
  }
  return value_.printf_;
}
inline ::Frontend_ir::Expr__Printf* Expr::mutable_printf() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr.Printf)
  return _internal_mutable_printf();
}

// .Frontend_ir.Expr._Unop Unop = 4;
inline bool Expr::_internal_has_unop() const {
  return value_case() == kUnop;
}
inline bool Expr::has_unop() const {
  return _internal_has_unop();
}
inline void Expr::set_has_unop() {
  _oneof_case_[0] = kUnop;
}
inline void Expr::clear_unop() {
  if (_internal_has_unop()) {
    if (GetArena() == nullptr) {
      delete value_.unop_;
    }
    clear_has_value();
  }
}
inline ::Frontend_ir::Expr__Unop* Expr::release_unop() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr.Unop)
  if (_internal_has_unop()) {
    clear_has_value();
      ::Frontend_ir::Expr__Unop* temp = value_.unop_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.unop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Frontend_ir::Expr__Unop& Expr::_internal_unop() const {
  return _internal_has_unop()
      ? *value_.unop_
      : *reinterpret_cast< ::Frontend_ir::Expr__Unop*>(&::Frontend_ir::_Expr__Unop_default_instance_);
}
inline const ::Frontend_ir::Expr__Unop& Expr::unop() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr.Unop)
  return _internal_unop();
}
inline ::Frontend_ir::Expr__Unop* Expr::unsafe_arena_release_unop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Frontend_ir.Expr.Unop)
  if (_internal_has_unop()) {
    clear_has_value();
    ::Frontend_ir::Expr__Unop* temp = value_.unop_;
    value_.unop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_unop(::Frontend_ir::Expr__Unop* unop) {
  clear_value();
  if (unop) {
    set_has_unop();
    value_.unop_ = unop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr.Unop)
}
inline ::Frontend_ir::Expr__Unop* Expr::_internal_mutable_unop() {
  if (!_internal_has_unop()) {
    clear_value();
    set_has_unop();
    value_.unop_ = CreateMaybeMessage< ::Frontend_ir::Expr__Unop >(GetArena());
  }
  return value_.unop_;
}
inline ::Frontend_ir::Expr__Unop* Expr::mutable_unop() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr.Unop)
  return _internal_mutable_unop();
}

// .Frontend_ir.Expr._Binop Binop = 5;
inline bool Expr::_internal_has_binop() const {
  return value_case() == kBinop;
}
inline bool Expr::has_binop() const {
  return _internal_has_binop();
}
inline void Expr::set_has_binop() {
  _oneof_case_[0] = kBinop;
}
inline void Expr::clear_binop() {
  if (_internal_has_binop()) {
    if (GetArena() == nullptr) {
      delete value_.binop_;
    }
    clear_has_value();
  }
}
inline ::Frontend_ir::Expr__Binop* Expr::release_binop() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr.Binop)
  if (_internal_has_binop()) {
    clear_has_value();
      ::Frontend_ir::Expr__Binop* temp = value_.binop_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.binop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Frontend_ir::Expr__Binop& Expr::_internal_binop() const {
  return _internal_has_binop()
      ? *value_.binop_
      : *reinterpret_cast< ::Frontend_ir::Expr__Binop*>(&::Frontend_ir::_Expr__Binop_default_instance_);
}
inline const ::Frontend_ir::Expr__Binop& Expr::binop() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr.Binop)
  return _internal_binop();
}
inline ::Frontend_ir::Expr__Binop* Expr::unsafe_arena_release_binop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Frontend_ir.Expr.Binop)
  if (_internal_has_binop()) {
    clear_has_value();
    ::Frontend_ir::Expr__Binop* temp = value_.binop_;
    value_.binop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_binop(::Frontend_ir::Expr__Binop* binop) {
  clear_value();
  if (binop) {
    set_has_binop();
    value_.binop_ = binop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr.Binop)
}
inline ::Frontend_ir::Expr__Binop* Expr::_internal_mutable_binop() {
  if (!_internal_has_binop()) {
    clear_value();
    set_has_binop();
    value_.binop_ = CreateMaybeMessage< ::Frontend_ir::Expr__Binop >(GetArena());
  }
  return value_.binop_;
}
inline ::Frontend_ir::Expr__Binop* Expr::mutable_binop() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr.Binop)
  return _internal_mutable_binop();
}

// .Frontend_ir.Expr._VarDecl VarDecl = 6;
inline bool Expr::_internal_has_vardecl() const {
  return value_case() == kVarDecl;
}
inline bool Expr::has_vardecl() const {
  return _internal_has_vardecl();
}
inline void Expr::set_has_vardecl() {
  _oneof_case_[0] = kVarDecl;
}
inline void Expr::clear_vardecl() {
  if (_internal_has_vardecl()) {
    if (GetArena() == nullptr) {
      delete value_.vardecl_;
    }
    clear_has_value();
  }
}
inline ::Frontend_ir::Expr__VarDecl* Expr::release_vardecl() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr.VarDecl)
  if (_internal_has_vardecl()) {
    clear_has_value();
      ::Frontend_ir::Expr__VarDecl* temp = value_.vardecl_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.vardecl_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Frontend_ir::Expr__VarDecl& Expr::_internal_vardecl() const {
  return _internal_has_vardecl()
      ? *value_.vardecl_
      : *reinterpret_cast< ::Frontend_ir::Expr__VarDecl*>(&::Frontend_ir::_Expr__VarDecl_default_instance_);
}
inline const ::Frontend_ir::Expr__VarDecl& Expr::vardecl() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr.VarDecl)
  return _internal_vardecl();
}
inline ::Frontend_ir::Expr__VarDecl* Expr::unsafe_arena_release_vardecl() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Frontend_ir.Expr.VarDecl)
  if (_internal_has_vardecl()) {
    clear_has_value();
    ::Frontend_ir::Expr__VarDecl* temp = value_.vardecl_;
    value_.vardecl_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_vardecl(::Frontend_ir::Expr__VarDecl* vardecl) {
  clear_value();
  if (vardecl) {
    set_has_vardecl();
    value_.vardecl_ = vardecl;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr.VarDecl)
}
inline ::Frontend_ir::Expr__VarDecl* Expr::_internal_mutable_vardecl() {
  if (!_internal_has_vardecl()) {
    clear_value();
    set_has_vardecl();
    value_.vardecl_ = CreateMaybeMessage< ::Frontend_ir::Expr__VarDecl >(GetArena());
  }
  return value_.vardecl_;
}
inline ::Frontend_ir::Expr__VarDecl* Expr::mutable_vardecl() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr.VarDecl)
  return _internal_mutable_vardecl();
}

// .Frontend_ir.Expr._Assign Assign = 7;
inline bool Expr::_internal_has_assign() const {
  return value_case() == kAssign;
}
inline bool Expr::has_assign() const {
  return _internal_has_assign();
}
inline void Expr::set_has_assign() {
  _oneof_case_[0] = kAssign;
}
inline void Expr::clear_assign() {
  if (_internal_has_assign()) {
    if (GetArena() == nullptr) {
      delete value_.assign_;
    }
    clear_has_value();
  }
}
inline ::Frontend_ir::Expr__Assign* Expr::release_assign() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr.Assign)
  if (_internal_has_assign()) {
    clear_has_value();
      ::Frontend_ir::Expr__Assign* temp = value_.assign_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.assign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Frontend_ir::Expr__Assign& Expr::_internal_assign() const {
  return _internal_has_assign()
      ? *value_.assign_
      : *reinterpret_cast< ::Frontend_ir::Expr__Assign*>(&::Frontend_ir::_Expr__Assign_default_instance_);
}
inline const ::Frontend_ir::Expr__Assign& Expr::assign() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr.Assign)
  return _internal_assign();
}
inline ::Frontend_ir::Expr__Assign* Expr::unsafe_arena_release_assign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Frontend_ir.Expr.Assign)
  if (_internal_has_assign()) {
    clear_has_value();
    ::Frontend_ir::Expr__Assign* temp = value_.assign_;
    value_.assign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_assign(::Frontend_ir::Expr__Assign* assign) {
  clear_value();
  if (assign) {
    set_has_assign();
    value_.assign_ = assign;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr.Assign)
}
inline ::Frontend_ir::Expr__Assign* Expr::_internal_mutable_assign() {
  if (!_internal_has_assign()) {
    clear_value();
    set_has_assign();
    value_.assign_ = CreateMaybeMessage< ::Frontend_ir::Expr__Assign >(GetArena());
  }
  return value_.assign_;
}
inline ::Frontend_ir::Expr__Assign* Expr::mutable_assign() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr.Assign)
  return _internal_mutable_assign();
}

inline bool Expr::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Expr::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Expr::ValueCase Expr::value_case() const {
  return Expr::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Program

// repeated .Frontend_ir.Expr main = 1;
inline int Program::_internal_main_size() const {
  return main_.size();
}
inline int Program::main_size() const {
  return _internal_main_size();
}
inline void Program::clear_main() {
  main_.Clear();
}
inline ::Frontend_ir::Expr* Program::mutable_main(int index) {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Program.main)
  return main_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >*
Program::mutable_main() {
  // @@protoc_insertion_point(field_mutable_list:Frontend_ir.Program.main)
  return &main_;
}
inline const ::Frontend_ir::Expr& Program::_internal_main(int index) const {
  return main_.Get(index);
}
inline const ::Frontend_ir::Expr& Program::main(int index) const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Program.main)
  return _internal_main(index);
}
inline ::Frontend_ir::Expr* Program::_internal_add_main() {
  return main_.Add();
}
inline ::Frontend_ir::Expr* Program::add_main() {
  // @@protoc_insertion_point(field_add:Frontend_ir.Program.main)
  return _internal_add_main();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >&
Program::main() const {
  // @@protoc_insertion_point(field_list:Frontend_ir.Program.main)
  return main_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Frontend_ir

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frontend_2eproto
