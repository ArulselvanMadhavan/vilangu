// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frontend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frontend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frontend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frontend_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frontend_2eproto;
namespace Frontend_ir {
class Expr;
class ExprDefaultTypeInternal;
extern ExprDefaultTypeInternal _Expr_default_instance_;
class Expr__FunctionApp;
class Expr__FunctionAppDefaultTypeInternal;
extern Expr__FunctionAppDefaultTypeInternal _Expr__FunctionApp_default_instance_;
class Program;
class ProgramDefaultTypeInternal;
extern ProgramDefaultTypeInternal _Program_default_instance_;
}  // namespace Frontend_ir
PROTOBUF_NAMESPACE_OPEN
template<> ::Frontend_ir::Expr* Arena::CreateMaybeMessage<::Frontend_ir::Expr>(Arena*);
template<> ::Frontend_ir::Expr__FunctionApp* Arena::CreateMaybeMessage<::Frontend_ir::Expr__FunctionApp>(Arena*);
template<> ::Frontend_ir::Program* Arena::CreateMaybeMessage<::Frontend_ir::Program>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Frontend_ir {

// ===================================================================

class Expr__FunctionApp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Expr._FunctionApp) */ {
 public:
  inline Expr__FunctionApp() : Expr__FunctionApp(nullptr) {};
  virtual ~Expr__FunctionApp();

  Expr__FunctionApp(const Expr__FunctionApp& from);
  Expr__FunctionApp(Expr__FunctionApp&& from) noexcept
    : Expr__FunctionApp() {
    *this = ::std::move(from);
  }

  inline Expr__FunctionApp& operator=(const Expr__FunctionApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr__FunctionApp& operator=(Expr__FunctionApp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expr__FunctionApp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expr__FunctionApp* internal_default_instance() {
    return reinterpret_cast<const Expr__FunctionApp*>(
               &_Expr__FunctionApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Expr__FunctionApp& a, Expr__FunctionApp& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr__FunctionApp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr__FunctionApp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expr__FunctionApp* New() const final {
    return CreateMaybeMessage<Expr__FunctionApp>(nullptr);
  }

  Expr__FunctionApp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expr__FunctionApp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expr__FunctionApp& from);
  void MergeFrom(const Expr__FunctionApp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr__FunctionApp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Expr._FunctionApp";
  }
  protected:
  explicit Expr__FunctionApp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .Frontend_ir.Expr args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  ::Frontend_ir::Expr* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >*
      mutable_args();
  private:
  const ::Frontend_ir::Expr& _internal_args(int index) const;
  ::Frontend_ir::Expr* _internal_add_args();
  public:
  const ::Frontend_ir::Expr& args(int index) const;
  ::Frontend_ir::Expr* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >&
      args() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Frontend_ir.Expr._FunctionApp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr > args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_frontend_2eproto;
};
// -------------------------------------------------------------------

class Expr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Expr) */ {
 public:
  inline Expr() : Expr(nullptr) {};
  virtual ~Expr();

  Expr(const Expr& from);
  Expr(Expr&& from) noexcept
    : Expr() {
    *this = ::std::move(from);
  }

  inline Expr& operator=(const Expr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr& operator=(Expr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Expr& default_instance();

  enum ValueCase {
    kInteger = 1,
    kFunctionApp = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expr* internal_default_instance() {
    return reinterpret_cast<const Expr*>(
               &_Expr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Expr& a, Expr& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expr* New() const final {
    return CreateMaybeMessage<Expr>(nullptr);
  }

  Expr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Expr& from);
  void MergeFrom(const Expr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Expr";
  }
  protected:
  explicit Expr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Expr__FunctionApp _FunctionApp;

  // accessors -------------------------------------------------------

  enum : int {
    kIntegerFieldNumber = 1,
    kFunctionAppFieldNumber = 2,
  };
  // int64 Integer = 1;
  bool has_integer() const;
  private:
  bool _internal_has_integer() const;
  public:
  void clear_integer();
  ::PROTOBUF_NAMESPACE_ID::int64 integer() const;
  void set_integer(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_integer() const;
  void _internal_set_integer(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Frontend_ir.Expr._FunctionApp FunctionApp = 2;
  bool has_functionapp() const;
  private:
  bool _internal_has_functionapp() const;
  public:
  void clear_functionapp();
  const ::Frontend_ir::Expr__FunctionApp& functionapp() const;
  ::Frontend_ir::Expr__FunctionApp* release_functionapp();
  ::Frontend_ir::Expr__FunctionApp* mutable_functionapp();
  void set_allocated_functionapp(::Frontend_ir::Expr__FunctionApp* functionapp);
  private:
  const ::Frontend_ir::Expr__FunctionApp& _internal_functionapp() const;
  ::Frontend_ir::Expr__FunctionApp* _internal_mutable_functionapp();
  public:
  void unsafe_arena_set_allocated_functionapp(
      ::Frontend_ir::Expr__FunctionApp* functionapp);
  ::Frontend_ir::Expr__FunctionApp* unsafe_arena_release_functionapp();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:Frontend_ir.Expr)
 private:
  class _Internal;
  void set_has_integer();
  void set_has_functionapp();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 integer_;
    ::Frontend_ir::Expr__FunctionApp* functionapp_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frontend_2eproto;
};
// -------------------------------------------------------------------

class Program PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frontend_ir.Program) */ {
 public:
  inline Program() : Program(nullptr) {};
  virtual ~Program();

  Program(const Program& from);
  Program(Program&& from) noexcept
    : Program() {
    *this = ::std::move(from);
  }

  inline Program& operator=(const Program& from) {
    CopyFrom(from);
    return *this;
  }
  inline Program& operator=(Program&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Program& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Program* internal_default_instance() {
    return reinterpret_cast<const Program*>(
               &_Program_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Program& a, Program& b) {
    a.Swap(&b);
  }
  inline void Swap(Program* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Program* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Program* New() const final {
    return CreateMaybeMessage<Program>(nullptr);
  }

  Program* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Program>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Program& from);
  void MergeFrom(const Program& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Program* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frontend_ir.Program";
  }
  protected:
  explicit Program(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frontend_2eproto);
    return ::descriptor_table_frontend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainFieldNumber = 1,
  };
  // repeated .Frontend_ir.Expr main = 1;
  int main_size() const;
  private:
  int _internal_main_size() const;
  public:
  void clear_main();
  ::Frontend_ir::Expr* mutable_main(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >*
      mutable_main();
  private:
  const ::Frontend_ir::Expr& _internal_main(int index) const;
  ::Frontend_ir::Expr* _internal_add_main();
  public:
  const ::Frontend_ir::Expr& main(int index) const;
  ::Frontend_ir::Expr* add_main();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >&
      main() const;

  // @@protoc_insertion_point(class_scope:Frontend_ir.Program)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr > main_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frontend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Expr__FunctionApp

// required string name = 1;
inline bool Expr__FunctionApp::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Expr__FunctionApp::has_name() const {
  return _internal_has_name();
}
inline void Expr__FunctionApp::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Expr__FunctionApp::name() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr._FunctionApp.name)
  return _internal_name();
}
inline void Expr__FunctionApp::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Frontend_ir.Expr._FunctionApp.name)
}
inline std::string* Expr__FunctionApp::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr._FunctionApp.name)
  return _internal_mutable_name();
}
inline const std::string& Expr__FunctionApp::_internal_name() const {
  return name_.Get();
}
inline void Expr__FunctionApp::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Expr__FunctionApp::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Frontend_ir.Expr._FunctionApp.name)
}
inline void Expr__FunctionApp::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Frontend_ir.Expr._FunctionApp.name)
}
inline void Expr__FunctionApp::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Frontend_ir.Expr._FunctionApp.name)
}
inline std::string* Expr__FunctionApp::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Expr__FunctionApp::release_name() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr._FunctionApp.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Expr__FunctionApp::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Frontend_ir.Expr._FunctionApp.name)
}
inline std::string* Expr__FunctionApp::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Frontend_ir.Expr._FunctionApp.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Expr__FunctionApp::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr._FunctionApp.name)
}

// repeated .Frontend_ir.Expr args = 2;
inline int Expr__FunctionApp::_internal_args_size() const {
  return args_.size();
}
inline int Expr__FunctionApp::args_size() const {
  return _internal_args_size();
}
inline void Expr__FunctionApp::clear_args() {
  args_.Clear();
}
inline ::Frontend_ir::Expr* Expr__FunctionApp::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr._FunctionApp.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >*
Expr__FunctionApp::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:Frontend_ir.Expr._FunctionApp.args)
  return &args_;
}
inline const ::Frontend_ir::Expr& Expr__FunctionApp::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::Frontend_ir::Expr& Expr__FunctionApp::args(int index) const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr._FunctionApp.args)
  return _internal_args(index);
}
inline ::Frontend_ir::Expr* Expr__FunctionApp::_internal_add_args() {
  return args_.Add();
}
inline ::Frontend_ir::Expr* Expr__FunctionApp::add_args() {
  // @@protoc_insertion_point(field_add:Frontend_ir.Expr._FunctionApp.args)
  return _internal_add_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >&
Expr__FunctionApp::args() const {
  // @@protoc_insertion_point(field_list:Frontend_ir.Expr._FunctionApp.args)
  return args_;
}

// -------------------------------------------------------------------

// Expr

// int64 Integer = 1;
inline bool Expr::_internal_has_integer() const {
  return value_case() == kInteger;
}
inline bool Expr::has_integer() const {
  return _internal_has_integer();
}
inline void Expr::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline void Expr::clear_integer() {
  if (_internal_has_integer()) {
    value_.integer_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Expr::_internal_integer() const {
  if (_internal_has_integer()) {
    return value_.integer_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Expr::_internal_set_integer(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_integer()) {
    clear_value();
    set_has_integer();
  }
  value_.integer_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Expr::integer() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr.Integer)
  return _internal_integer();
}
inline void Expr::set_integer(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_integer(value);
  // @@protoc_insertion_point(field_set:Frontend_ir.Expr.Integer)
}

// .Frontend_ir.Expr._FunctionApp FunctionApp = 2;
inline bool Expr::_internal_has_functionapp() const {
  return value_case() == kFunctionApp;
}
inline bool Expr::has_functionapp() const {
  return _internal_has_functionapp();
}
inline void Expr::set_has_functionapp() {
  _oneof_case_[0] = kFunctionApp;
}
inline void Expr::clear_functionapp() {
  if (_internal_has_functionapp()) {
    if (GetArena() == nullptr) {
      delete value_.functionapp_;
    }
    clear_has_value();
  }
}
inline ::Frontend_ir::Expr__FunctionApp* Expr::release_functionapp() {
  // @@protoc_insertion_point(field_release:Frontend_ir.Expr.FunctionApp)
  if (_internal_has_functionapp()) {
    clear_has_value();
      ::Frontend_ir::Expr__FunctionApp* temp = value_.functionapp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.functionapp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Frontend_ir::Expr__FunctionApp& Expr::_internal_functionapp() const {
  return _internal_has_functionapp()
      ? *value_.functionapp_
      : *reinterpret_cast< ::Frontend_ir::Expr__FunctionApp*>(&::Frontend_ir::_Expr__FunctionApp_default_instance_);
}
inline const ::Frontend_ir::Expr__FunctionApp& Expr::functionapp() const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Expr.FunctionApp)
  return _internal_functionapp();
}
inline ::Frontend_ir::Expr__FunctionApp* Expr::unsafe_arena_release_functionapp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Frontend_ir.Expr.FunctionApp)
  if (_internal_has_functionapp()) {
    clear_has_value();
    ::Frontend_ir::Expr__FunctionApp* temp = value_.functionapp_;
    value_.functionapp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_functionapp(::Frontend_ir::Expr__FunctionApp* functionapp) {
  clear_value();
  if (functionapp) {
    set_has_functionapp();
    value_.functionapp_ = functionapp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frontend_ir.Expr.FunctionApp)
}
inline ::Frontend_ir::Expr__FunctionApp* Expr::_internal_mutable_functionapp() {
  if (!_internal_has_functionapp()) {
    clear_value();
    set_has_functionapp();
    value_.functionapp_ = CreateMaybeMessage< ::Frontend_ir::Expr__FunctionApp >(GetArena());
  }
  return value_.functionapp_;
}
inline ::Frontend_ir::Expr__FunctionApp* Expr::mutable_functionapp() {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Expr.FunctionApp)
  return _internal_mutable_functionapp();
}

inline bool Expr::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Expr::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Expr::ValueCase Expr::value_case() const {
  return Expr::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Program

// repeated .Frontend_ir.Expr main = 1;
inline int Program::_internal_main_size() const {
  return main_.size();
}
inline int Program::main_size() const {
  return _internal_main_size();
}
inline void Program::clear_main() {
  main_.Clear();
}
inline ::Frontend_ir::Expr* Program::mutable_main(int index) {
  // @@protoc_insertion_point(field_mutable:Frontend_ir.Program.main)
  return main_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >*
Program::mutable_main() {
  // @@protoc_insertion_point(field_mutable_list:Frontend_ir.Program.main)
  return &main_;
}
inline const ::Frontend_ir::Expr& Program::_internal_main(int index) const {
  return main_.Get(index);
}
inline const ::Frontend_ir::Expr& Program::main(int index) const {
  // @@protoc_insertion_point(field_get:Frontend_ir.Program.main)
  return _internal_main(index);
}
inline ::Frontend_ir::Expr* Program::_internal_add_main() {
  return main_.Add();
}
inline ::Frontend_ir::Expr* Program::add_main() {
  // @@protoc_insertion_point(field_add:Frontend_ir.Program.main)
  return _internal_add_main();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Frontend_ir::Expr >&
Program::main() const {
  // @@protoc_insertion_point(field_list:Frontend_ir.Program.main)
  return main_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Frontend_ir

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frontend_2eproto
